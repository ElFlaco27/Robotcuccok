
robocup3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007214  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007460  08007460  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007468  08007468  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007468  08007468  00017468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800746c  0800746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014dc  20000014  08007484  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014f0  08007484  000214f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be95  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e7b  00000000  00000000  0003bed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001670  00000000  00000000  0003fd58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001448  00000000  00000000  000413c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002af71  00000000  00000000  00042810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000166eb  00000000  00000000  0006d781  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbfdf  00000000  00000000  00083e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017fe4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a88  00000000  00000000  0017fec8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800738c 	.word	0x0800738c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800738c 	.word	0x0800738c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_TIM_IC_CaptureCallback>:
	TIM_handler.Instance = config.TIMx;
	HAL_TIM_IC_Stop_IT(&TIM_handler, config.TIM_channelx);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	uint32_t value2;
	uint32_t Diff_value;
	if((htim->Instance == IC_1_TIM) && (htim->Channel == IC_1_TIM_ACT_CHANNEL))
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a67      	ldr	r2, [pc, #412]	; (800067c <HAL_TIM_IC_CaptureCallback+0x1ac>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d13f      	bne.n	8000562 <HAL_TIM_IC_CaptureCallback+0x92>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	7f1b      	ldrb	r3, [r3, #28]
 80004e6:	2b08      	cmp	r3, #8
 80004e8:	d13b      	bne.n	8000562 <HAL_TIM_IC_CaptureCallback+0x92>
	{
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 80004ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ee:	691b      	ldr	r3, [r3, #16]
 80004f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d00a      	beq.n	800050e <HAL_TIM_IC_CaptureCallback+0x3e>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_1_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_1_TIM_CHANNEL);
 80004f8:	210c      	movs	r1, #12
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f002 fe8e 	bl	800321c <HAL_TIM_ReadCapturedValue>
 8000500:	4602      	mov	r2, r0
 8000502:	4b5f      	ldr	r3, [pc, #380]	; (8000680 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000504:	601a      	str	r2, [r3, #0]
			TIM_IC_1_CaptureIndex = 1;
 8000506:	4b5f      	ldr	r3, [pc, #380]	; (8000684 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000508:	2201      	movs	r2, #1
 800050a:	601a      	str	r2, [r3, #0]
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 800050c:	e0af      	b.n	800066e <HAL_TIM_IC_CaptureCallback+0x19e>
		}
		else if(TIM_IC_1_CaptureIndex == 1)
 800050e:	4b5d      	ldr	r3, [pc, #372]	; (8000684 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	f040 80ab 	bne.w	800066e <HAL_TIM_IC_CaptureCallback+0x19e>
		{
			 /* Get the 2nd Input Capture value */
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_1_TIM_CHANNEL);
 8000518:	210c      	movs	r1, #12
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f002 fe7e 	bl	800321c <HAL_TIM_ReadCapturedValue>
 8000520:	60f8      	str	r0, [r7, #12]

			 /* Capture computation */
			 if (value2 > TIM_IC_1_Value_1)
 8000522:	4b57      	ldr	r3, [pc, #348]	; (8000680 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	429a      	cmp	r2, r3
 800052a:	d905      	bls.n	8000538 <HAL_TIM_IC_CaptureCallback+0x68>
			 {
				 Diff_value = (value2 - TIM_IC_1_Value_1);
 800052c:	4b54      	ldr	r3, [pc, #336]	; (8000680 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	e00b      	b.n	8000550 <HAL_TIM_IC_CaptureCallback+0x80>
			 }
			 else if (value2 < TIM_IC_1_Value_1)
 8000538:	4b51      	ldr	r3, [pc, #324]	; (8000680 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	429a      	cmp	r2, r3
 8000540:	d206      	bcs.n	8000550 <HAL_TIM_IC_CaptureCallback+0x80>
			 {
				 /* 0xFFFF is max TIM1_CCRx value */
				 Diff_value = ((65535 - TIM_IC_1_Value_1) + value2) + 1;
 8000542:	4b4f      	ldr	r3, [pc, #316]	; (8000680 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800054e:	60bb      	str	r3, [r7, #8]
			 }
			 Write_IC_Channel1_Raw_data(&Diff_value);
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	4618      	mov	r0, r3
 8000556:	f006 fae3 	bl	8006b20 <Write_IC_Channel1_Raw_data>
			 TIM_IC_1_CaptureIndex = 0;
 800055a:	4b4a      	ldr	r3, [pc, #296]	; (8000684 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 8000560:	e085      	b.n	800066e <HAL_TIM_IC_CaptureCallback+0x19e>
		}
	}
#if (IC_IN_USE>1)
	else if((htim->Instance == IC_2_TIM) && (htim->Channel == IC_2_TIM_ACT_CHANNEL))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a48      	ldr	r2, [pc, #288]	; (8000688 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d13d      	bne.n	80005e8 <HAL_TIM_IC_CaptureCallback+0x118>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	7f1b      	ldrb	r3, [r3, #28]
 8000570:	2b04      	cmp	r3, #4
 8000572:	d139      	bne.n	80005e8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 8000574:	4b45      	ldr	r3, [pc, #276]	; (800068c <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000576:	691b      	ldr	r3, [r3, #16]
 8000578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00a      	beq.n	8000596 <HAL_TIM_IC_CaptureCallback+0xc6>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_2_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_2_TIM_CHANNEL);
 8000580:	2108      	movs	r1, #8
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f002 fe4a 	bl	800321c <HAL_TIM_ReadCapturedValue>
 8000588:	4602      	mov	r2, r0
 800058a:	4b41      	ldr	r3, [pc, #260]	; (8000690 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 800058c:	601a      	str	r2, [r3, #0]
			TIM_IC_2_CaptureIndex = 1;
 800058e:	4b41      	ldr	r3, [pc, #260]	; (8000694 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 8000594:	e06d      	b.n	8000672 <HAL_TIM_IC_CaptureCallback+0x1a2>
		}
		else if(TIM_IC_2_CaptureIndex == 1)
 8000596:	4b3f      	ldr	r3, [pc, #252]	; (8000694 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d169      	bne.n	8000672 <HAL_TIM_IC_CaptureCallback+0x1a2>
		{
			 /* Get the 2nd Input Capture value */
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_2_TIM_CHANNEL);
 800059e:	2108      	movs	r1, #8
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f002 fe3b 	bl	800321c <HAL_TIM_ReadCapturedValue>
 80005a6:	60f8      	str	r0, [r7, #12]

			 /* Capture computation */
			 if (value2 > TIM_IC_2_Value_1)
 80005a8:	4b39      	ldr	r3, [pc, #228]	; (8000690 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d905      	bls.n	80005be <HAL_TIM_IC_CaptureCallback+0xee>
			 {
				 Diff_value = (value2 - TIM_IC_2_Value_1);
 80005b2:	4b37      	ldr	r3, [pc, #220]	; (8000690 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	e00b      	b.n	80005d6 <HAL_TIM_IC_CaptureCallback+0x106>
			 }
			 else if (value2 < TIM_IC_2_Value_1)
 80005be:	4b34      	ldr	r3, [pc, #208]	; (8000690 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d206      	bcs.n	80005d6 <HAL_TIM_IC_CaptureCallback+0x106>
			 {
				 /* 0xFFFF is max TIM1_CCRx value */
				 Diff_value = ((65535 - TIM_IC_2_Value_1) + value2) + 1;
 80005c8:	4b31      	ldr	r3, [pc, #196]	; (8000690 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80005d4:	60bb      	str	r3, [r7, #8]
			 }
			 Write_IC_Channel2_Raw_data(&Diff_value);
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	4618      	mov	r0, r3
 80005dc:	f006 fab0 	bl	8006b40 <Write_IC_Channel2_Raw_data>
			 TIM_IC_2_CaptureIndex = 0;
 80005e0:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 80005e6:	e044      	b.n	8000672 <HAL_TIM_IC_CaptureCallback+0x1a2>
		}
	}
#endif
#if (IC_IN_USE>2)
	else if((htim->Instance == IC_3_TIM) && (htim->Channel == IC_3_TIM_ACT_CHANNEL))
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a26      	ldr	r2, [pc, #152]	; (8000688 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d140      	bne.n	8000674 <HAL_TIM_IC_CaptureCallback+0x1a4>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7f1b      	ldrb	r3, [r3, #28]
 80005f6:	2b08      	cmp	r3, #8
 80005f8:	d13c      	bne.n	8000674 <HAL_TIM_IC_CaptureCallback+0x1a4>
	{
		if(IC_3_GPIO->IDR & IC_3_GPIO_PIN)
 80005fa:	4b24      	ldr	r3, [pc, #144]	; (800068c <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00a      	beq.n	800061c <HAL_TIM_IC_CaptureCallback+0x14c>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_3_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_3_TIM_CHANNEL);
 8000606:	210c      	movs	r1, #12
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f002 fe07 	bl	800321c <HAL_TIM_ReadCapturedValue>
 800060e:	4602      	mov	r2, r0
 8000610:	4b21      	ldr	r3, [pc, #132]	; (8000698 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000612:	601a      	str	r2, [r3, #0]
			TIM_IC_3_CaptureIndex = 1;
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000616:	2201      	movs	r2, #1
 8000618:	601a      	str	r2, [r3, #0]
		}
	}
#endif


}
 800061a:	e02b      	b.n	8000674 <HAL_TIM_IC_CaptureCallback+0x1a4>
		else if(TIM_IC_3_CaptureIndex == 1)
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <HAL_TIM_IC_CaptureCallback+0x1cc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d127      	bne.n	8000674 <HAL_TIM_IC_CaptureCallback+0x1a4>
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_3_TIM_CHANNEL);
 8000624:	210c      	movs	r1, #12
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f002 fdf8 	bl	800321c <HAL_TIM_ReadCapturedValue>
 800062c:	60f8      	str	r0, [r7, #12]
			 if (value2 > TIM_IC_3_Value_1)
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	429a      	cmp	r2, r3
 8000636:	d905      	bls.n	8000644 <HAL_TIM_IC_CaptureCallback+0x174>
				 Diff_value = (value2 - TIM_IC_3_Value_1);
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	e00b      	b.n	800065c <HAL_TIM_IC_CaptureCallback+0x18c>
			 else if (value2 < TIM_IC_3_Value_1)
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	429a      	cmp	r2, r3
 800064c:	d206      	bcs.n	800065c <HAL_TIM_IC_CaptureCallback+0x18c>
				 Diff_value = ((65535 - TIM_IC_3_Value_1) + value2) + 1;
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800065a:	60bb      	str	r3, [r7, #8]
			 Write_IC_Channel3_Raw_data(&Diff_value);
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	4618      	mov	r0, r3
 8000662:	f006 fa7d 	bl	8006b60 <Write_IC_Channel3_Raw_data>
			 TIM_IC_3_CaptureIndex = 0;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
}
 800066c:	e002      	b.n	8000674 <HAL_TIM_IC_CaptureCallback+0x1a4>
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 800066e:	bf00      	nop
 8000670:	e000      	b.n	8000674 <HAL_TIM_IC_CaptureCallback+0x1a4>
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 8000672:	bf00      	nop
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40012c00 	.word	0x40012c00
 8000680:	20000da8 	.word	0x20000da8
 8000684:	20000db0 	.word	0x20000db0
 8000688:	40013400 	.word	0x40013400
 800068c:	48000800 	.word	0x48000800
 8000690:	20000df8 	.word	0x20000df8
 8000694:	20000db4 	.word	0x20000db4
 8000698:	20000dac 	.word	0x20000dac
 800069c:	20000dfc 	.word	0x20000dfc

080006a0 <TIMx_PWM_Init>:
#include "Timer_PWM.h"



void TIMx_PWM_Init(TIM_PWM_Typedef config)
{
 80006a0:	b084      	sub	sp, #16
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b0a4      	sub	sp, #144	; 0x90
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	f107 0c98 	add.w	ip, r7, #152	; 0x98
 80006ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80006bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]
 80006ce:	619a      	str	r2, [r3, #24]
	uint32_t uhPrescalerValue;
	uint32_t Period_Value;
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80006d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
	TIM_HandleTypeDef TIM_handler = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2240      	movs	r2, #64	; 0x40
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f006 fe47 	bl	800737c <memset>

	uhPrescalerValue = (uint32_t)(SystemCoreClock / TIMx_PWM_CLK) - 1;
 80006ee:	4b51      	ldr	r3, [pc, #324]	; (8000834 <TIMx_PWM_Init+0x194>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a51      	ldr	r2, [pc, #324]	; (8000838 <TIMx_PWM_Init+0x198>)
 80006f4:	fba2 2303 	umull	r2, r3, r2, r3
 80006f8:	0d9b      	lsrs	r3, r3, #22
 80006fa:	3b01      	subs	r3, #1
 80006fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	Period_Value = (uint32_t)(TIMx_PWM_CLK / config.Frequency) - 1;
 8000700:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000704:	4a4d      	ldr	r2, [pc, #308]	; (800083c <TIMx_PWM_Init+0x19c>)
 8000706:	fbb2 f3f3 	udiv	r3, r2, r3
 800070a:	3b01      	subs	r3, #1
 800070c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	TIM_handler.Instance				= config.TIMx;
 8000710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000714:	60fb      	str	r3, [r7, #12]
	TIM_handler.Init.Prescaler       	= uhPrescalerValue;
 8000716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800071a:	613b      	str	r3, [r7, #16]
	TIM_handler.Init.Period          	= Period_Value;
 800071c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000720:	61bb      	str	r3, [r7, #24]
	TIM_handler.Init.CounterMode 		= TIM_COUNTERMODE_UP;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
	TIM_handler.Init.ClockDivision 		= TIM_CLOCKDIVISION_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
	TIM_handler.Init.AutoReloadPreload 	= TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_TIM_PWM_Init(&TIM_handler) != HAL_OK)
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4618      	mov	r0, r3
 8000734:	f002 f980 	bl	8002a38 <HAL_TIM_PWM_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <TIMx_PWM_Init+0xa2>
	{
		Error_Handler();
 800073e:	f006 fc9d 	bl	800707c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	67fb      	str	r3, [r7, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_TIMEx_MasterConfigSynchronization(&TIM_handler, &sMasterConfig) != HAL_OK)
 800074c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f003 f958 	bl	8003a0c <HAL_TIMEx_MasterConfigSynchronization>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <TIMx_PWM_Init+0xc6>
	{
		Error_Handler();
 8000762:	f006 fc8b 	bl	800707c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000766:	2360      	movs	r3, #96	; 0x60
 8000768:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.Pulse = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076e:	2300      	movs	r3, #0
 8000770:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	673b      	str	r3, [r7, #112]	; 0x70
	if (HAL_TIM_PWM_ConfigChannel(&TIM_handler, &sConfigOC, config.TIM_channelx) != HAL_OK)
 8000776:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800077a:	461a      	mov	r2, r3
 800077c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fc31 	bl	8002fec <HAL_TIM_PWM_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <TIMx_PWM_Init+0xf4>
	{
		Error_Handler();
 8000790:	f006 fc74 	bl	800707c <Error_Handler>
	}

	if(config.GPIOx == GPIOA)
 8000794:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000798:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800079c:	d10c      	bne.n	80007b8 <TIMx_PWM_Init+0x118>
	{

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <TIMx_PWM_Init+0x1a0>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a27      	ldr	r2, [pc, #156]	; (8000840 <TIMx_PWM_Init+0x1a0>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b25      	ldr	r3, [pc, #148]	; (8000840 <TIMx_PWM_Init+0x1a0>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	e022      	b.n	80007fe <TIMx_PWM_Init+0x15e>
	}
	else if(config.GPIOx == GPIOB)
 80007b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80007bc:	4a21      	ldr	r2, [pc, #132]	; (8000844 <TIMx_PWM_Init+0x1a4>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d10c      	bne.n	80007dc <TIMx_PWM_Init+0x13c>
	{

	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <TIMx_PWM_Init+0x1a0>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a1e      	ldr	r2, [pc, #120]	; (8000840 <TIMx_PWM_Init+0x1a0>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <TIMx_PWM_Init+0x1a0>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	e010      	b.n	80007fe <TIMx_PWM_Init+0x15e>
	}
	else if(config.GPIOx == GPIOC)
 80007dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80007e0:	4a19      	ldr	r2, [pc, #100]	; (8000848 <TIMx_PWM_Init+0x1a8>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d10b      	bne.n	80007fe <TIMx_PWM_Init+0x15e>
	{

	    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <TIMx_PWM_Init+0x1a0>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a15      	ldr	r2, [pc, #84]	; (8000840 <TIMx_PWM_Init+0x1a0>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <TIMx_PWM_Init+0x1a0>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
	}
	GPIO_InitStruct.Alternate = config.GPIO_AlternateFunctionx;
 80007fe:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8000802:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_InitStruct.Pin = config.GPIO_Pinx;
 8000804:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000808:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	65bb      	str	r3, [r7, #88]	; 0x58

	HAL_GPIO_Init(config.GPIOx, &GPIO_InitStruct);
 8000816:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800081a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800081e:	4611      	mov	r1, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fbef 	bl	8001004 <HAL_GPIO_Init>

}
 8000826:	bf00      	nop
 8000828:	3790      	adds	r7, #144	; 0x90
 800082a:	46bd      	mov	sp, r7
 800082c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000830:	b004      	add	sp, #16
 8000832:	4770      	bx	lr
 8000834:	20000010 	.word	0x20000010
 8000838:	431bde83 	.word	0x431bde83
 800083c:	00f42400 	.word	0x00f42400
 8000840:	40021000 	.word	0x40021000
 8000844:	48000400 	.word	0x48000400
 8000848:	48000800 	.word	0x48000800

0800084c <TIMx_PWM_Start>:

void TIMx_PWM_Start(TIM_PWM_Typedef config)
{
 800084c:	b084      	sub	sp, #16
 800084e:	b580      	push	{r7, lr}
 8000850:	b090      	sub	sp, #64	; 0x40
 8000852:	af00      	add	r7, sp, #0
 8000854:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8000858:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_HandleTypeDef TIM_handler = {0};
 800085c:	463b      	mov	r3, r7
 800085e:	2240      	movs	r2, #64	; 0x40
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f006 fd8a 	bl	800737c <memset>

	TIM_handler.Instance = config.TIMx;
 8000868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800086a:	603b      	str	r3, [r7, #0]
	HAL_TIM_PWM_Start(&TIM_handler, config.TIM_channelx);
 800086c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000870:	461a      	mov	r2, r3
 8000872:	463b      	mov	r3, r7
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f002 f90a 	bl	8002a90 <HAL_TIM_PWM_Start>
}
 800087c:	bf00      	nop
 800087e:	3740      	adds	r7, #64	; 0x40
 8000880:	46bd      	mov	sp, r7
 8000882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000886:	b004      	add	sp, #16
 8000888:	4770      	bx	lr

0800088a <TIMx_PWM_Stop>:

void TIMx_PWM_Stop(TIM_PWM_Typedef config)
{
 800088a:	b084      	sub	sp, #16
 800088c:	b580      	push	{r7, lr}
 800088e:	b090      	sub	sp, #64	; 0x40
 8000890:	af00      	add	r7, sp, #0
 8000892:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8000896:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_HandleTypeDef TIM_handler = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2240      	movs	r2, #64	; 0x40
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f006 fd6b 	bl	800737c <memset>

	TIM_handler.Instance = config.TIMx;
 80008a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008a8:	603b      	str	r3, [r7, #0]
	HAL_TIM_PWM_Stop(&TIM_handler, config.TIM_channelx);
 80008aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80008ae:	461a      	mov	r2, r3
 80008b0:	463b      	mov	r3, r7
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 f943 	bl	8002b40 <HAL_TIM_PWM_Stop>
}
 80008ba:	bf00      	nop
 80008bc:	3740      	adds	r7, #64	; 0x40
 80008be:	46bd      	mov	sp, r7
 80008c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008c4:	b004      	add	sp, #16
 80008c6:	4770      	bx	lr

080008c8 <Change_PWM_Pulse>:



void Change_PWM_Pulse(TIM_PWM_Typedef config)
{
 80008c8:	b084      	sub	sp, #16
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b092      	sub	sp, #72	; 0x48
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 80008d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_HandleTypeDef TIM_handler = {0};
 80008d8:	463b      	mov	r3, r7
 80008da:	2240      	movs	r2, #64	; 0x40
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f006 fd4c 	bl	800737c <memset>
	uint32_t Period_Value;
	uint32_t Pulse_Value;
	TIM_handler.Instance = config.TIMx;
 80008e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008e6:	603b      	str	r3, [r7, #0]
	Period_Value = (uint32_t)(TIMx_PWM_CLK / config.Frequency) - 1;
 80008e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008ea:	4a25      	ldr	r2, [pc, #148]	; (8000980 <Change_PWM_Pulse+0xb8>)
 80008ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f0:	3b01      	subs	r3, #1
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
	if(config.Duty_Cicle == 0)
 80008f4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <Change_PWM_Pulse+0x3a>
	{
		Pulse_Value = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	647b      	str	r3, [r7, #68]	; 0x44
 8000900:	e00b      	b.n	800091a <Change_PWM_Pulse+0x52>
	}
	else
	{
		Pulse_Value = (uint32_t)((Period_Value * config.Duty_Cicle) / 100 - 1);
 8000902:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000906:	461a      	mov	r2, r3
 8000908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800090a:	fb03 f302 	mul.w	r3, r3, r2
 800090e:	4a1d      	ldr	r2, [pc, #116]	; (8000984 <Change_PWM_Pulse+0xbc>)
 8000910:	fba2 2303 	umull	r2, r3, r2, r3
 8000914:	095b      	lsrs	r3, r3, #5
 8000916:	3b01      	subs	r3, #1
 8000918:	647b      	str	r3, [r7, #68]	; 0x44
	}
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 800091a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800091e:	2b00      	cmp	r3, #0
 8000920:	d103      	bne.n	800092a <Change_PWM_Pulse+0x62>
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000926:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000928:	e022      	b.n	8000970 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 800092a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800092e:	2b04      	cmp	r3, #4
 8000930:	d103      	bne.n	800093a <Change_PWM_Pulse+0x72>
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000936:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000938:	e01a      	b.n	8000970 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 800093a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800093e:	2b08      	cmp	r3, #8
 8000940:	d103      	bne.n	800094a <Change_PWM_Pulse+0x82>
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000946:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000948:	e012      	b.n	8000970 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 800094a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800094e:	2b0c      	cmp	r3, #12
 8000950:	d103      	bne.n	800095a <Change_PWM_Pulse+0x92>
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000956:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000958:	e00a      	b.n	8000970 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 800095a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800095e:	2b10      	cmp	r3, #16
 8000960:	d103      	bne.n	800096a <Change_PWM_Pulse+0xa2>
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000966:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000968:	e002      	b.n	8000970 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800096e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000970:	bf00      	nop
 8000972:	3748      	adds	r7, #72	; 0x48
 8000974:	46bd      	mov	sp, r7
 8000976:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800097a:	b004      	add	sp, #16
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	00f42400 	.word	0x00f42400
 8000984:	51eb851f 	.word	0x51eb851f

08000988 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	if ((htim->Instance == TIM1))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <HAL_TIM_PWM_MspInit+0x80>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d10c      	bne.n	80009b4 <HAL_TIM_PWM_MspInit+0x2c>
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM1_CLK_ENABLE();
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <HAL_TIM_PWM_MspInit+0x84>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <HAL_TIM_PWM_MspInit+0x84>)
 80009a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a4:	6613      	str	r3, [r2, #96]	; 0x60
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_TIM_PWM_MspInit+0x84>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697b      	ldr	r3, [r7, #20]
	else if ((htim->Instance == TIM3))
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM3_CLK_ENABLE();
	}
}
 80009b2:	e022      	b.n	80009fa <HAL_TIM_PWM_MspInit+0x72>
	else if ((htim->Instance == TIM2))
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009bc:	d10c      	bne.n	80009d8 <HAL_TIM_PWM_MspInit+0x50>
	    __HAL_RCC_TIM2_CLK_ENABLE();
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <HAL_TIM_PWM_MspInit+0x84>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <HAL_TIM_PWM_MspInit+0x84>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_TIM_PWM_MspInit+0x84>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
}
 80009d6:	e010      	b.n	80009fa <HAL_TIM_PWM_MspInit+0x72>
	else if ((htim->Instance == TIM3))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <HAL_TIM_PWM_MspInit+0x88>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d10b      	bne.n	80009fa <HAL_TIM_PWM_MspInit+0x72>
	    __HAL_RCC_TIM3_CLK_ENABLE();
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_TIM_PWM_MspInit+0x84>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e6:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <HAL_TIM_PWM_MspInit+0x84>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6593      	str	r3, [r2, #88]	; 0x58
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <HAL_TIM_PWM_MspInit+0x84>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
}
 80009fa:	bf00      	nop
 80009fc:	371c      	adds	r7, #28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40012c00 	.word	0x40012c00
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40000400 	.word	0x40000400

08000a14 <TIMx_ENC_Init>:
uint32_t TIM_ENC_4_CaptureIndex;
#endif


void TIMx_ENC_Init(TIM_ENC_Typedef config)
{
 8000a14:	b084      	sub	sp, #16
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b098      	sub	sp, #96	; 0x60
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	f107 0c68 	add.w	ip, r7, #104	; 0x68
 8000a20:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
	TIM_Encoder_InitTypeDef sConfigENC = {0};
 8000a30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a34:	2224      	movs	r2, #36	; 0x24
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f006 fc9f 	bl	800737c <memset>
	GPIO_InitTypeDef  GPIO_InitStruct;

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	TIM_handler.Instance = config.TIMx;
 8000a3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a40:	4a69      	ldr	r2, [pc, #420]	; (8000be8 <TIMx_ENC_Init+0x1d4>)
 8000a42:	6013      	str	r3, [r2, #0]
	TIM_handler.Init.Prescaler = 0;
 8000a44:	4b68      	ldr	r3, [pc, #416]	; (8000be8 <TIMx_ENC_Init+0x1d4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	605a      	str	r2, [r3, #4]
	TIM_handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b67      	ldr	r3, [pc, #412]	; (8000be8 <TIMx_ENC_Init+0x1d4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
	TIM_handler.Init.Period = 65535;
 8000a50:	4b65      	ldr	r3, [pc, #404]	; (8000be8 <TIMx_ENC_Init+0x1d4>)
 8000a52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a56:	60da      	str	r2, [r3, #12]
	TIM_handler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a58:	4b63      	ldr	r3, [pc, #396]	; (8000be8 <TIMx_ENC_Init+0x1d4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
	TIM_handler.Init.RepetitionCounter = 0;
 8000a5e:	4b62      	ldr	r3, [pc, #392]	; (8000be8 <TIMx_ENC_Init+0x1d4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
	TIM_handler.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a64:	4b60      	ldr	r3, [pc, #384]	; (8000be8 <TIMx_ENC_Init+0x1d4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
	sConfigENC.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigENC.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigENC.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a72:	2301      	movs	r3, #1
 8000a74:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigENC.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigENC.IC1Filter = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigENC.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigENC.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a82:	2301      	movs	r3, #1
 8000a84:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigENC.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigENC.IC2Filter = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_Encoder_Init(&TIM_handler, &sConfigENC) != HAL_OK)
 8000a8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a92:	4619      	mov	r1, r3
 8000a94:	4854      	ldr	r0, [pc, #336]	; (8000be8 <TIMx_ENC_Init+0x1d4>)
 8000a96:	f002 f8c1 	bl	8002c1c <HAL_TIM_Encoder_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <TIMx_ENC_Init+0x90>
	{
		Error_Handler();
 8000aa0:	f006 faec 	bl	800707c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&TIM_handler, &sMasterConfig) != HAL_OK)
 8000ab0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	484c      	ldr	r0, [pc, #304]	; (8000be8 <TIMx_ENC_Init+0x1d4>)
 8000ab8:	f002 ffa8 	bl	8003a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <TIMx_ENC_Init+0xb2>
	{
		Error_Handler();
 8000ac2:	f006 fadb 	bl	800707c <Error_Handler>
	}


	if(config.GPIOx_ch1 == GPIOA)
 8000ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ac8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000acc:	d10c      	bne.n	8000ae8 <TIMx_ENC_Init+0xd4>
	{

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b47      	ldr	r3, [pc, #284]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a46      	ldr	r2, [pc, #280]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b44      	ldr	r3, [pc, #272]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	61bb      	str	r3, [r7, #24]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	e020      	b.n	8000b2a <TIMx_ENC_Init+0x116>
	}
	else if(config.GPIOx_ch1 == GPIOB)
 8000ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aea:	4a41      	ldr	r2, [pc, #260]	; (8000bf0 <TIMx_ENC_Init+0x1dc>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d10c      	bne.n	8000b0a <TIMx_ENC_Init+0xf6>
	{

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	4b3e      	ldr	r3, [pc, #248]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	4a3d      	ldr	r2, [pc, #244]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afc:	4b3b      	ldr	r3, [pc, #236]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	e00f      	b.n	8000b2a <TIMx_ENC_Init+0x116>
	}
	else if(config.GPIOx_ch1 == GPIOC)
 8000b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b0c:	4a39      	ldr	r2, [pc, #228]	; (8000bf4 <TIMx_ENC_Init+0x1e0>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d10b      	bne.n	8000b2a <TIMx_ENC_Init+0x116>
	{

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b36      	ldr	r3, [pc, #216]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a35      	ldr	r2, [pc, #212]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b33      	ldr	r3, [pc, #204]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
	}

	if(config.GPIOx_ch2 == GPIOA)
 8000b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b30:	d10c      	bne.n	8000b4c <TIMx_ENC_Init+0x138>
	{

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a2d      	ldr	r2, [pc, #180]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	e020      	b.n	8000b8e <TIMx_ENC_Init+0x17a>
	}
	else if(config.GPIOx_ch2 == GPIOB)
 8000b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b4e:	4a28      	ldr	r2, [pc, #160]	; (8000bf0 <TIMx_ENC_Init+0x1dc>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d10c      	bne.n	8000b6e <TIMx_ENC_Init+0x15a>
	{

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b54:	4b25      	ldr	r3, [pc, #148]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b58:	4a24      	ldr	r2, [pc, #144]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	e00f      	b.n	8000b8e <TIMx_ENC_Init+0x17a>
	}
	else if(config.GPIOx_ch2 == GPIOC)
 8000b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b70:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <TIMx_ENC_Init+0x1e0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d10b      	bne.n	8000b8e <TIMx_ENC_Init+0x17a>
	{

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <TIMx_ENC_Init+0x1d8>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
	}


	GPIO_InitStruct.Pin = config.GPIO_Pinx_ch1;
 8000b8e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000b92:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = config.GPIO_AlternateFunctionx;
 8000ba0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(config.GPIOx_ch1, &GPIO_InitStruct);
 8000ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ba8:	f107 021c 	add.w	r2, r7, #28
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fa28 	bl	8001004 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = config.GPIO_Pinx_ch2;
 8000bb4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000bb8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = config.GPIO_AlternateFunctionx;
 8000bc6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(config.GPIOx_ch2, &GPIO_InitStruct);
 8000bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bce:	f107 021c 	add.w	r2, r7, #28
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fa15 	bl	8001004 <HAL_GPIO_Init>

	//HAL_NVENC_SetPriority(config.TIMx_IRQ, 0, 0);
	//HAL_NVENC_EnableIRQ(config.TIMx_IRQ);
}
 8000bda:	bf00      	nop
 8000bdc:	3760      	adds	r7, #96	; 0x60
 8000bde:	46bd      	mov	sp, r7
 8000be0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr
 8000be8:	20000db8 	.word	0x20000db8
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48000400 	.word	0x48000400
 8000bf4:	48000800 	.word	0x48000800

08000bf8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_ENC)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

	if ((htim_ENC->Instance == TIM1))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d10c      	bne.n	8000c24 <HAL_TIM_Encoder_MspInit+0x2c>
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c14:	6613      	str	r3, [r2, #96]	; 0x60
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697b      	ldr	r3, [r7, #20]
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM3_CLK_ENABLE();
	}

}
 8000c22:	e022      	b.n	8000c6a <HAL_TIM_Encoder_MspInit+0x72>
	else if ((htim_ENC->Instance == TIM2))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c2c:	d10c      	bne.n	8000c48 <HAL_TIM_Encoder_MspInit+0x50>
	    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
}
 8000c46:	e010      	b.n	8000c6a <HAL_TIM_Encoder_MspInit+0x72>
	else if ((htim_ENC->Instance == TIM3))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <HAL_TIM_Encoder_MspInit+0x88>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d10b      	bne.n	8000c6a <HAL_TIM_Encoder_MspInit+0x72>
	    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
}
 8000c6a:	bf00      	nop
 8000c6c:	371c      	adds	r7, #28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40012c00 	.word	0x40012c00
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40000400 	.word	0x40000400

08000c84 <TIMx_ENC_Start>:

void TIMx_ENC_Start(TIM_ENC_Typedef config)
{
 8000c84:	b084      	sub	sp, #16
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	f107 0c08 	add.w	ip, r7, #8
 8000c8e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_handler.Instance = config.TIMx;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <TIMx_ENC_Start+0x28>)
 8000c96:	6013      	str	r3, [r2, #0]
	HAL_TIM_Encoder_Start(&TIM_handler, TIM_CHANNEL_ALL);
 8000c98:	213c      	movs	r1, #60	; 0x3c
 8000c9a:	4804      	ldr	r0, [pc, #16]	; (8000cac <TIMx_ENC_Start+0x28>)
 8000c9c:	f002 f850 	bl	8002d40 <HAL_TIM_Encoder_Start>
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr
 8000cac:	20000db8 	.word	0x20000db8

08000cb0 <HAL_UART_RxCpltCallback>:
uint8_t aRxBuffer[RXBUFFERSIZE];
extern UART_HandleTypeDef huart3;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	Rx_fifo_push(aRxBuffer[0]);
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_UART_RxCpltCallback+0x24>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f004 f94f 	bl	8004f60 <Rx_fifo_push>
	HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, RXBUFFERSIZE);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4903      	ldr	r1, [pc, #12]	; (8000cd4 <HAL_UART_RxCpltCallback+0x24>)
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <HAL_UART_RxCpltCallback+0x28>)
 8000cc8:	f002 ffc4 	bl	8003c54 <HAL_UART_Receive_IT>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000e00 	.word	0x20000e00
 8000cd8:	20001424 	.word	0x20001424

08000cdc <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	uint8_t transmit_enabled=TRUE;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
	Write_Transmit_Enabled(&transmit_enabled);
 8000ce8:	f107 030f 	add.w	r3, r7, #15
 8000cec:	4618      	mov	r0, r3
 8000cee:	f005 ff7d 	bl	8006bec <Write_Transmit_Enabled>
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	71fb      	strb	r3, [r7, #7]
#if (INSTRUCTION_CACHE_ENABLE == 0)
   __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_Init+0x3c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <HAL_Init+0x3c>)
 8000d0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d10:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d12:	2003      	movs	r0, #3
 8000d14:	f000 f8ff 	bl	8000f16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f006 fa27 	bl	800716c <HAL_InitTick>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	71fb      	strb	r3, [r7, #7]
 8000d28:	e001      	b.n	8000d2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d2a:	f006 f9ab 	bl	8007084 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40022000 	.word	0x40022000

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_IncTick+0x1c>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x20>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <HAL_IncTick+0x1c>)
 8000d4c:	6013      	str	r3, [r2, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	20000e04 	.word	0x20000e04
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000e04 	.word	0x20000e04

08000d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff ffee 	bl	8000d60 <HAL_GetTick>
 8000d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d90:	d004      	beq.n	8000d9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_Delay+0x40>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	4413      	add	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d9c:	bf00      	nop
 8000d9e:	f7ff ffdf 	bl	8000d60 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d8f7      	bhi.n	8000d9e <HAL_Delay+0x26>
  {
  }
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000004 	.word	0x20000004

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff4c 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3e:	f7ff ff61 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	6978      	ldr	r0, [r7, #20]
 8000f4a:	f7ff ffb1 	bl	8000eb0 <NVIC_EncodePriority>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff80 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff54 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d005      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e029      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 020e 	bic.w	r2, r2, #14
 8000fb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0201 	bic.w	r2, r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc8:	f003 021c 	and.w	r2, r3, #28
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	4798      	blx	r3
    }
  }
  return status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	e17f      	b.n	8001314 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8171 	beq.w	800130e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x38>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b12      	cmp	r3, #18
 800103a:	d123      	bne.n	8001084 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	220f      	movs	r2, #15
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	691a      	ldr	r2, [r3, #16]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	08da      	lsrs	r2, r3, #3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3208      	adds	r2, #8
 800107e:	6939      	ldr	r1, [r7, #16]
 8001080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0203 	and.w	r2, r3, #3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d00b      	beq.n	80010d8 <HAL_GPIO_Init+0xd4>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d007      	beq.n	80010d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010cc:	2b11      	cmp	r3, #17
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b12      	cmp	r3, #18
 80010d6:	d130      	bne.n	800113a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800110e:	2201      	movs	r2, #1
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	f003 0201 	and.w	r2, r3, #1
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b03      	cmp	r3, #3
 8001144:	d118      	bne.n	8001178 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800114c:	2201      	movs	r2, #1
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	08db      	lsrs	r3, r3, #3
 8001162:	f003 0201 	and.w	r2, r3, #1
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80ac 	beq.w	800130e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	4b5e      	ldr	r3, [pc, #376]	; (8001330 <HAL_GPIO_Init+0x32c>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ba:	4a5d      	ldr	r2, [pc, #372]	; (8001330 <HAL_GPIO_Init+0x32c>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6613      	str	r3, [r2, #96]	; 0x60
 80011c2:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <HAL_GPIO_Init+0x32c>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011ce:	4a59      	ldr	r2, [pc, #356]	; (8001334 <HAL_GPIO_Init+0x330>)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	220f      	movs	r2, #15
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f8:	d025      	beq.n	8001246 <HAL_GPIO_Init+0x242>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4e      	ldr	r2, [pc, #312]	; (8001338 <HAL_GPIO_Init+0x334>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d01f      	beq.n	8001242 <HAL_GPIO_Init+0x23e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4d      	ldr	r2, [pc, #308]	; (800133c <HAL_GPIO_Init+0x338>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d019      	beq.n	800123e <HAL_GPIO_Init+0x23a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4c      	ldr	r2, [pc, #304]	; (8001340 <HAL_GPIO_Init+0x33c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0x236>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4b      	ldr	r2, [pc, #300]	; (8001344 <HAL_GPIO_Init+0x340>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00d      	beq.n	8001236 <HAL_GPIO_Init+0x232>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4a      	ldr	r2, [pc, #296]	; (8001348 <HAL_GPIO_Init+0x344>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d007      	beq.n	8001232 <HAL_GPIO_Init+0x22e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a49      	ldr	r2, [pc, #292]	; (800134c <HAL_GPIO_Init+0x348>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_GPIO_Init+0x22a>
 800122a:	2306      	movs	r3, #6
 800122c:	e00c      	b.n	8001248 <HAL_GPIO_Init+0x244>
 800122e:	2307      	movs	r3, #7
 8001230:	e00a      	b.n	8001248 <HAL_GPIO_Init+0x244>
 8001232:	2305      	movs	r3, #5
 8001234:	e008      	b.n	8001248 <HAL_GPIO_Init+0x244>
 8001236:	2304      	movs	r3, #4
 8001238:	e006      	b.n	8001248 <HAL_GPIO_Init+0x244>
 800123a:	2303      	movs	r3, #3
 800123c:	e004      	b.n	8001248 <HAL_GPIO_Init+0x244>
 800123e:	2302      	movs	r3, #2
 8001240:	e002      	b.n	8001248 <HAL_GPIO_Init+0x244>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_GPIO_Init+0x244>
 8001246:	2300      	movs	r3, #0
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	f002 0203 	and.w	r2, r2, #3
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	4093      	lsls	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001258:	4936      	ldr	r1, [pc, #216]	; (8001334 <HAL_GPIO_Init+0x330>)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <HAL_GPIO_Init+0x34c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800128a:	4a31      	ldr	r2, [pc, #196]	; (8001350 <HAL_GPIO_Init+0x34c>)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001290:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <HAL_GPIO_Init+0x34c>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012b4:	4a26      	ldr	r2, [pc, #152]	; (8001350 <HAL_GPIO_Init+0x34c>)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ba:	4b25      	ldr	r3, [pc, #148]	; (8001350 <HAL_GPIO_Init+0x34c>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012de:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <HAL_GPIO_Init+0x34c>)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_GPIO_Init+0x34c>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001308:	4a11      	ldr	r2, [pc, #68]	; (8001350 <HAL_GPIO_Init+0x34c>)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3301      	adds	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa22 f303 	lsr.w	r3, r2, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	f47f ae78 	bne.w	8001014 <HAL_GPIO_Init+0x10>
  }
}
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40021000 	.word	0x40021000
 8001334:	40010000 	.word	0x40010000
 8001338:	48000400 	.word	0x48000400
 800133c:	48000800 	.word	0x48000800
 8001340:	48000c00 	.word	0x48000c00
 8001344:	48001000 	.word	0x48001000
 8001348:	48001400 	.word	0x48001400
 800134c:	48001800 	.word	0x48001800
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
 8001360:	4613      	mov	r3, r2
 8001362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001364:	787b      	ldrb	r3, [r7, #1]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001370:	e002      	b.n	8001378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <HAL_PWREx_GetVoltageRange+0x18>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40007000 	.word	0x40007000

080013a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ae:	d130      	bne.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013bc:	d038      	beq.n	8001430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013c6:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2232      	movs	r2, #50	; 0x32
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013da:	fba2 2303 	umull	r2, r3, r2, r3
 80013de:	0c9b      	lsrs	r3, r3, #18
 80013e0:	3301      	adds	r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e4:	e002      	b.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f8:	d102      	bne.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f2      	bne.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800140c:	d110      	bne.n	8001430 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e00f      	b.n	8001432 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800141a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800141e:	d007      	beq.n	8001430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001428:	4a05      	ldr	r2, [pc, #20]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40007000 	.word	0x40007000
 8001444:	20000010 	.word	0x20000010
 8001448:	431bde83 	.word	0x431bde83

0800144c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e39d      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800145e:	4ba4      	ldr	r3, [pc, #656]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001468:	4ba1      	ldr	r3, [pc, #644]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80e1 	beq.w	8001642 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <HAL_RCC_OscConfig+0x4a>
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b0c      	cmp	r3, #12
 800148a:	f040 8088 	bne.w	800159e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2b01      	cmp	r3, #1
 8001492:	f040 8084 	bne.w	800159e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001496:	4b96      	ldr	r3, [pc, #600]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x62>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e375      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1a      	ldr	r2, [r3, #32]
 80014b2:	4b8f      	ldr	r3, [pc, #572]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <HAL_RCC_OscConfig+0x7c>
 80014be:	4b8c      	ldr	r3, [pc, #560]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014c6:	e005      	b.n	80014d4 <HAL_RCC_OscConfig+0x88>
 80014c8:	4b89      	ldr	r3, [pc, #548]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80014ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d223      	bcs.n	8001520 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fd3b 	bl	8001f58 <RCC_SetFlashLatencyFromMSIRange>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e356      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ec:	4b80      	ldr	r3, [pc, #512]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a7f      	ldr	r2, [pc, #508]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80014f2:	f043 0308 	orr.w	r3, r3, #8
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b7d      	ldr	r3, [pc, #500]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	497a      	ldr	r1, [pc, #488]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800150a:	4b79      	ldr	r3, [pc, #484]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	4975      	ldr	r1, [pc, #468]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
 800151e:	e022      	b.n	8001566 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001520:	4b73      	ldr	r3, [pc, #460]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a72      	ldr	r2, [pc, #456]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b70      	ldr	r3, [pc, #448]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	496d      	ldr	r1, [pc, #436]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800153e:	4b6c      	ldr	r3, [pc, #432]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	4968      	ldr	r1, [pc, #416]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 800154e:	4313      	orrs	r3, r2
 8001550:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fcfe 	bl	8001f58 <RCC_SetFlashLatencyFromMSIRange>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e319      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001566:	f000 fc03 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 800156a:	4601      	mov	r1, r0
 800156c:	4b60      	ldr	r3, [pc, #384]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	4a5f      	ldr	r2, [pc, #380]	; (80016f4 <HAL_RCC_OscConfig+0x2a8>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	fa21 f303 	lsr.w	r3, r1, r3
 8001582:	4a5d      	ldr	r2, [pc, #372]	; (80016f8 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001586:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <HAL_RCC_OscConfig+0x2b0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f005 fdee 	bl	800716c <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d052      	beq.n	8001640 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	e2fd      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d032      	beq.n	800160c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015a6:	4b52      	ldr	r3, [pc, #328]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a51      	ldr	r2, [pc, #324]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fbd5 	bl	8000d60 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ba:	f7ff fbd1 	bl	8000d60 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e2e6      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015cc:	4b48      	ldr	r3, [pc, #288]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d8:	4b45      	ldr	r3, [pc, #276]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a44      	ldr	r2, [pc, #272]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b42      	ldr	r3, [pc, #264]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	493f      	ldr	r1, [pc, #252]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f6:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	493a      	ldr	r1, [pc, #232]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]
 800160a:	e01a      	b.n	8001642 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800160c:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a37      	ldr	r2, [pc, #220]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001618:	f7ff fba2 	bl	8000d60 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001620:	f7ff fb9e 	bl	8000d60 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e2b3      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x1d4>
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001640:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d074      	beq.n	8001738 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2b08      	cmp	r3, #8
 8001652:	d005      	beq.n	8001660 <HAL_RCC_OscConfig+0x214>
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b0c      	cmp	r3, #12
 8001658:	d10e      	bne.n	8001678 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d10b      	bne.n	8001678 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d064      	beq.n	8001736 <HAL_RCC_OscConfig+0x2ea>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d160      	bne.n	8001736 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e290      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001680:	d106      	bne.n	8001690 <HAL_RCC_OscConfig+0x244>
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e01d      	b.n	80016cc <HAL_RCC_OscConfig+0x280>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x268>
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80016a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0x280>
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_RCC_OscConfig+0x2a4>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d01c      	beq.n	800170e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb44 	bl	8000d60 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	e011      	b.n	8001700 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fb40 	bl	8000d60 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d90a      	bls.n	8001700 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e255      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	08007418 	.word	0x08007418
 80016f8:	20000010 	.word	0x20000010
 80016fc:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001700:	4bae      	ldr	r3, [pc, #696]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0e7      	beq.n	80016dc <HAL_RCC_OscConfig+0x290>
 800170c:	e014      	b.n	8001738 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170e:	f7ff fb27 	bl	8000d60 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001716:	f7ff fb23 	bl	8000d60 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b64      	cmp	r3, #100	; 0x64
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e238      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001728:	4ba4      	ldr	r3, [pc, #656]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x2ca>
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001736:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d060      	beq.n	8001806 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b04      	cmp	r3, #4
 8001748:	d005      	beq.n	8001756 <HAL_RCC_OscConfig+0x30a>
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	2b0c      	cmp	r3, #12
 800174e:	d119      	bne.n	8001784 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d116      	bne.n	8001784 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001756:	4b99      	ldr	r3, [pc, #612]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_RCC_OscConfig+0x322>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e215      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b93      	ldr	r3, [pc, #588]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	061b      	lsls	r3, r3, #24
 800177c:	498f      	ldr	r1, [pc, #572]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001782:	e040      	b.n	8001806 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d023      	beq.n	80017d4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178c:	4b8b      	ldr	r3, [pc, #556]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a8a      	ldr	r2, [pc, #552]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fae2 	bl	8000d60 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fade 	bl	8000d60 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e1f3      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b2:	4b82      	ldr	r3, [pc, #520]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017be:	4b7f      	ldr	r3, [pc, #508]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	061b      	lsls	r3, r3, #24
 80017cc:	497b      	ldr	r1, [pc, #492]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
 80017d2:	e018      	b.n	8001806 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d4:	4b79      	ldr	r3, [pc, #484]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a78      	ldr	r2, [pc, #480]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 80017da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fabe 	bl	8000d60 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e8:	f7ff faba 	bl	8000d60 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1cf      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017fa:	4b70      	ldr	r3, [pc, #448]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d03c      	beq.n	800188c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d01c      	beq.n	8001854 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181a:	4b68      	ldr	r3, [pc, #416]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 800181c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001820:	4a66      	ldr	r2, [pc, #408]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182a:	f7ff fa99 	bl	8000d60 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001832:	f7ff fa95 	bl	8000d60 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e1aa      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001844:	4b5d      	ldr	r3, [pc, #372]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0ef      	beq.n	8001832 <HAL_RCC_OscConfig+0x3e6>
 8001852:	e01b      	b.n	800188c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001854:	4b59      	ldr	r3, [pc, #356]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185a:	4a58      	ldr	r2, [pc, #352]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff fa7c 	bl	8000d60 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff fa78 	bl	8000d60 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e18d      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800187e:	4b4f      	ldr	r3, [pc, #316]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ef      	bne.n	800186c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80a5 	beq.w	80019e4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10d      	bne.n	80018c6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b44      	ldr	r3, [pc, #272]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	4a43      	ldr	r2, [pc, #268]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6593      	str	r3, [r2, #88]	; 0x58
 80018b6:	4b41      	ldr	r3, [pc, #260]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c2:	2301      	movs	r3, #1
 80018c4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <HAL_RCC_OscConfig+0x574>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d118      	bne.n	8001904 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018d2:	4b3b      	ldr	r3, [pc, #236]	; (80019c0 <HAL_RCC_OscConfig+0x574>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a3a      	ldr	r2, [pc, #232]	; (80019c0 <HAL_RCC_OscConfig+0x574>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018de:	f7ff fa3f 	bl	8000d60 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e6:	f7ff fa3b 	bl	8000d60 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e150      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f8:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <HAL_RCC_OscConfig+0x574>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d108      	bne.n	800191e <HAL_RCC_OscConfig+0x4d2>
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 800190e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001912:	4a2a      	ldr	r2, [pc, #168]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800191c:	e024      	b.n	8001968 <HAL_RCC_OscConfig+0x51c>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b05      	cmp	r3, #5
 8001924:	d110      	bne.n	8001948 <HAL_RCC_OscConfig+0x4fc>
 8001926:	4b25      	ldr	r3, [pc, #148]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192c:	4a23      	ldr	r2, [pc, #140]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001936:	4b21      	ldr	r3, [pc, #132]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193c:	4a1f      	ldr	r2, [pc, #124]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001946:	e00f      	b.n	8001968 <HAL_RCC_OscConfig+0x51c>
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	4a1b      	ldr	r2, [pc, #108]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 800195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195e:	4a17      	ldr	r2, [pc, #92]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d016      	beq.n	800199e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001970:	f7ff f9f6 	bl	8000d60 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001976:	e00a      	b.n	800198e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff f9f2 	bl	8000d60 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	; 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e105      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_OscConfig+0x570>)
 8001990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ed      	beq.n	8001978 <HAL_RCC_OscConfig+0x52c>
 800199c:	e019      	b.n	80019d2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff f9df 	bl	8000d60 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a4:	e00e      	b.n	80019c4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff f9db 	bl	8000d60 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d905      	bls.n	80019c4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e0ee      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c4:	4b77      	ldr	r3, [pc, #476]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1e9      	bne.n	80019a6 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019d2:	7ffb      	ldrb	r3, [r7, #31]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d105      	bne.n	80019e4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d8:	4b72      	ldr	r3, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019dc:	4a71      	ldr	r2, [pc, #452]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 80019de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80d5 	beq.w	8001b98 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b0c      	cmp	r3, #12
 80019f2:	f000 808e 	beq.w	8001b12 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d15b      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	4b69      	ldr	r3, [pc, #420]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a68      	ldr	r2, [pc, #416]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001a04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f9a9 	bl	8000d60 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f9a5 	bl	8000d60 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0ba      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	4b5f      	ldr	r3, [pc, #380]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a30:	4b5c      	ldr	r3, [pc, #368]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	4b5c      	ldr	r3, [pc, #368]	; (8001ba8 <HAL_RCC_OscConfig+0x75c>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a40:	3a01      	subs	r2, #1
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	4311      	orrs	r1, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a4a:	0212      	lsls	r2, r2, #8
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a52:	0852      	lsrs	r2, r2, #1
 8001a54:	3a01      	subs	r2, #1
 8001a56:	0552      	lsls	r2, r2, #21
 8001a58:	4311      	orrs	r1, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a5e:	0852      	lsrs	r2, r2, #1
 8001a60:	3a01      	subs	r2, #1
 8001a62:	0652      	lsls	r2, r2, #25
 8001a64:	4311      	orrs	r1, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a6a:	0912      	lsrs	r2, r2, #4
 8001a6c:	0452      	lsls	r2, r2, #17
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	494c      	ldr	r1, [pc, #304]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a76:	4b4b      	ldr	r3, [pc, #300]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a4a      	ldr	r2, [pc, #296]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a80:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a82:	4b48      	ldr	r3, [pc, #288]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001a88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a8c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7ff f967 	bl	8000d60 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff f963 	bl	8000d60 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e078      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa8:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x64a>
 8001ab4:	e070      	b.n	8001b98 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a3a      	ldr	r2, [pc, #232]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ac0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ac2:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d105      	bne.n	8001ada <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ace:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001ad4:	f023 0303 	bic.w	r3, r3, #3
 8001ad8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ada:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	4a31      	ldr	r2, [pc, #196]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001ae0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff f939 	bl	8000d60 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af2:	f7ff f935 	bl	8000d60 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e04a      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x6a6>
 8001b10:	e042      	b.n	8001b98 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e03d      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <HAL_RCC_OscConfig+0x758>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0203 	and.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d130      	bne.n	8001b94 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d127      	bne.n	8001b94 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d11f      	bne.n	8001b94 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b5e:	2a07      	cmp	r2, #7
 8001b60:	bf14      	ite	ne
 8001b62:	2201      	movne	r2, #1
 8001b64:	2200      	moveq	r2, #0
 8001b66:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d113      	bne.n	8001b94 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	085b      	lsrs	r3, r3, #1
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d109      	bne.n	8001b94 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	085b      	lsrs	r3, r3, #1
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	f99d808c 	.word	0xf99d808c

08001bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0c8      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <HAL_RCC_ClockConfig+0x1b0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d910      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <HAL_RCC_ClockConfig+0x1b0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 0207 	bic.w	r2, r3, #7
 8001bd6:	4961      	ldr	r1, [pc, #388]	; (8001d5c <HAL_RCC_ClockConfig+0x1b0>)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b5f      	ldr	r3, [pc, #380]	; (8001d5c <HAL_RCC_ClockConfig+0x1b0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0b0      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d04c      	beq.n	8001c96 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c04:	4b56      	ldr	r3, [pc, #344]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d121      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e09e      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1c:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d115      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e092      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c34:	4b4a      	ldr	r3, [pc, #296]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e086      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c44:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e07e      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c54:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 0203 	bic.w	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	493f      	ldr	r1, [pc, #252]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c66:	f7ff f87b 	bl	8000d60 <HAL_GetTick>
 8001c6a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6e:	f7ff f877 	bl	8000d60 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e066      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c84:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 020c 	and.w	r2, r3, #12
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d1eb      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d008      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <HAL_RCC_ClockConfig+0x1b0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d210      	bcs.n	8001ce4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <HAL_RCC_ClockConfig+0x1b0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	4924      	ldr	r1, [pc, #144]	; (8001d5c <HAL_RCC_ClockConfig+0x1b0>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <HAL_RCC_ClockConfig+0x1b0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e036      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4918      	ldr	r1, [pc, #96]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4910      	ldr	r1, [pc, #64]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d22:	f000 f825 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d26:	4601      	mov	r1, r0
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HAL_RCC_ClockConfig+0x1b4>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	5cd3      	ldrb	r3, [r2, r3]
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f005 fa10 	bl	800716c <HAL_InitTick>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d50:	7afb      	ldrb	r3, [r7, #11]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08007418 	.word	0x08007418
 8001d68:	20000010 	.word	0x20000010
 8001d6c:	20000000 	.word	0x20000000

08001d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d88:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x34>
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d121      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d11e      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001da4:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001db0:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e005      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dc0:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dcc:	4a2a      	ldr	r2, [pc, #168]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10d      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d102      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001de8:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	e004      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001df4:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001df6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d133      	bne.n	8001e66 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d002      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0xa4>
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d003      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0xaa>
 8001e12:	e005      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e16:	617b      	str	r3, [r7, #20]
      break;
 8001e18:	e005      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e1c:	617b      	str	r3, [r7, #20]
      break;
 8001e1e:	e002      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	617b      	str	r3, [r7, #20]
      break;
 8001e24:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	091b      	lsrs	r3, r3, #4
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	3301      	adds	r3, #1
 8001e32:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	fb02 f203 	mul.w	r2, r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0e5b      	lsrs	r3, r3, #25
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	3301      	adds	r3, #1
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e66:	69bb      	ldr	r3, [r7, #24]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3724      	adds	r7, #36	; 0x24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08007430 	.word	0x08007430
 8001e7c:	00f42400 	.word	0x00f42400
 8001e80:	007a1200 	.word	0x007a1200

08001e84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000010 	.word	0x20000010

08001e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ea0:	f7ff fff0 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08007428 	.word	0x08007428

08001ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ecc:	f7ff ffda 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4601      	mov	r1, r0
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0adb      	lsrs	r3, r3, #11
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ede:	5cd3      	ldrb	r3, [r2, r3]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08007428 	.word	0x08007428

08001ef4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	220f      	movs	r2, #15
 8001f02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_RCC_GetClockConfig+0x5c>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0203 	and.w	r2, r3, #3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <HAL_RCC_GetClockConfig+0x5c>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_RCC_GetClockConfig+0x5c>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_GetClockConfig+0x5c>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <HAL_RCC_GetClockConfig+0x60>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0207 	and.w	r2, r3, #7
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	601a      	str	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40022000 	.word	0x40022000

08001f58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f64:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f70:	f7ff fa08 	bl	8001384 <HAL_PWREx_GetVoltageRange>
 8001f74:	6178      	str	r0, [r7, #20]
 8001f76:	e014      	b.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	4a24      	ldr	r2, [pc, #144]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f82:	6593      	str	r3, [r2, #88]	; 0x58
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f90:	f7ff f9f8 	bl	8001384 <HAL_PWREx_GetVoltageRange>
 8001f94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa8:	d10b      	bne.n	8001fc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	d919      	bls.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2ba0      	cmp	r3, #160	; 0xa0
 8001fb4:	d902      	bls.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	e013      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	e010      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b80      	cmp	r3, #128	; 0x80
 8001fc6:	d902      	bls.n	8001fce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fc8:	2303      	movs	r3, #3
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e00a      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b80      	cmp	r3, #128	; 0x80
 8001fd2:	d102      	bne.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e004      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b70      	cmp	r3, #112	; 0x70
 8001fde:	d101      	bne.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 0207 	bic.w	r2, r3, #7
 8001fec:	4909      	ldr	r1, [pc, #36]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d001      	beq.n	8002006 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	40022000 	.word	0x40022000

08002018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002020:	2300      	movs	r3, #0
 8002022:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002024:	2300      	movs	r3, #0
 8002026:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002030:	2b00      	cmp	r3, #0
 8002032:	d03f      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800203c:	d01c      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800203e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002042:	d802      	bhi.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002048:	e01f      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800204a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800204e:	d003      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002050:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002054:	d01c      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002056:	e018      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002058:	4b85      	ldr	r3, [pc, #532]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a84      	ldr	r2, [pc, #528]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002064:	e015      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3304      	adds	r3, #4
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f000 fab9 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 8002072:	4603      	mov	r3, r0
 8002074:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002076:	e00c      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3320      	adds	r3, #32
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fba0 	bl	80027c4 <RCCEx_PLLSAI2_Config>
 8002084:	4603      	mov	r3, r0
 8002086:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002088:	e003      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	74fb      	strb	r3, [r7, #19]
      break;
 800208e:	e000      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002092:	7cfb      	ldrb	r3, [r7, #19]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10b      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002098:	4b75      	ldr	r3, [pc, #468]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020a6:	4972      	ldr	r1, [pc, #456]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ae:	e001      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d03f      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c8:	d01c      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80020ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ce:	d802      	bhi.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00e      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80020d4:	e01f      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80020d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020da:	d003      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80020dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020e0:	d01c      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80020e2:	e018      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020e4:	4b62      	ldr	r3, [pc, #392]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a61      	ldr	r2, [pc, #388]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020f0:	e015      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 fa73 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 80020fe:	4603      	mov	r3, r0
 8002100:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002102:	e00c      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3320      	adds	r3, #32
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fb5a 	bl	80027c4 <RCCEx_PLLSAI2_Config>
 8002110:	4603      	mov	r3, r0
 8002112:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002114:	e003      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	74fb      	strb	r3, [r7, #19]
      break;
 800211a:	e000      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800211c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800211e:	7cfb      	ldrb	r3, [r7, #19]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10b      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002124:	4b52      	ldr	r3, [pc, #328]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002132:	494f      	ldr	r1, [pc, #316]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800213a:	e001      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80a0 	beq.w	800228e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002162:	2300      	movs	r3, #0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00d      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	4a40      	ldr	r2, [pc, #256]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002172:	6593      	str	r3, [r2, #88]	; 0x58
 8002174:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002180:	2301      	movs	r3, #1
 8002182:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002184:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002190:	f7fe fde6 	bl	8000d60 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002196:	e009      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7fe fde2 	bl	8000d60 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d902      	bls.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	74fb      	strb	r3, [r7, #19]
        break;
 80021aa:	e005      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ef      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d15c      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021be:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01f      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d019      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	4a20      	ldr	r2, [pc, #128]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	4a1c      	ldr	r2, [pc, #112]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7fe fda1 	bl	8000d60 <HAL_GetTick>
 800221e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002220:	e00b      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe fd9d 	bl	8000d60 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d902      	bls.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	74fb      	strb	r3, [r7, #19]
            break;
 8002238:	e006      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0ec      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10c      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800225e:	4904      	ldr	r1, [pc, #16]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002266:	e009      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	74bb      	strb	r3, [r7, #18]
 800226c:	e006      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227c:	7c7b      	ldrb	r3, [r7, #17]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4b9e      	ldr	r3, [pc, #632]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	4a9d      	ldr	r2, [pc, #628]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800229a:	4b98      	ldr	r3, [pc, #608]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a0:	f023 0203 	bic.w	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	4994      	ldr	r1, [pc, #592]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022bc:	4b8f      	ldr	r3, [pc, #572]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	f023 020c 	bic.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	498c      	ldr	r1, [pc, #560]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022de:	4b87      	ldr	r3, [pc, #540]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	4983      	ldr	r1, [pc, #524]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002300:	4b7e      	ldr	r3, [pc, #504]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	497b      	ldr	r1, [pc, #492]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002330:	4972      	ldr	r1, [pc, #456]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002344:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	496a      	ldr	r1, [pc, #424]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002366:	4b65      	ldr	r3, [pc, #404]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	4961      	ldr	r1, [pc, #388]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002388:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002396:	4959      	ldr	r1, [pc, #356]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023aa:	4b54      	ldr	r3, [pc, #336]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b8:	4950      	ldr	r1, [pc, #320]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023cc:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	4948      	ldr	r1, [pc, #288]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ee:	4b43      	ldr	r3, [pc, #268]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	493f      	ldr	r1, [pc, #252]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d028      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800241e:	4937      	ldr	r1, [pc, #220]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800242e:	d106      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002430:	4b32      	ldr	r3, [pc, #200]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a31      	ldr	r2, [pc, #196]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800243a:	60d3      	str	r3, [r2, #12]
 800243c:	e011      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002442:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002446:	d10c      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3304      	adds	r3, #4
 800244c:	2101      	movs	r1, #1
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f8c8 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d028      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	491f      	ldr	r1, [pc, #124]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800248c:	d106      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	4a1a      	ldr	r2, [pc, #104]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002498:	60d3      	str	r3, [r2, #12]
 800249a:	e011      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2101      	movs	r1, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f899 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 80024b2:	4603      	mov	r3, r0
 80024b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d02b      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024da:	4908      	ldr	r1, [pc, #32]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ea:	d109      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a02      	ldr	r2, [pc, #8]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f6:	60d3      	str	r3, [r2, #12]
 80024f8:	e014      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002508:	d10c      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	2101      	movs	r1, #1
 8002510:	4618      	mov	r0, r3
 8002512:	f000 f867 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02f      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800253e:	4928      	ldr	r1, [pc, #160]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800254a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800254e:	d10d      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	2102      	movs	r1, #2
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f844 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d014      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	74bb      	strb	r3, [r7, #18]
 800256a:	e011      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002574:	d10c      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3320      	adds	r3, #32
 800257a:	2102      	movs	r1, #2
 800257c:	4618      	mov	r0, r3
 800257e:	f000 f921 	bl	80027c4 <RCCEx_PLLSAI2_Config>
 8002582:	4603      	mov	r3, r0
 8002584:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800258c:	7cfb      	ldrb	r3, [r7, #19]
 800258e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025aa:	490d      	ldr	r1, [pc, #52]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ce:	4904      	ldr	r1, [pc, #16]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000

080025e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025f2:	4b73      	ldr	r3, [pc, #460]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d018      	beq.n	8002630 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025fe:	4b70      	ldr	r3, [pc, #448]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0203 	and.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d10d      	bne.n	800262a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
       ||
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002616:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
       ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d044      	beq.n	80026b4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e041      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d00c      	beq.n	8002652 <RCCEx_PLLSAI1_Config+0x6e>
 8002638:	2b03      	cmp	r3, #3
 800263a:	d013      	beq.n	8002664 <RCCEx_PLLSAI1_Config+0x80>
 800263c:	2b01      	cmp	r3, #1
 800263e:	d120      	bne.n	8002682 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002640:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d11d      	bne.n	8002688 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002650:	e01a      	b.n	8002688 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002652:	4b5b      	ldr	r3, [pc, #364]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265a:	2b00      	cmp	r3, #0
 800265c:	d116      	bne.n	800268c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002662:	e013      	b.n	800268c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002664:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10f      	bne.n	8002690 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002670:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d109      	bne.n	8002690 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002680:	e006      	b.n	8002690 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
      break;
 8002686:	e004      	b.n	8002692 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002688:	bf00      	nop
 800268a:	e002      	b.n	8002692 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800268c:	bf00      	nop
 800268e:	e000      	b.n	8002692 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002690:	bf00      	nop
    }

    if(status == HAL_OK)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10d      	bne.n	80026b4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002698:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6819      	ldr	r1, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	430b      	orrs	r3, r1
 80026ae:	4944      	ldr	r1, [pc, #272]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d17d      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026ba:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a40      	ldr	r2, [pc, #256]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c6:	f7fe fb4b 	bl	8000d60 <HAL_GetTick>
 80026ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026cc:	e009      	b.n	80026e2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ce:	f7fe fb47 	bl	8000d60 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d902      	bls.n	80026e2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	73fb      	strb	r3, [r7, #15]
        break;
 80026e0:	e005      	b.n	80026ee <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026e2:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1ef      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d160      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d111      	bne.n	800271e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6892      	ldr	r2, [r2, #8]
 800270a:	0211      	lsls	r1, r2, #8
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68d2      	ldr	r2, [r2, #12]
 8002710:	0912      	lsrs	r2, r2, #4
 8002712:	0452      	lsls	r2, r2, #17
 8002714:	430a      	orrs	r2, r1
 8002716:	492a      	ldr	r1, [pc, #168]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002718:	4313      	orrs	r3, r2
 800271a:	610b      	str	r3, [r1, #16]
 800271c:	e027      	b.n	800276e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d112      	bne.n	800274a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002724:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800272c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6892      	ldr	r2, [r2, #8]
 8002734:	0211      	lsls	r1, r2, #8
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6912      	ldr	r2, [r2, #16]
 800273a:	0852      	lsrs	r2, r2, #1
 800273c:	3a01      	subs	r2, #1
 800273e:	0552      	lsls	r2, r2, #21
 8002740:	430a      	orrs	r2, r1
 8002742:	491f      	ldr	r1, [pc, #124]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002744:	4313      	orrs	r3, r2
 8002746:	610b      	str	r3, [r1, #16]
 8002748:	e011      	b.n	800276e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002752:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6892      	ldr	r2, [r2, #8]
 800275a:	0211      	lsls	r1, r2, #8
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6952      	ldr	r2, [r2, #20]
 8002760:	0852      	lsrs	r2, r2, #1
 8002762:	3a01      	subs	r2, #1
 8002764:	0652      	lsls	r2, r2, #25
 8002766:	430a      	orrs	r2, r1
 8002768:	4915      	ldr	r1, [pc, #84]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800276a:	4313      	orrs	r3, r2
 800276c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002774:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002778:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7fe faf1 	bl	8000d60 <HAL_GetTick>
 800277e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002780:	e009      	b.n	8002796 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002782:	f7fe faed 	bl	8000d60 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d902      	bls.n	8002796 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	73fb      	strb	r3, [r7, #15]
          break;
 8002794:	e005      	b.n	80027a2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0ef      	beq.n	8002782 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d106      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	4903      	ldr	r1, [pc, #12]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000

080027c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027d2:	4b68      	ldr	r3, [pc, #416]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d018      	beq.n	8002810 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027de:	4b65      	ldr	r3, [pc, #404]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0203 	and.w	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d10d      	bne.n	800280a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
       ||
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027f6:	4b5f      	ldr	r3, [pc, #380]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
       ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d044      	beq.n	8002894 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e041      	b.n	8002894 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d00c      	beq.n	8002832 <RCCEx_PLLSAI2_Config+0x6e>
 8002818:	2b03      	cmp	r3, #3
 800281a:	d013      	beq.n	8002844 <RCCEx_PLLSAI2_Config+0x80>
 800281c:	2b01      	cmp	r3, #1
 800281e:	d120      	bne.n	8002862 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002820:	4b54      	ldr	r3, [pc, #336]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d11d      	bne.n	8002868 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002830:	e01a      	b.n	8002868 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002832:	4b50      	ldr	r3, [pc, #320]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002842:	e013      	b.n	800286c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002844:	4b4b      	ldr	r3, [pc, #300]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10f      	bne.n	8002870 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002850:	4b48      	ldr	r3, [pc, #288]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002860:	e006      	b.n	8002870 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
      break;
 8002866:	e004      	b.n	8002872 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002868:	bf00      	nop
 800286a:	e002      	b.n	8002872 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800286c:	bf00      	nop
 800286e:	e000      	b.n	8002872 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002870:	bf00      	nop
    }

    if(status == HAL_OK)
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002878:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	3b01      	subs	r3, #1
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	430b      	orrs	r3, r1
 800288e:	4939      	ldr	r1, [pc, #228]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d167      	bne.n	800296a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a35      	ldr	r2, [pc, #212]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a6:	f7fe fa5b 	bl	8000d60 <HAL_GetTick>
 80028aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028ac:	e009      	b.n	80028c2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028ae:	f7fe fa57 	bl	8000d60 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d902      	bls.n	80028c2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	73fb      	strb	r3, [r7, #15]
        break;
 80028c0:	e005      	b.n	80028ce <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028c2:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ef      	bne.n	80028ae <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d14a      	bne.n	800296a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d111      	bne.n	80028fe <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6892      	ldr	r2, [r2, #8]
 80028ea:	0211      	lsls	r1, r2, #8
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68d2      	ldr	r2, [r2, #12]
 80028f0:	0912      	lsrs	r2, r2, #4
 80028f2:	0452      	lsls	r2, r2, #17
 80028f4:	430a      	orrs	r2, r1
 80028f6:	491f      	ldr	r1, [pc, #124]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	614b      	str	r3, [r1, #20]
 80028fc:	e011      	b.n	8002922 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002906:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6892      	ldr	r2, [r2, #8]
 800290e:	0211      	lsls	r1, r2, #8
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6912      	ldr	r2, [r2, #16]
 8002914:	0852      	lsrs	r2, r2, #1
 8002916:	3a01      	subs	r2, #1
 8002918:	0652      	lsls	r2, r2, #25
 800291a:	430a      	orrs	r2, r1
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 800291e:	4313      	orrs	r3, r2
 8002920:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002922:	4b14      	ldr	r3, [pc, #80]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a13      	ldr	r2, [pc, #76]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe fa17 	bl	8000d60 <HAL_GetTick>
 8002932:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002934:	e009      	b.n	800294a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002936:	f7fe fa13 	bl	8000d60 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d902      	bls.n	800294a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	73fb      	strb	r3, [r7, #15]
          break;
 8002948:	e005      	b.n	8002956 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ef      	beq.n	8002936 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d106      	bne.n	800296a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	4903      	ldr	r1, [pc, #12]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002966:	4313      	orrs	r3, r2
 8002968:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800296a:	7bfb      	ldrb	r3, [r7, #15]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000

08002978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e01d      	b.n	80029c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f815 	bl	80029ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3304      	adds	r3, #4
 80029b4:	4619      	mov	r1, r3
 80029b6:	4610      	mov	r0, r2
 80029b8:	f000 fc92 	bl	80032e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_TIM_Base_Start_IT+0x50>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d00b      	beq.n	8002a26 <HAL_TIM_Base_Start_IT+0x42>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a14:	d007      	beq.n	8002a26 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	00010007 	.word	0x00010007

08002a38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e01d      	b.n	8002a86 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fd ff92 	bl	8000988 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3304      	adds	r3, #4
 8002a74:	4619      	mov	r1, r3
 8002a76:	4610      	mov	r0, r2
 8002a78:	f000 fc32 	bl	80032e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	6839      	ldr	r1, [r7, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 ff8c 	bl	80039c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_TIM_PWM_Start+0x98>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_TIM_PWM_Start+0x4a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <HAL_TIM_PWM_Start+0x9c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00e      	beq.n	8002ada <HAL_TIM_PWM_Start+0x4a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1b      	ldr	r2, [pc, #108]	; (8002b30 <HAL_TIM_PWM_Start+0xa0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d009      	beq.n	8002ada <HAL_TIM_PWM_Start+0x4a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1a      	ldr	r2, [pc, #104]	; (8002b34 <HAL_TIM_PWM_Start+0xa4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d004      	beq.n	8002ada <HAL_TIM_PWM_Start+0x4a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_TIM_PWM_Start+0xa8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d101      	bne.n	8002ade <HAL_TIM_PWM_Start+0x4e>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <HAL_TIM_PWM_Start+0x50>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002af2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <HAL_TIM_PWM_Start+0xac>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d00b      	beq.n	8002b1e <HAL_TIM_PWM_Start+0x8e>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0c:	d007      	beq.n	8002b1e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40013400 	.word	0x40013400
 8002b30:	40014000 	.word	0x40014000
 8002b34:	40014400 	.word	0x40014400
 8002b38:	40014800 	.word	0x40014800
 8002b3c:	00010007 	.word	0x00010007

08002b40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	6839      	ldr	r1, [r7, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 ff34 	bl	80039c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a2a      	ldr	r2, [pc, #168]	; (8002c08 <HAL_TIM_PWM_Stop+0xc8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_TIM_PWM_Stop+0x4a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <HAL_TIM_PWM_Stop+0xcc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00e      	beq.n	8002b8a <HAL_TIM_PWM_Stop+0x4a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <HAL_TIM_PWM_Stop+0xd0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d009      	beq.n	8002b8a <HAL_TIM_PWM_Stop+0x4a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a26      	ldr	r2, [pc, #152]	; (8002c14 <HAL_TIM_PWM_Stop+0xd4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d004      	beq.n	8002b8a <HAL_TIM_PWM_Stop+0x4a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a24      	ldr	r2, [pc, #144]	; (8002c18 <HAL_TIM_PWM_Stop+0xd8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d101      	bne.n	8002b8e <HAL_TIM_PWM_Stop+0x4e>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_TIM_PWM_Stop+0x50>
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d017      	beq.n	8002bc4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6a1a      	ldr	r2, [r3, #32]
 8002b9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10f      	bne.n	8002bc4 <HAL_TIM_PWM_Stop+0x84>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a1a      	ldr	r2, [r3, #32]
 8002baa:	f240 4344 	movw	r3, #1092	; 0x444
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_PWM_Stop+0x84>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6a1a      	ldr	r2, [r3, #32]
 8002bca:	f241 1311 	movw	r3, #4369	; 0x1111
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_TIM_PWM_Stop+0xb4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6a1a      	ldr	r2, [r3, #32]
 8002bda:	f240 4344 	movw	r3, #1092	; 0x444
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d107      	bne.n	8002bf4 <HAL_TIM_PWM_Stop+0xb4>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40012c00 	.word	0x40012c00
 8002c0c:	40013400 	.word	0x40013400
 8002c10:	40014000 	.word	0x40014000
 8002c14:	40014400 	.word	0x40014400
 8002c18:	40014800 	.word	0x40014800

08002c1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e083      	b.n	8002d38 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7fd ffd7 	bl	8000bf8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002c60:	f023 0307 	bic.w	r3, r3, #7
 8002c64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4610      	mov	r0, r2
 8002c72:	f000 fb35 	bl	80032e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9e:	f023 0303 	bic.w	r3, r3, #3
 8002ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002cbc:	f023 030c 	bic.w	r3, r3, #12
 8002cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ccc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	011a      	lsls	r2, r3, #4
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	031b      	lsls	r3, r3, #12
 8002cec:	4313      	orrs	r3, r2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002cfa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002d02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_TIM_Encoder_Start+0x16>
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d008      	beq.n	8002d66 <HAL_TIM_Encoder_Start+0x26>
 8002d54:	e00f      	b.n	8002d76 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fe2e 	bl	80039c0 <TIM_CCxChannelCmd>
      break;
 8002d64:	e016      	b.n	8002d94 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	2104      	movs	r1, #4
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fe26 	bl	80039c0 <TIM_CCxChannelCmd>
      break;
 8002d74:	e00e      	b.n	8002d94 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fe1e 	bl	80039c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fe17 	bl	80039c0 <TIM_CCxChannelCmd>
      break;
 8002d92:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d122      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d11b      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 0202 	mvn.w	r2, #2
 8002dda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7fd fb6d 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8002df6:	e005      	b.n	8002e04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fa53 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa5a 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d122      	bne.n	8002e5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d11b      	bne.n	8002e5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0204 	mvn.w	r2, #4
 8002e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fd fb43 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8002e4a:	e005      	b.n	8002e58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fa29 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa30 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d122      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d11b      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f06f 0208 	mvn.w	r2, #8
 8002e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2204      	movs	r2, #4
 8002e88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7fd fb19 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8002e9e:	e005      	b.n	8002eac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f9ff 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa06 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d122      	bne.n	8002f06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	d11b      	bne.n	8002f06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f06f 0210 	mvn.w	r2, #16
 8002ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2208      	movs	r2, #8
 8002edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7fd faef 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8002ef2:	e005      	b.n	8002f00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f9d5 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f9dc 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10e      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f06f 0201 	mvn.w	r2, #1
 8002f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f004 f893 	bl	8007058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3c:	2b80      	cmp	r3, #128	; 0x80
 8002f3e:	d10e      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	2b80      	cmp	r3, #128	; 0x80
 8002f4c:	d107      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fdbd 	bl	8003ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6c:	d10e      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	2b80      	cmp	r3, #128	; 0x80
 8002f7a:	d107      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fdb0 	bl	8003aec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	d10e      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b40      	cmp	r3, #64	; 0x40
 8002fa6:	d107      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f98a 	bl	80032cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0220 	mvn.w	r2, #32
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fd70 	bl	8003ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003002:	2302      	movs	r3, #2
 8003004:	e105      	b.n	8003212 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2202      	movs	r2, #2
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b14      	cmp	r3, #20
 800301a:	f200 80f0 	bhi.w	80031fe <HAL_TIM_PWM_ConfigChannel+0x212>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	08003079 	.word	0x08003079
 8003028:	080031ff 	.word	0x080031ff
 800302c:	080031ff 	.word	0x080031ff
 8003030:	080031ff 	.word	0x080031ff
 8003034:	080030b9 	.word	0x080030b9
 8003038:	080031ff 	.word	0x080031ff
 800303c:	080031ff 	.word	0x080031ff
 8003040:	080031ff 	.word	0x080031ff
 8003044:	080030fb 	.word	0x080030fb
 8003048:	080031ff 	.word	0x080031ff
 800304c:	080031ff 	.word	0x080031ff
 8003050:	080031ff 	.word	0x080031ff
 8003054:	0800313b 	.word	0x0800313b
 8003058:	080031ff 	.word	0x080031ff
 800305c:	080031ff 	.word	0x080031ff
 8003060:	080031ff 	.word	0x080031ff
 8003064:	0800317d 	.word	0x0800317d
 8003068:	080031ff 	.word	0x080031ff
 800306c:	080031ff 	.word	0x080031ff
 8003070:	080031ff 	.word	0x080031ff
 8003074:	080031bd 	.word	0x080031bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	4618      	mov	r0, r3
 8003080:	f000 f9c8 	bl	8003414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0208 	orr.w	r2, r2, #8
 8003092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0204 	bic.w	r2, r2, #4
 80030a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6999      	ldr	r1, [r3, #24]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	619a      	str	r2, [r3, #24]
      break;
 80030b6:	e0a3      	b.n	8003200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fa38 	bl	8003534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6999      	ldr	r1, [r3, #24]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	021a      	lsls	r2, r3, #8
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	619a      	str	r2, [r3, #24]
      break;
 80030f8:	e082      	b.n	8003200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	4618      	mov	r0, r3
 8003102:	f000 faa1 	bl	8003648 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0208 	orr.w	r2, r2, #8
 8003114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0204 	bic.w	r2, r2, #4
 8003124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69d9      	ldr	r1, [r3, #28]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	61da      	str	r2, [r3, #28]
      break;
 8003138:	e062      	b.n	8003200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fb09 	bl	8003758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69da      	ldr	r2, [r3, #28]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69d9      	ldr	r1, [r3, #28]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	021a      	lsls	r2, r3, #8
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	61da      	str	r2, [r3, #28]
      break;
 800317a:	e041      	b.n	8003200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fb52 	bl	800382c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0208 	orr.w	r2, r2, #8
 8003196:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0204 	bic.w	r2, r2, #4
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031ba:	e021      	b.n	8003200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fb96 	bl	80038f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	021a      	lsls	r2, r3, #8
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031fc:	e000      	b.n	8003200 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80031fe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop

0800321c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b0c      	cmp	r3, #12
 800322e:	d831      	bhi.n	8003294 <HAL_TIM_ReadCapturedValue+0x78>
 8003230:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	0800326d 	.word	0x0800326d
 800323c:	08003295 	.word	0x08003295
 8003240:	08003295 	.word	0x08003295
 8003244:	08003295 	.word	0x08003295
 8003248:	08003277 	.word	0x08003277
 800324c:	08003295 	.word	0x08003295
 8003250:	08003295 	.word	0x08003295
 8003254:	08003295 	.word	0x08003295
 8003258:	08003281 	.word	0x08003281
 800325c:	08003295 	.word	0x08003295
 8003260:	08003295 	.word	0x08003295
 8003264:	08003295 	.word	0x08003295
 8003268:	0800328b 	.word	0x0800328b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	60fb      	str	r3, [r7, #12]

      break;
 8003274:	e00f      	b.n	8003296 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	60fb      	str	r3, [r7, #12]

      break;
 800327e:	e00a      	b.n	8003296 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	60fb      	str	r3, [r7, #12]

      break;
 8003288:	e005      	b.n	8003296 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	60fb      	str	r3, [r7, #12]

      break;
 8003292:	e000      	b.n	8003296 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003294:	bf00      	nop
  }

  return tmpreg;
 8003296:	68fb      	ldr	r3, [r7, #12]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a40      	ldr	r2, [pc, #256]	; (80033f4 <TIM_Base_SetConfig+0x114>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fe:	d00f      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a3d      	ldr	r2, [pc, #244]	; (80033f8 <TIM_Base_SetConfig+0x118>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00b      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a3c      	ldr	r2, [pc, #240]	; (80033fc <TIM_Base_SetConfig+0x11c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d007      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a3b      	ldr	r2, [pc, #236]	; (8003400 <TIM_Base_SetConfig+0x120>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a3a      	ldr	r2, [pc, #232]	; (8003404 <TIM_Base_SetConfig+0x124>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d108      	bne.n	8003332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a2f      	ldr	r2, [pc, #188]	; (80033f4 <TIM_Base_SetConfig+0x114>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01f      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003340:	d01b      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <TIM_Base_SetConfig+0x118>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d017      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a2b      	ldr	r2, [pc, #172]	; (80033fc <TIM_Base_SetConfig+0x11c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <TIM_Base_SetConfig+0x120>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00f      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a29      	ldr	r2, [pc, #164]	; (8003404 <TIM_Base_SetConfig+0x124>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00b      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a28      	ldr	r2, [pc, #160]	; (8003408 <TIM_Base_SetConfig+0x128>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d007      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a27      	ldr	r2, [pc, #156]	; (800340c <TIM_Base_SetConfig+0x12c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d003      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a26      	ldr	r2, [pc, #152]	; (8003410 <TIM_Base_SetConfig+0x130>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d108      	bne.n	800338c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <TIM_Base_SetConfig+0x114>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00f      	beq.n	80033d8 <TIM_Base_SetConfig+0xf8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a12      	ldr	r2, [pc, #72]	; (8003404 <TIM_Base_SetConfig+0x124>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00b      	beq.n	80033d8 <TIM_Base_SetConfig+0xf8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a11      	ldr	r2, [pc, #68]	; (8003408 <TIM_Base_SetConfig+0x128>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <TIM_Base_SetConfig+0xf8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a10      	ldr	r2, [pc, #64]	; (800340c <TIM_Base_SetConfig+0x12c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_Base_SetConfig+0xf8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <TIM_Base_SetConfig+0x130>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d103      	bne.n	80033e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	615a      	str	r2, [r3, #20]
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40000800 	.word	0x40000800
 8003400:	40000c00 	.word	0x40000c00
 8003404:	40013400 	.word	0x40013400
 8003408:	40014000 	.word	0x40014000
 800340c:	40014400 	.word	0x40014400
 8003410:	40014800 	.word	0x40014800

08003414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	f023 0201 	bic.w	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f023 0302 	bic.w	r3, r3, #2
 8003460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <TIM_OC1_SetConfig+0x10c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00f      	beq.n	8003494 <TIM_OC1_SetConfig+0x80>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <TIM_OC1_SetConfig+0x110>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00b      	beq.n	8003494 <TIM_OC1_SetConfig+0x80>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a2a      	ldr	r2, [pc, #168]	; (8003528 <TIM_OC1_SetConfig+0x114>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <TIM_OC1_SetConfig+0x80>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a29      	ldr	r2, [pc, #164]	; (800352c <TIM_OC1_SetConfig+0x118>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_OC1_SetConfig+0x80>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a28      	ldr	r2, [pc, #160]	; (8003530 <TIM_OC1_SetConfig+0x11c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10c      	bne.n	80034ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f023 0308 	bic.w	r3, r3, #8
 800349a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f023 0304 	bic.w	r3, r3, #4
 80034ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a1b      	ldr	r2, [pc, #108]	; (8003520 <TIM_OC1_SetConfig+0x10c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00f      	beq.n	80034d6 <TIM_OC1_SetConfig+0xc2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a1a      	ldr	r2, [pc, #104]	; (8003524 <TIM_OC1_SetConfig+0x110>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00b      	beq.n	80034d6 <TIM_OC1_SetConfig+0xc2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a19      	ldr	r2, [pc, #100]	; (8003528 <TIM_OC1_SetConfig+0x114>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d007      	beq.n	80034d6 <TIM_OC1_SetConfig+0xc2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a18      	ldr	r2, [pc, #96]	; (800352c <TIM_OC1_SetConfig+0x118>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d003      	beq.n	80034d6 <TIM_OC1_SetConfig+0xc2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <TIM_OC1_SetConfig+0x11c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d111      	bne.n	80034fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	621a      	str	r2, [r3, #32]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40012c00 	.word	0x40012c00
 8003524:	40013400 	.word	0x40013400
 8003528:	40014000 	.word	0x40014000
 800352c:	40014400 	.word	0x40014400
 8003530:	40014800 	.word	0x40014800

08003534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f023 0210 	bic.w	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f023 0320 	bic.w	r3, r3, #32
 8003582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a28      	ldr	r2, [pc, #160]	; (8003634 <TIM_OC2_SetConfig+0x100>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_OC2_SetConfig+0x6c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a27      	ldr	r2, [pc, #156]	; (8003638 <TIM_OC2_SetConfig+0x104>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d10d      	bne.n	80035bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <TIM_OC2_SetConfig+0x100>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00f      	beq.n	80035e4 <TIM_OC2_SetConfig+0xb0>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <TIM_OC2_SetConfig+0x104>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00b      	beq.n	80035e4 <TIM_OC2_SetConfig+0xb0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a1b      	ldr	r2, [pc, #108]	; (800363c <TIM_OC2_SetConfig+0x108>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d007      	beq.n	80035e4 <TIM_OC2_SetConfig+0xb0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a1a      	ldr	r2, [pc, #104]	; (8003640 <TIM_OC2_SetConfig+0x10c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d003      	beq.n	80035e4 <TIM_OC2_SetConfig+0xb0>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a19      	ldr	r2, [pc, #100]	; (8003644 <TIM_OC2_SetConfig+0x110>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d113      	bne.n	800360c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40012c00 	.word	0x40012c00
 8003638:	40013400 	.word	0x40013400
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800

08003648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a27      	ldr	r2, [pc, #156]	; (8003744 <TIM_OC3_SetConfig+0xfc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d003      	beq.n	80036b2 <TIM_OC3_SetConfig+0x6a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a26      	ldr	r2, [pc, #152]	; (8003748 <TIM_OC3_SetConfig+0x100>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10d      	bne.n	80036ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1c      	ldr	r2, [pc, #112]	; (8003744 <TIM_OC3_SetConfig+0xfc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00f      	beq.n	80036f6 <TIM_OC3_SetConfig+0xae>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <TIM_OC3_SetConfig+0x100>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <TIM_OC3_SetConfig+0xae>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a1a      	ldr	r2, [pc, #104]	; (800374c <TIM_OC3_SetConfig+0x104>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <TIM_OC3_SetConfig+0xae>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a19      	ldr	r2, [pc, #100]	; (8003750 <TIM_OC3_SetConfig+0x108>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d003      	beq.n	80036f6 <TIM_OC3_SetConfig+0xae>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a18      	ldr	r2, [pc, #96]	; (8003754 <TIM_OC3_SetConfig+0x10c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d113      	bne.n	800371e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	621a      	str	r2, [r3, #32]
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40013400 	.word	0x40013400
 800374c:	40014000 	.word	0x40014000
 8003750:	40014400 	.word	0x40014400
 8003754:	40014800 	.word	0x40014800

08003758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	031b      	lsls	r3, r3, #12
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a18      	ldr	r2, [pc, #96]	; (8003818 <TIM_OC4_SetConfig+0xc0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00f      	beq.n	80037dc <TIM_OC4_SetConfig+0x84>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a17      	ldr	r2, [pc, #92]	; (800381c <TIM_OC4_SetConfig+0xc4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00b      	beq.n	80037dc <TIM_OC4_SetConfig+0x84>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a16      	ldr	r2, [pc, #88]	; (8003820 <TIM_OC4_SetConfig+0xc8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d007      	beq.n	80037dc <TIM_OC4_SetConfig+0x84>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <TIM_OC4_SetConfig+0xcc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d003      	beq.n	80037dc <TIM_OC4_SetConfig+0x84>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a14      	ldr	r2, [pc, #80]	; (8003828 <TIM_OC4_SetConfig+0xd0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d109      	bne.n	80037f0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	019b      	lsls	r3, r3, #6
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40013400 	.word	0x40013400
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800

0800382c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003870:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	041b      	lsls	r3, r3, #16
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a17      	ldr	r2, [pc, #92]	; (80038e0 <TIM_OC5_SetConfig+0xb4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00f      	beq.n	80038a6 <TIM_OC5_SetConfig+0x7a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <TIM_OC5_SetConfig+0xb8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00b      	beq.n	80038a6 <TIM_OC5_SetConfig+0x7a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <TIM_OC5_SetConfig+0xbc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d007      	beq.n	80038a6 <TIM_OC5_SetConfig+0x7a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a14      	ldr	r2, [pc, #80]	; (80038ec <TIM_OC5_SetConfig+0xc0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d003      	beq.n	80038a6 <TIM_OC5_SetConfig+0x7a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <TIM_OC5_SetConfig+0xc4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d109      	bne.n	80038ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	621a      	str	r2, [r3, #32]
}
 80038d4:	bf00      	nop
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40012c00 	.word	0x40012c00
 80038e4:	40013400 	.word	0x40013400
 80038e8:	40014000 	.word	0x40014000
 80038ec:	40014400 	.word	0x40014400
 80038f0:	40014800 	.word	0x40014800

080038f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800393a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	051b      	lsls	r3, r3, #20
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a18      	ldr	r2, [pc, #96]	; (80039ac <TIM_OC6_SetConfig+0xb8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00f      	beq.n	8003970 <TIM_OC6_SetConfig+0x7c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <TIM_OC6_SetConfig+0xbc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00b      	beq.n	8003970 <TIM_OC6_SetConfig+0x7c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <TIM_OC6_SetConfig+0xc0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d007      	beq.n	8003970 <TIM_OC6_SetConfig+0x7c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <TIM_OC6_SetConfig+0xc4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_OC6_SetConfig+0x7c>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a14      	ldr	r2, [pc, #80]	; (80039bc <TIM_OC6_SetConfig+0xc8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d109      	bne.n	8003984 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003976:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	029b      	lsls	r3, r3, #10
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40013400 	.word	0x40013400
 80039b4:	40014000 	.word	0x40014000
 80039b8:	40014400 	.word	0x40014400
 80039bc:	40014800 	.word	0x40014800

080039c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	2201      	movs	r2, #1
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1a      	ldr	r2, [r3, #32]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	401a      	ands	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1a      	ldr	r2, [r3, #32]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	621a      	str	r2, [r3, #32]
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e045      	b.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1b      	ldr	r2, [pc, #108]	; (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d108      	bne.n	8003a6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a82:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40013400 	.word	0x40013400

08003ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e040      	b.n	8003b94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f003 fad6 	bl	80070d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	; 0x24
 8003b2c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0201 	bic.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fa64 	bl	800400c <UART_SetConfig>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e022      	b.n	8003b94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fda0 	bl	800469c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fe27 	bl	80047e0 <UART_CheckIdleState>
 8003b92:	4603      	mov	r3, r0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d144      	bne.n	8003c3c <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_UART_Transmit_IT+0x22>
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e03d      	b.n	8003c3e <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_UART_Transmit_IT+0x34>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e036      	b.n	8003c3e <HAL_UART_Transmit_IT+0xa2>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	88fa      	ldrh	r2, [r7, #6]
 8003be2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2221      	movs	r2, #33	; 0x21
 8003bfe:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c08:	d107      	bne.n	8003c1a <HAL_UART_Transmit_IT+0x7e>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a0d      	ldr	r2, [pc, #52]	; (8003c4c <HAL_UART_Transmit_IT+0xb0>)
 8003c16:	665a      	str	r2, [r3, #100]	; 0x64
 8003c18:	e002      	b.n	8003c20 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4a0c      	ldr	r2, [pc, #48]	; (8003c50 <HAL_UART_Transmit_IT+0xb4>)
 8003c1e:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c36:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	080049db 	.word	0x080049db
 8003c50:	08004967 	.word	0x08004967

08003c54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	f040 808a 	bne.w	8003d80 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_UART_Receive_IT+0x24>
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e082      	b.n	8003d82 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_UART_Receive_IT+0x36>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e07b      	b.n	8003d82 <HAL_UART_Receive_IT+0x12e>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	88fa      	ldrh	r2, [r7, #6]
 8003ca4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb6:	d10e      	bne.n	8003cd6 <HAL_UART_Receive_IT+0x82>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <HAL_UART_Receive_IT+0x78>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003cc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cca:	e02d      	b.n	8003d28 <HAL_UART_Receive_IT+0xd4>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	22ff      	movs	r2, #255	; 0xff
 8003cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cd4:	e028      	b.n	8003d28 <HAL_UART_Receive_IT+0xd4>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10d      	bne.n	8003cfa <HAL_UART_Receive_IT+0xa6>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <HAL_UART_Receive_IT+0x9c>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	22ff      	movs	r2, #255	; 0xff
 8003cea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cee:	e01b      	b.n	8003d28 <HAL_UART_Receive_IT+0xd4>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	227f      	movs	r2, #127	; 0x7f
 8003cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cf8:	e016      	b.n	8003d28 <HAL_UART_Receive_IT+0xd4>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d02:	d10d      	bne.n	8003d20 <HAL_UART_Receive_IT+0xcc>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <HAL_UART_Receive_IT+0xc2>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	227f      	movs	r2, #127	; 0x7f
 8003d10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d14:	e008      	b.n	8003d28 <HAL_UART_Receive_IT+0xd4>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	223f      	movs	r2, #63	; 0x3f
 8003d1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d1e:	e003      	b.n	8003d28 <HAL_UART_Receive_IT+0xd4>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2222      	movs	r2, #34	; 0x22
 8003d32:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d107      	bne.n	8003d5e <HAL_UART_Receive_IT+0x10a>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d103      	bne.n	8003d5e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <HAL_UART_Receive_IT+0x13c>)
 8003d5a:	661a      	str	r2, [r3, #96]	; 0x60
 8003d5c:	e002      	b.n	8003d64 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a0c      	ldr	r2, [pc, #48]	; (8003d94 <HAL_UART_Receive_IT+0x140>)
 8003d62:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003d7a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	08004b33 	.word	0x08004b33
 8003d94:	08004a89 	.word	0x08004a89

08003d98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d113      	bne.n	8003dee <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00e      	beq.n	8003dee <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80ff 	beq.w	8003fe2 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	4798      	blx	r3
      }
      return;
 8003dec:	e0f9      	b.n	8003fe2 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80c1 	beq.w	8003f78 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80b6 	beq.w	8003f78 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00e      	beq.n	8003e34 <HAL_UART_IRQHandler+0x9c>
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2201      	movs	r2, #1
 8003e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e2c:	f043 0201 	orr.w	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00e      	beq.n	8003e5c <HAL_UART_IRQHandler+0xc4>
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d009      	beq.n	8003e5c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e54:	f043 0204 	orr.w	r2, r3, #4
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00e      	beq.n	8003e84 <HAL_UART_IRQHandler+0xec>
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2204      	movs	r2, #4
 8003e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e7c:	f043 0202 	orr.w	r2, r3, #2
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d013      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d104      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eae:	f043 0208 	orr.w	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8093 	beq.w	8003fe6 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d004      	beq.n	8003f02 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d031      	beq.n	8003f66 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fcf9 	bl	80048fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d123      	bne.n	8003f5e <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f24:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d013      	beq.n	8003f56 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f32:	4a30      	ldr	r2, [pc, #192]	; (8003ff4 <HAL_UART_IRQHandler+0x25c>)
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd f820 	bl	8000f80 <HAL_DMA_Abort_IT>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d016      	beq.n	8003f74 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003f50:	4610      	mov	r0, r2
 8003f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	e00e      	b.n	8003f74 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f84e 	bl	8003ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	e00a      	b.n	8003f74 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f84a 	bl	8003ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	e006      	b.n	8003f74 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f846 	bl	8003ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003f72:	e038      	b.n	8003fe6 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	bf00      	nop
    return;
 8003f76:	e036      	b.n	8003fe6 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <HAL_UART_IRQHandler+0x206>
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fe20 	bl	8004bdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f9c:	e026      	b.n	8003fec <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d017      	beq.n	8003fea <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
    }
    return;
 8003fc2:	e012      	b.n	8003fea <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00e      	beq.n	8003fec <HAL_UART_IRQHandler+0x254>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fd3c 	bl	8004a56 <UART_EndTransmit_IT>
    return;
 8003fde:	bf00      	nop
 8003fe0:	e004      	b.n	8003fec <HAL_UART_IRQHandler+0x254>
      return;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <HAL_UART_IRQHandler+0x254>
    return;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <HAL_UART_IRQHandler+0x254>
    return;
 8003fea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	0800493b 	.word	0x0800493b

08003ff8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800400c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004010:	b088      	sub	sp, #32
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	4313      	orrs	r3, r2
 8004038:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4bac      	ldr	r3, [pc, #688]	; (80042f4 <UART_SetConfig+0x2e8>)
 8004042:	4013      	ands	r3, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	69f9      	ldr	r1, [r7, #28]
 800404a:	430b      	orrs	r3, r1
 800404c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4aa2      	ldr	r2, [pc, #648]	; (80042f8 <UART_SetConfig+0x2ec>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d004      	beq.n	800407e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	4313      	orrs	r3, r2
 800407c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	430a      	orrs	r2, r1
 8004090:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a99      	ldr	r2, [pc, #612]	; (80042fc <UART_SetConfig+0x2f0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d121      	bne.n	80040e0 <UART_SetConfig+0xd4>
 800409c:	4b98      	ldr	r3, [pc, #608]	; (8004300 <UART_SetConfig+0x2f4>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d816      	bhi.n	80040d8 <UART_SetConfig+0xcc>
 80040aa:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <UART_SetConfig+0xa4>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	080040cd 	.word	0x080040cd
 80040b8:	080040c7 	.word	0x080040c7
 80040bc:	080040d3 	.word	0x080040d3
 80040c0:	2301      	movs	r3, #1
 80040c2:	76fb      	strb	r3, [r7, #27]
 80040c4:	e0e8      	b.n	8004298 <UART_SetConfig+0x28c>
 80040c6:	2302      	movs	r3, #2
 80040c8:	76fb      	strb	r3, [r7, #27]
 80040ca:	e0e5      	b.n	8004298 <UART_SetConfig+0x28c>
 80040cc:	2304      	movs	r3, #4
 80040ce:	76fb      	strb	r3, [r7, #27]
 80040d0:	e0e2      	b.n	8004298 <UART_SetConfig+0x28c>
 80040d2:	2308      	movs	r3, #8
 80040d4:	76fb      	strb	r3, [r7, #27]
 80040d6:	e0df      	b.n	8004298 <UART_SetConfig+0x28c>
 80040d8:	2310      	movs	r3, #16
 80040da:	76fb      	strb	r3, [r7, #27]
 80040dc:	bf00      	nop
 80040de:	e0db      	b.n	8004298 <UART_SetConfig+0x28c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a87      	ldr	r2, [pc, #540]	; (8004304 <UART_SetConfig+0x2f8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d134      	bne.n	8004154 <UART_SetConfig+0x148>
 80040ea:	4b85      	ldr	r3, [pc, #532]	; (8004300 <UART_SetConfig+0x2f4>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f0:	f003 030c 	and.w	r3, r3, #12
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	d829      	bhi.n	800414c <UART_SetConfig+0x140>
 80040f8:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <UART_SetConfig+0xf4>)
 80040fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fe:	bf00      	nop
 8004100:	08004135 	.word	0x08004135
 8004104:	0800414d 	.word	0x0800414d
 8004108:	0800414d 	.word	0x0800414d
 800410c:	0800414d 	.word	0x0800414d
 8004110:	08004141 	.word	0x08004141
 8004114:	0800414d 	.word	0x0800414d
 8004118:	0800414d 	.word	0x0800414d
 800411c:	0800414d 	.word	0x0800414d
 8004120:	0800413b 	.word	0x0800413b
 8004124:	0800414d 	.word	0x0800414d
 8004128:	0800414d 	.word	0x0800414d
 800412c:	0800414d 	.word	0x0800414d
 8004130:	08004147 	.word	0x08004147
 8004134:	2300      	movs	r3, #0
 8004136:	76fb      	strb	r3, [r7, #27]
 8004138:	e0ae      	b.n	8004298 <UART_SetConfig+0x28c>
 800413a:	2302      	movs	r3, #2
 800413c:	76fb      	strb	r3, [r7, #27]
 800413e:	e0ab      	b.n	8004298 <UART_SetConfig+0x28c>
 8004140:	2304      	movs	r3, #4
 8004142:	76fb      	strb	r3, [r7, #27]
 8004144:	e0a8      	b.n	8004298 <UART_SetConfig+0x28c>
 8004146:	2308      	movs	r3, #8
 8004148:	76fb      	strb	r3, [r7, #27]
 800414a:	e0a5      	b.n	8004298 <UART_SetConfig+0x28c>
 800414c:	2310      	movs	r3, #16
 800414e:	76fb      	strb	r3, [r7, #27]
 8004150:	bf00      	nop
 8004152:	e0a1      	b.n	8004298 <UART_SetConfig+0x28c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a6b      	ldr	r2, [pc, #428]	; (8004308 <UART_SetConfig+0x2fc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d120      	bne.n	80041a0 <UART_SetConfig+0x194>
 800415e:	4b68      	ldr	r3, [pc, #416]	; (8004300 <UART_SetConfig+0x2f4>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004168:	2b10      	cmp	r3, #16
 800416a:	d00f      	beq.n	800418c <UART_SetConfig+0x180>
 800416c:	2b10      	cmp	r3, #16
 800416e:	d802      	bhi.n	8004176 <UART_SetConfig+0x16a>
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <UART_SetConfig+0x174>
 8004174:	e010      	b.n	8004198 <UART_SetConfig+0x18c>
 8004176:	2b20      	cmp	r3, #32
 8004178:	d005      	beq.n	8004186 <UART_SetConfig+0x17a>
 800417a:	2b30      	cmp	r3, #48	; 0x30
 800417c:	d009      	beq.n	8004192 <UART_SetConfig+0x186>
 800417e:	e00b      	b.n	8004198 <UART_SetConfig+0x18c>
 8004180:	2300      	movs	r3, #0
 8004182:	76fb      	strb	r3, [r7, #27]
 8004184:	e088      	b.n	8004298 <UART_SetConfig+0x28c>
 8004186:	2302      	movs	r3, #2
 8004188:	76fb      	strb	r3, [r7, #27]
 800418a:	e085      	b.n	8004298 <UART_SetConfig+0x28c>
 800418c:	2304      	movs	r3, #4
 800418e:	76fb      	strb	r3, [r7, #27]
 8004190:	e082      	b.n	8004298 <UART_SetConfig+0x28c>
 8004192:	2308      	movs	r3, #8
 8004194:	76fb      	strb	r3, [r7, #27]
 8004196:	e07f      	b.n	8004298 <UART_SetConfig+0x28c>
 8004198:	2310      	movs	r3, #16
 800419a:	76fb      	strb	r3, [r7, #27]
 800419c:	bf00      	nop
 800419e:	e07b      	b.n	8004298 <UART_SetConfig+0x28c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a59      	ldr	r2, [pc, #356]	; (800430c <UART_SetConfig+0x300>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d120      	bne.n	80041ec <UART_SetConfig+0x1e0>
 80041aa:	4b55      	ldr	r3, [pc, #340]	; (8004300 <UART_SetConfig+0x2f4>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d00f      	beq.n	80041d8 <UART_SetConfig+0x1cc>
 80041b8:	2b40      	cmp	r3, #64	; 0x40
 80041ba:	d802      	bhi.n	80041c2 <UART_SetConfig+0x1b6>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <UART_SetConfig+0x1c0>
 80041c0:	e010      	b.n	80041e4 <UART_SetConfig+0x1d8>
 80041c2:	2b80      	cmp	r3, #128	; 0x80
 80041c4:	d005      	beq.n	80041d2 <UART_SetConfig+0x1c6>
 80041c6:	2bc0      	cmp	r3, #192	; 0xc0
 80041c8:	d009      	beq.n	80041de <UART_SetConfig+0x1d2>
 80041ca:	e00b      	b.n	80041e4 <UART_SetConfig+0x1d8>
 80041cc:	2300      	movs	r3, #0
 80041ce:	76fb      	strb	r3, [r7, #27]
 80041d0:	e062      	b.n	8004298 <UART_SetConfig+0x28c>
 80041d2:	2302      	movs	r3, #2
 80041d4:	76fb      	strb	r3, [r7, #27]
 80041d6:	e05f      	b.n	8004298 <UART_SetConfig+0x28c>
 80041d8:	2304      	movs	r3, #4
 80041da:	76fb      	strb	r3, [r7, #27]
 80041dc:	e05c      	b.n	8004298 <UART_SetConfig+0x28c>
 80041de:	2308      	movs	r3, #8
 80041e0:	76fb      	strb	r3, [r7, #27]
 80041e2:	e059      	b.n	8004298 <UART_SetConfig+0x28c>
 80041e4:	2310      	movs	r3, #16
 80041e6:	76fb      	strb	r3, [r7, #27]
 80041e8:	bf00      	nop
 80041ea:	e055      	b.n	8004298 <UART_SetConfig+0x28c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a47      	ldr	r2, [pc, #284]	; (8004310 <UART_SetConfig+0x304>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d124      	bne.n	8004240 <UART_SetConfig+0x234>
 80041f6:	4b42      	ldr	r3, [pc, #264]	; (8004300 <UART_SetConfig+0x2f4>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004204:	d012      	beq.n	800422c <UART_SetConfig+0x220>
 8004206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420a:	d802      	bhi.n	8004212 <UART_SetConfig+0x206>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <UART_SetConfig+0x214>
 8004210:	e012      	b.n	8004238 <UART_SetConfig+0x22c>
 8004212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004216:	d006      	beq.n	8004226 <UART_SetConfig+0x21a>
 8004218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800421c:	d009      	beq.n	8004232 <UART_SetConfig+0x226>
 800421e:	e00b      	b.n	8004238 <UART_SetConfig+0x22c>
 8004220:	2300      	movs	r3, #0
 8004222:	76fb      	strb	r3, [r7, #27]
 8004224:	e038      	b.n	8004298 <UART_SetConfig+0x28c>
 8004226:	2302      	movs	r3, #2
 8004228:	76fb      	strb	r3, [r7, #27]
 800422a:	e035      	b.n	8004298 <UART_SetConfig+0x28c>
 800422c:	2304      	movs	r3, #4
 800422e:	76fb      	strb	r3, [r7, #27]
 8004230:	e032      	b.n	8004298 <UART_SetConfig+0x28c>
 8004232:	2308      	movs	r3, #8
 8004234:	76fb      	strb	r3, [r7, #27]
 8004236:	e02f      	b.n	8004298 <UART_SetConfig+0x28c>
 8004238:	2310      	movs	r3, #16
 800423a:	76fb      	strb	r3, [r7, #27]
 800423c:	bf00      	nop
 800423e:	e02b      	b.n	8004298 <UART_SetConfig+0x28c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2c      	ldr	r2, [pc, #176]	; (80042f8 <UART_SetConfig+0x2ec>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d124      	bne.n	8004294 <UART_SetConfig+0x288>
 800424a:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <UART_SetConfig+0x2f4>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004258:	d012      	beq.n	8004280 <UART_SetConfig+0x274>
 800425a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425e:	d802      	bhi.n	8004266 <UART_SetConfig+0x25a>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d007      	beq.n	8004274 <UART_SetConfig+0x268>
 8004264:	e012      	b.n	800428c <UART_SetConfig+0x280>
 8004266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426a:	d006      	beq.n	800427a <UART_SetConfig+0x26e>
 800426c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004270:	d009      	beq.n	8004286 <UART_SetConfig+0x27a>
 8004272:	e00b      	b.n	800428c <UART_SetConfig+0x280>
 8004274:	2300      	movs	r3, #0
 8004276:	76fb      	strb	r3, [r7, #27]
 8004278:	e00e      	b.n	8004298 <UART_SetConfig+0x28c>
 800427a:	2302      	movs	r3, #2
 800427c:	76fb      	strb	r3, [r7, #27]
 800427e:	e00b      	b.n	8004298 <UART_SetConfig+0x28c>
 8004280:	2304      	movs	r3, #4
 8004282:	76fb      	strb	r3, [r7, #27]
 8004284:	e008      	b.n	8004298 <UART_SetConfig+0x28c>
 8004286:	2308      	movs	r3, #8
 8004288:	76fb      	strb	r3, [r7, #27]
 800428a:	e005      	b.n	8004298 <UART_SetConfig+0x28c>
 800428c:	2310      	movs	r3, #16
 800428e:	76fb      	strb	r3, [r7, #27]
 8004290:	bf00      	nop
 8004292:	e001      	b.n	8004298 <UART_SetConfig+0x28c>
 8004294:	2310      	movs	r3, #16
 8004296:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <UART_SetConfig+0x2ec>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	f040 80fa 	bne.w	8004498 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042a4:	7efb      	ldrb	r3, [r7, #27]
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d836      	bhi.n	8004318 <UART_SetConfig+0x30c>
 80042aa:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <UART_SetConfig+0x2a4>)
 80042ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	08004319 	.word	0x08004319
 80042b8:	080042dd 	.word	0x080042dd
 80042bc:	08004319 	.word	0x08004319
 80042c0:	080042e3 	.word	0x080042e3
 80042c4:	08004319 	.word	0x08004319
 80042c8:	08004319 	.word	0x08004319
 80042cc:	08004319 	.word	0x08004319
 80042d0:	080042eb 	.word	0x080042eb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80042d4:	f7fd fde2 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 80042d8:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042da:	e020      	b.n	800431e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <UART_SetConfig+0x308>)
 80042de:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042e0:	e01d      	b.n	800431e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80042e2:	f7fd fd45 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 80042e6:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042e8:	e019      	b.n	800431e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80042ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ee:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042f0:	e015      	b.n	800431e <UART_SetConfig+0x312>
 80042f2:	bf00      	nop
 80042f4:	efff69f3 	.word	0xefff69f3
 80042f8:	40008000 	.word	0x40008000
 80042fc:	40013800 	.word	0x40013800
 8004300:	40021000 	.word	0x40021000
 8004304:	40004400 	.word	0x40004400
 8004308:	40004800 	.word	0x40004800
 800430c:	40004c00 	.word	0x40004c00
 8004310:	40005000 	.word	0x40005000
 8004314:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	74fb      	strb	r3, [r7, #19]
        break;
 800431c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 81ac 	beq.w	800467e <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	429a      	cmp	r2, r3
 8004334:	d305      	bcc.n	8004342 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	429a      	cmp	r2, r3
 8004340:	d902      	bls.n	8004348 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	74fb      	strb	r3, [r7, #19]
 8004346:	e19a      	b.n	800467e <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004348:	7efb      	ldrb	r3, [r7, #27]
 800434a:	2b08      	cmp	r3, #8
 800434c:	f200 8091 	bhi.w	8004472 <UART_SetConfig+0x466>
 8004350:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <UART_SetConfig+0x34c>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	0800437d 	.word	0x0800437d
 800435c:	08004473 	.word	0x08004473
 8004360:	080043c9 	.word	0x080043c9
 8004364:	08004473 	.word	0x08004473
 8004368:	080043fd 	.word	0x080043fd
 800436c:	08004473 	.word	0x08004473
 8004370:	08004473 	.word	0x08004473
 8004374:	08004473 	.word	0x08004473
 8004378:	08004449 	.word	0x08004449
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800437c:	f7fd fd8e 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8004380:	4603      	mov	r3, r0
 8004382:	4619      	mov	r1, r3
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	f04f 0400 	mov.w	r4, #0
 8004390:	0214      	lsls	r4, r2, #8
 8004392:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004396:	020b      	lsls	r3, r1, #8
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6852      	ldr	r2, [r2, #4]
 800439c:	0852      	lsrs	r2, r2, #1
 800439e:	4611      	mov	r1, r2
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	eb13 0b01 	adds.w	fp, r3, r1
 80043a8:	eb44 0c02 	adc.w	ip, r4, r2
 80043ac:	4658      	mov	r0, fp
 80043ae:	4661      	mov	r1, ip
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f04f 0400 	mov.w	r4, #0
 80043b8:	461a      	mov	r2, r3
 80043ba:	4623      	mov	r3, r4
 80043bc:	f7fb ff08 	bl	80001d0 <__aeabi_uldivmod>
 80043c0:	4603      	mov	r3, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80043c6:	e057      	b.n	8004478 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	f04f 0400 	mov.w	r4, #0
 80043d2:	49b1      	ldr	r1, [pc, #708]	; (8004698 <UART_SetConfig+0x68c>)
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	eb13 0b01 	adds.w	fp, r3, r1
 80043dc:	eb44 0c02 	adc.w	ip, r4, r2
 80043e0:	4658      	mov	r0, fp
 80043e2:	4661      	mov	r1, ip
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f04f 0400 	mov.w	r4, #0
 80043ec:	461a      	mov	r2, r3
 80043ee:	4623      	mov	r3, r4
 80043f0:	f7fb feee 	bl	80001d0 <__aeabi_uldivmod>
 80043f4:	4603      	mov	r3, r0
 80043f6:	460c      	mov	r4, r1
 80043f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80043fa:	e03d      	b.n	8004478 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043fc:	f7fd fcb8 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8004400:	4603      	mov	r3, r0
 8004402:	4619      	mov	r1, r3
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	f04f 0400 	mov.w	r4, #0
 8004410:	0214      	lsls	r4, r2, #8
 8004412:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004416:	020b      	lsls	r3, r1, #8
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6852      	ldr	r2, [r2, #4]
 800441c:	0852      	lsrs	r2, r2, #1
 800441e:	4611      	mov	r1, r2
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	eb13 0b01 	adds.w	fp, r3, r1
 8004428:	eb44 0c02 	adc.w	ip, r4, r2
 800442c:	4658      	mov	r0, fp
 800442e:	4661      	mov	r1, ip
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f04f 0400 	mov.w	r4, #0
 8004438:	461a      	mov	r2, r3
 800443a:	4623      	mov	r3, r4
 800443c:	f7fb fec8 	bl	80001d0 <__aeabi_uldivmod>
 8004440:	4603      	mov	r3, r0
 8004442:	460c      	mov	r4, r1
 8004444:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004446:	e017      	b.n	8004478 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	085b      	lsrs	r3, r3, #1
 800444e:	f04f 0400 	mov.w	r4, #0
 8004452:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004456:	f144 0100 	adc.w	r1, r4, #0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f04f 0400 	mov.w	r4, #0
 8004462:	461a      	mov	r2, r3
 8004464:	4623      	mov	r3, r4
 8004466:	f7fb feb3 	bl	80001d0 <__aeabi_uldivmod>
 800446a:	4603      	mov	r3, r0
 800446c:	460c      	mov	r4, r1
 800446e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004470:	e002      	b.n	8004478 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	74fb      	strb	r3, [r7, #19]
            break;
 8004476:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800447e:	d308      	bcc.n	8004492 <UART_SetConfig+0x486>
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004486:	d204      	bcs.n	8004492 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	60da      	str	r2, [r3, #12]
 8004490:	e0f5      	b.n	800467e <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	74fb      	strb	r3, [r7, #19]
 8004496:	e0f2      	b.n	800467e <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a0:	d17f      	bne.n	80045a2 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80044a2:	7efb      	ldrb	r3, [r7, #27]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d85c      	bhi.n	8004562 <UART_SetConfig+0x556>
 80044a8:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <UART_SetConfig+0x4a4>)
 80044aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ae:	bf00      	nop
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	080044f3 	.word	0x080044f3
 80044b8:	08004511 	.word	0x08004511
 80044bc:	08004563 	.word	0x08004563
 80044c0:	0800452d 	.word	0x0800452d
 80044c4:	08004563 	.word	0x08004563
 80044c8:	08004563 	.word	0x08004563
 80044cc:	08004563 	.word	0x08004563
 80044d0:	0800454b 	.word	0x0800454b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80044d4:	f7fd fce2 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 80044d8:	4603      	mov	r3, r0
 80044da:	005a      	lsls	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	085b      	lsrs	r3, r3, #1
 80044e2:	441a      	add	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044f0:	e03a      	b.n	8004568 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80044f2:	f7fd fce9 	bl	8001ec8 <HAL_RCC_GetPCLK2Freq>
 80044f6:	4603      	mov	r3, r0
 80044f8:	005a      	lsls	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	441a      	add	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	fbb2 f3f3 	udiv	r3, r2, r3
 800450a:	b29b      	uxth	r3, r3
 800450c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800450e:	e02b      	b.n	8004568 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800451a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6852      	ldr	r2, [r2, #4]
 8004522:	fbb3 f3f2 	udiv	r3, r3, r2
 8004526:	b29b      	uxth	r3, r3
 8004528:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800452a:	e01d      	b.n	8004568 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800452c:	f7fd fc20 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8004530:	4603      	mov	r3, r0
 8004532:	005a      	lsls	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	441a      	add	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	b29b      	uxth	r3, r3
 8004546:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004548:	e00e      	b.n	8004568 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
 800455c:	b29b      	uxth	r3, r3
 800455e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004560:	e002      	b.n	8004568 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	74fb      	strb	r3, [r7, #19]
        break;
 8004566:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b0f      	cmp	r3, #15
 800456c:	d916      	bls.n	800459c <UART_SetConfig+0x590>
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004574:	d212      	bcs.n	800459c <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f023 030f 	bic.w	r3, r3, #15
 800457e:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	b29b      	uxth	r3, r3
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	b29a      	uxth	r2, r3
 800458c:	897b      	ldrh	r3, [r7, #10]
 800458e:	4313      	orrs	r3, r2
 8004590:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	897a      	ldrh	r2, [r7, #10]
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	e070      	b.n	800467e <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	74fb      	strb	r3, [r7, #19]
 80045a0:	e06d      	b.n	800467e <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80045a2:	7efb      	ldrb	r3, [r7, #27]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d859      	bhi.n	800465c <UART_SetConfig+0x650>
 80045a8:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0x5a4>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045d5 	.word	0x080045d5
 80045b4:	080045f1 	.word	0x080045f1
 80045b8:	0800460d 	.word	0x0800460d
 80045bc:	0800465d 	.word	0x0800465d
 80045c0:	08004629 	.word	0x08004629
 80045c4:	0800465d 	.word	0x0800465d
 80045c8:	0800465d 	.word	0x0800465d
 80045cc:	0800465d 	.word	0x0800465d
 80045d0:	08004645 	.word	0x08004645
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80045d4:	f7fd fc62 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 80045d8:	4602      	mov	r2, r0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	085b      	lsrs	r3, r3, #1
 80045e0:	441a      	add	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045ee:	e038      	b.n	8004662 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80045f0:	f7fd fc6a 	bl	8001ec8 <HAL_RCC_GetPCLK2Freq>
 80045f4:	4602      	mov	r2, r0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	441a      	add	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	fbb2 f3f3 	udiv	r3, r2, r3
 8004606:	b29b      	uxth	r3, r3
 8004608:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800460a:	e02a      	b.n	8004662 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004616:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6852      	ldr	r2, [r2, #4]
 800461e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004622:	b29b      	uxth	r3, r3
 8004624:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004626:	e01c      	b.n	8004662 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004628:	f7fd fba2 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	441a      	add	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	fbb2 f3f3 	udiv	r3, r2, r3
 800463e:	b29b      	uxth	r3, r3
 8004640:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004642:	e00e      	b.n	8004662 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	fbb2 f3f3 	udiv	r3, r2, r3
 8004656:	b29b      	uxth	r3, r3
 8004658:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800465a:	e002      	b.n	8004662 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	74fb      	strb	r3, [r7, #19]
        break;
 8004660:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b0f      	cmp	r3, #15
 8004666:	d908      	bls.n	800467a <UART_SetConfig+0x66e>
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466e:	d204      	bcs.n	800467a <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	60da      	str	r2, [r3, #12]
 8004678:	e001      	b.n	800467e <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800468a:	7cfb      	ldrb	r3, [r7, #19]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3720      	adds	r7, #32
 8004690:	46bd      	mov	sp, r7
 8004692:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004696:	bf00      	nop
 8004698:	f4240000 	.word	0xf4240000

0800469c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01a      	beq.n	80047b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479a:	d10a      	bne.n	80047b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	605a      	str	r2, [r3, #4]
  }
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80047ee:	f7fc fab7 	bl	8000d60 <HAL_GetTick>
 80047f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d10e      	bne.n	8004820 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004802:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f82a 	bl	800486a <UART_WaitOnFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e020      	b.n	8004862 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b04      	cmp	r3, #4
 800482c:	d10e      	bne.n	800484c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800482e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f814 	bl	800486a <UART_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e00a      	b.n	8004862 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	4613      	mov	r3, r2
 8004878:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487a:	e02a      	b.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004882:	d026      	beq.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004884:	f7fc fa6c 	bl	8000d60 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	429a      	cmp	r2, r3
 8004892:	d302      	bcc.n	800489a <UART_WaitOnFlagUntilTimeout+0x30>
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d11b      	bne.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048a8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0201 	bic.w	r2, r2, #1
 80048b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e00f      	b.n	80048f2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4013      	ands	r3, r2
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	429a      	cmp	r2, r3
 80048e0:	bf0c      	ite	eq
 80048e2:	2301      	moveq	r3, #1
 80048e4:	2300      	movne	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d0c5      	beq.n	800487c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004910:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0201 	bic.w	r2, r2, #1
 8004920:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f7ff fb4d 	bl	8003ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800495e:	bf00      	nop
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004972:	2b21      	cmp	r3, #33	; 0x21
 8004974:	d12b      	bne.n	80049ce <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d110      	bne.n	80049a4 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004990:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049a0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80049a2:	e014      	b.n	80049ce <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	b292      	uxth	r2, r2
 80049b0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e6:	2b21      	cmp	r3, #33	; 0x21
 80049e8:	d12f      	bne.n	8004a4a <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d110      	bne.n	8004a18 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a04:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a14:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004a16:	e018      	b.n	8004a4a <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	881a      	ldrh	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a2a:	b292      	uxth	r2, r2
 8004a2c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a32:	1c9a      	adds	r2, r3, #2
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fc f92e 	bl	8000cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a96:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a9c:	2b22      	cmp	r3, #34	; 0x22
 8004a9e:	d13a      	bne.n	8004b16 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004aa6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004aa8:	89bb      	ldrh	r3, [r7, #12]
 8004aaa:	b2d9      	uxtb	r1, r3
 8004aac:	89fb      	ldrh	r3, [r7, #14]
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	400a      	ands	r2, r1
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d123      	bne.n	8004b2a <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004af0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc f8ce 	bl	8000cb0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b14:	e009      	b.n	8004b2a <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	8b1b      	ldrh	r3, [r3, #24]
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0208 	orr.w	r2, r2, #8
 8004b26:	b292      	uxth	r2, r2
 8004b28:	831a      	strh	r2, [r3, #24]
}
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b40:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b46:	2b22      	cmp	r3, #34	; 0x22
 8004b48:	d13a      	bne.n	8004bc0 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b50:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b56:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004b58:	89ba      	ldrh	r2, [r7, #12]
 8004b5a:	89fb      	ldrh	r3, [r7, #14]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b68:	1c9a      	adds	r2, r3, #2
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d123      	bne.n	8004bd4 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b9a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fc f879 	bl	8000cb0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bbe:	e009      	b.n	8004bd4 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	8b1b      	ldrh	r3, [r3, #24]
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0208 	orr.w	r2, r2, #8
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	831a      	strh	r2, [r3, #24]
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <CommunicationRxWrapper>:
uint8_t Received_robot_speeds_Y[255];
uint8_t Received_robot_speeds_Ang[255];
uint8_t receive_counter=0;

void CommunicationRxWrapper(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
	uint16_t Received_message;
	uint8_t wifi_status;
	uint8_t connection_status;
	switch(Rx_Wrapper_State)
 8004bf6:	4b99      	ldr	r3, [pc, #612]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	f200 811c 	bhi.w	8004e38 <CommunicationRxWrapper+0x248>
 8004c00:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <CommunicationRxWrapper+0x18>)
 8004c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c06:	bf00      	nop
 8004c08:	08004c1d 	.word	0x08004c1d
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004c99 	.word	0x08004c99
 8004c14:	08004db1 	.word	0x08004db1
 8004c18:	08004df5 	.word	0x08004df5
	{
		case INIT_STATE:
			Received_message = Rx_fifo_pull();
 8004c1c:	f000 f9e4 	bl	8004fe8 <Rx_fifo_pull>
 8004c20:	4603      	mov	r3, r0
 8004c22:	80fb      	strh	r3, [r7, #6]
			if(DATA_NOT_AVAILABLE != Received_message)
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	f000 8108 	beq.w	8004e40 <CommunicationRxWrapper+0x250>
			{
				if(MESSAGE_INIT == Received_message)
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	2baa      	cmp	r3, #170	; 0xaa
 8004c34:	f040 8104 	bne.w	8004e40 <CommunicationRxWrapper+0x250>
				{
					Rx_Wrapper_State = MESSAGE_PARSER;
 8004c38:	4b88      	ldr	r3, [pc, #544]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
				else
				{
					//errorhandling
				}
			}
			break;
 8004c3e:	e0ff      	b.n	8004e40 <CommunicationRxWrapper+0x250>

		case MESSAGE_PARSER:
			Received_message = Rx_fifo_pull();
 8004c40:	f000 f9d2 	bl	8004fe8 <Rx_fifo_pull>
 8004c44:	4603      	mov	r3, r0
 8004c46:	80fb      	strh	r3, [r7, #6]
			if(DATA_NOT_AVAILABLE != Received_message)
 8004c48:	88fb      	ldrh	r3, [r7, #6]
 8004c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	f000 80f8 	beq.w	8004e44 <CommunicationRxWrapper+0x254>
			{
				if(ROBOT_SPEED_MESSAGE == Received_message)
 8004c54:	88fb      	ldrh	r3, [r7, #6]
 8004c56:	2b3f      	cmp	r3, #63	; 0x3f
 8004c58:	d106      	bne.n	8004c68 <CommunicationRxWrapper+0x78>
				{
					Rx_Wrapper_State = ROBOT_SPEED_RECEIVED;
 8004c5a:	4b80      	ldr	r3, [pc, #512]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	701a      	strb	r2, [r3, #0]
					message_size=3;
 8004c60:	4b7f      	ldr	r3, [pc, #508]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004c62:	2203      	movs	r2, #3
 8004c64:	701a      	strb	r2, [r3, #0]
				{
					Rx_Wrapper_State = INIT_STATE;
					//errorhandling
				}
			}
			break;
 8004c66:	e0ed      	b.n	8004e44 <CommunicationRxWrapper+0x254>
				else if (WIFI_CONNECTED == Received_message)
 8004c68:	88fb      	ldrh	r3, [r7, #6]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d106      	bne.n	8004c7c <CommunicationRxWrapper+0x8c>
					Rx_Wrapper_State = WIFI_RECEIVED;
 8004c6e:	4b7b      	ldr	r3, [pc, #492]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004c70:	2203      	movs	r2, #3
 8004c72:	701a      	strb	r2, [r3, #0]
					message_size=0;
 8004c74:	4b7a      	ldr	r3, [pc, #488]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	701a      	strb	r2, [r3, #0]
			break;
 8004c7a:	e0e3      	b.n	8004e44 <CommunicationRxWrapper+0x254>
				else if (CONNECTION_ESTABILISHED == Received_message)
 8004c7c:	88fb      	ldrh	r3, [r7, #6]
 8004c7e:	2b15      	cmp	r3, #21
 8004c80:	d106      	bne.n	8004c90 <CommunicationRxWrapper+0xa0>
					Rx_Wrapper_State = CONNECTION_RECEIVED;
 8004c82:	4b76      	ldr	r3, [pc, #472]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004c84:	2204      	movs	r2, #4
 8004c86:	701a      	strb	r2, [r3, #0]
					message_size=0;
 8004c88:	4b75      	ldr	r3, [pc, #468]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
			break;
 8004c8e:	e0d9      	b.n	8004e44 <CommunicationRxWrapper+0x254>
					Rx_Wrapper_State = INIT_STATE;
 8004c90:	4b72      	ldr	r3, [pc, #456]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
			break;
 8004c96:	e0d5      	b.n	8004e44 <CommunicationRxWrapper+0x254>

		case ROBOT_SPEED_RECEIVED:
			Received_message = Rx_fifo_pull();
 8004c98:	f000 f9a6 	bl	8004fe8 <Rx_fifo_pull>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	80fb      	strh	r3, [r7, #6]
			if(DATA_NOT_AVAILABLE != Received_message)
 8004ca0:	88fb      	ldrh	r3, [r7, #6]
 8004ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	f000 80ce 	beq.w	8004e48 <CommunicationRxWrapper+0x258>
			{
				if(3 == message_size)
 8004cac:	4b6c      	ldr	r3, [pc, #432]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d11d      	bne.n	8004cf0 <CommunicationRxWrapper+0x100>
				{
					//robot speed x calculation
					Received_robot_speeds_X[receive_counter] = (uint8_t)Received_message;
 8004cb4:	4b6b      	ldr	r3, [pc, #428]	; (8004e64 <CommunicationRxWrapper+0x274>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	b2d9      	uxtb	r1, r3
 8004cbe:	4b6a      	ldr	r3, [pc, #424]	; (8004e68 <CommunicationRxWrapper+0x278>)
 8004cc0:	5499      	strb	r1, [r3, r2]
					Received_robot_speeds.Speed_X = ((float)Received_message / ROBOT_SPEED_CONVERT) - ROBOT_SPEED_OFFSET;
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	ee07 3a90 	vmov	s15, r3
 8004cc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ccc:	eddf 6a67 	vldr	s13, [pc, #412]	; 8004e6c <CommunicationRxWrapper+0x27c>
 8004cd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cd4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cdc:	4b64      	ldr	r3, [pc, #400]	; (8004e70 <CommunicationRxWrapper+0x280>)
 8004cde:	edc3 7a00 	vstr	s15, [r3]
					message_size = message_size -1;
 8004ce2:	4b5f      	ldr	r3, [pc, #380]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	4b5d      	ldr	r3, [pc, #372]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004cec:	701a      	strb	r2, [r3, #0]
				{
					Rx_Wrapper_State = INIT_STATE;
					//error handling
				}
			}
			break;
 8004cee:	e0ab      	b.n	8004e48 <CommunicationRxWrapper+0x258>
				else if(2 == message_size)
 8004cf0:	4b5b      	ldr	r3, [pc, #364]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d11d      	bne.n	8004d34 <CommunicationRxWrapper+0x144>
					Received_robot_speeds_Y[receive_counter] = (uint8_t)Received_message;
 8004cf8:	4b5a      	ldr	r3, [pc, #360]	; (8004e64 <CommunicationRxWrapper+0x274>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	b2d9      	uxtb	r1, r3
 8004d02:	4b5c      	ldr	r3, [pc, #368]	; (8004e74 <CommunicationRxWrapper+0x284>)
 8004d04:	5499      	strb	r1, [r3, r2]
					Received_robot_speeds.Speed_Y = ((float)Received_message / ROBOT_SPEED_CONVERT) - ROBOT_SPEED_OFFSET;
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	ee07 3a90 	vmov	s15, r3
 8004d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d10:	eddf 6a56 	vldr	s13, [pc, #344]	; 8004e6c <CommunicationRxWrapper+0x27c>
 8004d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d18:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004d1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d20:	4b53      	ldr	r3, [pc, #332]	; (8004e70 <CommunicationRxWrapper+0x280>)
 8004d22:	edc3 7a01 	vstr	s15, [r3, #4]
					message_size = message_size -1;
 8004d26:	4b4e      	ldr	r3, [pc, #312]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	4b4c      	ldr	r3, [pc, #304]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004d30:	701a      	strb	r2, [r3, #0]
			break;
 8004d32:	e089      	b.n	8004e48 <CommunicationRxWrapper+0x258>
				else if(1 == message_size)
 8004d34:	4b4a      	ldr	r3, [pc, #296]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d11d      	bne.n	8004d78 <CommunicationRxWrapper+0x188>
					Received_robot_speeds_Ang[receive_counter] = (uint8_t)Received_message;
 8004d3c:	4b49      	ldr	r3, [pc, #292]	; (8004e64 <CommunicationRxWrapper+0x274>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	b2d9      	uxtb	r1, r3
 8004d46:	4b4c      	ldr	r3, [pc, #304]	; (8004e78 <CommunicationRxWrapper+0x288>)
 8004d48:	5499      	strb	r1, [r3, r2]
					Received_robot_speeds.Angular_Speed = ((float)Received_message / ROBOT_SPEED_CONVERT) - ROBOT_SPEED_OFFSET;
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	ee07 3a90 	vmov	s15, r3
 8004d50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d54:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004e6c <CommunicationRxWrapper+0x27c>
 8004d58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d5c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004d60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d64:	4b42      	ldr	r3, [pc, #264]	; (8004e70 <CommunicationRxWrapper+0x280>)
 8004d66:	edc3 7a02 	vstr	s15, [r3, #8]
					message_size = message_size -1;
 8004d6a:	4b3d      	ldr	r3, [pc, #244]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004d74:	701a      	strb	r2, [r3, #0]
			break;
 8004d76:	e067      	b.n	8004e48 <CommunicationRxWrapper+0x258>
				else if(0 == message_size)
 8004d78:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d113      	bne.n	8004da8 <CommunicationRxWrapper+0x1b8>
					if(MESSAGE_END == Received_message)
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	2bcc      	cmp	r3, #204	; 0xcc
 8004d84:	d10c      	bne.n	8004da0 <CommunicationRxWrapper+0x1b0>
						Write_Received_Robot_Speed(&Received_robot_speeds);
 8004d86:	483a      	ldr	r0, [pc, #232]	; (8004e70 <CommunicationRxWrapper+0x280>)
 8004d88:	f001 ff0c 	bl	8006ba4 <Write_Received_Robot_Speed>
						Rx_Wrapper_State = INIT_STATE;
 8004d8c:	4b33      	ldr	r3, [pc, #204]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	701a      	strb	r2, [r3, #0]
						receive_counter = receive_counter + 1;
 8004d92:	4b34      	ldr	r3, [pc, #208]	; (8004e64 <CommunicationRxWrapper+0x274>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	3301      	adds	r3, #1
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4b32      	ldr	r3, [pc, #200]	; (8004e64 <CommunicationRxWrapper+0x274>)
 8004d9c:	701a      	strb	r2, [r3, #0]
			break;
 8004d9e:	e053      	b.n	8004e48 <CommunicationRxWrapper+0x258>
						Rx_Wrapper_State = INIT_STATE;
 8004da0:	4b2e      	ldr	r3, [pc, #184]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
			break;
 8004da6:	e04f      	b.n	8004e48 <CommunicationRxWrapper+0x258>
					Rx_Wrapper_State = INIT_STATE;
 8004da8:	4b2c      	ldr	r3, [pc, #176]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
			break;
 8004dae:	e04b      	b.n	8004e48 <CommunicationRxWrapper+0x258>

		case WIFI_RECEIVED:
			wifi_status = CONNECTED;
 8004db0:	2301      	movs	r3, #1
 8004db2:	717b      	strb	r3, [r7, #5]
			Received_message = Rx_fifo_pull();
 8004db4:	f000 f918 	bl	8004fe8 <Rx_fifo_pull>
 8004db8:	4603      	mov	r3, r0
 8004dba:	80fb      	strh	r3, [r7, #6]
			if(DATA_NOT_AVAILABLE != Received_message)
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d042      	beq.n	8004e4c <CommunicationRxWrapper+0x25c>
			{
				if(0 == message_size)
 8004dc6:	4b26      	ldr	r3, [pc, #152]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10e      	bne.n	8004dec <CommunicationRxWrapper+0x1fc>
				{
					if(MESSAGE_END == Received_message)
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	2bcc      	cmp	r3, #204	; 0xcc
 8004dd2:	d107      	bne.n	8004de4 <CommunicationRxWrapper+0x1f4>
					{
						Write_Wifi_Connected(&wifi_status);
 8004dd4:	1d7b      	adds	r3, r7, #5
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 ff2a 	bl	8006c30 <Write_Wifi_Connected>
						Rx_Wrapper_State = INIT_STATE;
 8004ddc:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	701a      	strb	r2, [r3, #0]
				{
					Rx_Wrapper_State = INIT_STATE;
					//error handling
				}
			}
			break;
 8004de2:	e033      	b.n	8004e4c <CommunicationRxWrapper+0x25c>
						Rx_Wrapper_State = INIT_STATE;
 8004de4:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
			break;
 8004dea:	e02f      	b.n	8004e4c <CommunicationRxWrapper+0x25c>
					Rx_Wrapper_State = INIT_STATE;
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
			break;
 8004df2:	e02b      	b.n	8004e4c <CommunicationRxWrapper+0x25c>

		case CONNECTION_RECEIVED:
			connection_status = CONNECTED;
 8004df4:	2301      	movs	r3, #1
 8004df6:	713b      	strb	r3, [r7, #4]
			Received_message = Rx_fifo_pull();
 8004df8:	f000 f8f6 	bl	8004fe8 <Rx_fifo_pull>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	80fb      	strh	r3, [r7, #6]
			if(DATA_NOT_AVAILABLE != Received_message)
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d022      	beq.n	8004e50 <CommunicationRxWrapper+0x260>
			{
				if(0 == message_size)
 8004e0a:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <CommunicationRxWrapper+0x270>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10e      	bne.n	8004e30 <CommunicationRxWrapper+0x240>
				{
					if(MESSAGE_END == Received_message)
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	2bcc      	cmp	r3, #204	; 0xcc
 8004e16:	d107      	bne.n	8004e28 <CommunicationRxWrapper+0x238>
					{
						Write_Connection_Estabilished(&connection_status);
 8004e18:	1d3b      	adds	r3, r7, #4
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f001 ff2a 	bl	8006c74 <Write_Connection_Estabilished>
						Rx_Wrapper_State = INIT_STATE;
 8004e20:	4b0e      	ldr	r3, [pc, #56]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
				{
					Rx_Wrapper_State = INIT_STATE;
					//error handling
				}
			}
			break;
 8004e26:	e013      	b.n	8004e50 <CommunicationRxWrapper+0x260>
						Rx_Wrapper_State = INIT_STATE;
 8004e28:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
			break;
 8004e2e:	e00f      	b.n	8004e50 <CommunicationRxWrapper+0x260>
					Rx_Wrapper_State = INIT_STATE;
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	701a      	strb	r2, [r3, #0]
			break;
 8004e36:	e00b      	b.n	8004e50 <CommunicationRxWrapper+0x260>

		default:
			//should never come here
			Rx_Wrapper_State = INIT_STATE;
 8004e38:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <CommunicationRxWrapper+0x26c>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
			break;
 8004e3e:	e008      	b.n	8004e52 <CommunicationRxWrapper+0x262>
			break;
 8004e40:	bf00      	nop
 8004e42:	e006      	b.n	8004e52 <CommunicationRxWrapper+0x262>
			break;
 8004e44:	bf00      	nop
 8004e46:	e004      	b.n	8004e52 <CommunicationRxWrapper+0x262>
			break;
 8004e48:	bf00      	nop
 8004e4a:	e002      	b.n	8004e52 <CommunicationRxWrapper+0x262>
			break;
 8004e4c:	bf00      	nop
 8004e4e:	e000      	b.n	8004e52 <CommunicationRxWrapper+0x262>
			break;
 8004e50:	bf00      	nop

	}

}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000030 	.word	0x20000030
 8004e60:	20001014 	.word	0x20001014
 8004e64:	20000031 	.word	0x20000031
 8004e68:	20000f08 	.word	0x20000f08
 8004e6c:	42aa0000 	.word	0x42aa0000
 8004e70:	20001008 	.word	0x20001008
 8004e74:	20001018 	.word	0x20001018
 8004e78:	20000e08 	.word	0x20000e08

08004e7c <CommunicationTxWrapper>:
RobotSpeed_Typedef Received_robot_speeds;
extern UART_HandleTypeDef huart3;
uint8_t TxBuffer[255];

void CommunicationTxWrapper(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
	uint8_t wifi_status;
	uint8_t connection_status;
	uint8_t transmit_enabled;
	switch(Tx_Wrapper_State)
 8004e82:	4b34      	ldr	r3, [pc, #208]	; (8004f54 <CommunicationTxWrapper+0xd8>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d02c      	beq.n	8004ee4 <CommunicationTxWrapper+0x68>
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d058      	beq.n	8004f40 <CommunicationTxWrapper+0xc4>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d152      	bne.n	8004f38 <CommunicationTxWrapper+0xbc>
	{
		case INIT_STATE:
			Read_Wifi_Connected(&wifi_status);
 8004e92:	1dfb      	adds	r3, r7, #7
 8004e94:	4618      	mov	r0, r3
 8004e96:	f001 feb9 	bl	8006c0c <Read_Wifi_Connected>
			if(CONNECTED == wifi_status)
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d151      	bne.n	8004f44 <CommunicationTxWrapper+0xc8>
			{
				Read_Transmit_Enabled(&transmit_enabled);
 8004ea0:	1d7b      	adds	r3, r7, #5
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 fe90 	bl	8006bc8 <Read_Transmit_Enabled>
				if(transmit_enabled == TRUE)
 8004ea8:	797b      	ldrb	r3, [r7, #5]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d14a      	bne.n	8004f44 <CommunicationTxWrapper+0xc8>
				{
					TxBuffer[0] = MESSAGE_INIT;
 8004eae:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <CommunicationTxWrapper+0xdc>)
 8004eb0:	22aa      	movs	r2, #170	; 0xaa
 8004eb2:	701a      	strb	r2, [r3, #0]
					TxBuffer[1] = CONNECTION_REQ;
 8004eb4:	4b28      	ldr	r3, [pc, #160]	; (8004f58 <CommunicationTxWrapper+0xdc>)
 8004eb6:	2215      	movs	r2, #21
 8004eb8:	705a      	strb	r2, [r3, #1]
					TxBuffer[2] = ROBOT_ID;
 8004eba:	4b27      	ldr	r3, [pc, #156]	; (8004f58 <CommunicationTxWrapper+0xdc>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	709a      	strb	r2, [r3, #2]
					TxBuffer[3] = MESSAGE_END;
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <CommunicationTxWrapper+0xdc>)
 8004ec2:	22cc      	movs	r2, #204	; 0xcc
 8004ec4:	70da      	strb	r2, [r3, #3]
					transmit_enabled = FALSE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	717b      	strb	r3, [r7, #5]
					Write_Transmit_Enabled(&transmit_enabled);
 8004eca:	1d7b      	adds	r3, r7, #5
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f001 fe8d 	bl	8006bec <Write_Transmit_Enabled>
					HAL_UART_Transmit_IT(&huart3, (uint8_t *)TxBuffer, CONNECTION_REQ_SIZE);
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	4920      	ldr	r1, [pc, #128]	; (8004f58 <CommunicationTxWrapper+0xdc>)
 8004ed6:	4821      	ldr	r0, [pc, #132]	; (8004f5c <CommunicationTxWrapper+0xe0>)
 8004ed8:	f7fe fe60 	bl	8003b9c <HAL_UART_Transmit_IT>
					Tx_Wrapper_State = WAIT_FOR_CONNECTION;
 8004edc:	4b1d      	ldr	r3, [pc, #116]	; (8004f54 <CommunicationTxWrapper+0xd8>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8004ee2:	e02f      	b.n	8004f44 <CommunicationTxWrapper+0xc8>
		case WAIT_FOR_CONNECTION:
			Read_Connection_Estabilished(&connection_status);
 8004ee4:	1dbb      	adds	r3, r7, #6
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 feb2 	bl	8006c50 <Read_Connection_Estabilished>
			if(CONNECTED == connection_status)
 8004eec:	79bb      	ldrb	r3, [r7, #6]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d103      	bne.n	8004efa <CommunicationTxWrapper+0x7e>
			{
				Tx_Wrapper_State = NORMAL_COMMUNICATION;
 8004ef2:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <CommunicationTxWrapper+0xd8>)
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	701a      	strb	r2, [r3, #0]
					transmit_enabled = FALSE;
					Write_Transmit_Enabled(&transmit_enabled);
					HAL_UART_Transmit_IT(&huart3, (uint8_t *)TxBuffer, CONNECTION_REQ_SIZE);
				}
			}
			break;
 8004ef8:	e026      	b.n	8004f48 <CommunicationTxWrapper+0xcc>
				Read_Transmit_Enabled(&transmit_enabled);
 8004efa:	1d7b      	adds	r3, r7, #5
 8004efc:	4618      	mov	r0, r3
 8004efe:	f001 fe63 	bl	8006bc8 <Read_Transmit_Enabled>
				if(TRUE == transmit_enabled)
 8004f02:	797b      	ldrb	r3, [r7, #5]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d11f      	bne.n	8004f48 <CommunicationTxWrapper+0xcc>
					TxBuffer[0] = MESSAGE_INIT;
 8004f08:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <CommunicationTxWrapper+0xdc>)
 8004f0a:	22aa      	movs	r2, #170	; 0xaa
 8004f0c:	701a      	strb	r2, [r3, #0]
					TxBuffer[1] = CONNECTION_REQ;
 8004f0e:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <CommunicationTxWrapper+0xdc>)
 8004f10:	2215      	movs	r2, #21
 8004f12:	705a      	strb	r2, [r3, #1]
					TxBuffer[2] = ROBOT_ID;
 8004f14:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <CommunicationTxWrapper+0xdc>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	709a      	strb	r2, [r3, #2]
					TxBuffer[3] = MESSAGE_END;
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <CommunicationTxWrapper+0xdc>)
 8004f1c:	22cc      	movs	r2, #204	; 0xcc
 8004f1e:	70da      	strb	r2, [r3, #3]
					transmit_enabled = FALSE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	717b      	strb	r3, [r7, #5]
					Write_Transmit_Enabled(&transmit_enabled);
 8004f24:	1d7b      	adds	r3, r7, #5
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 fe60 	bl	8006bec <Write_Transmit_Enabled>
					HAL_UART_Transmit_IT(&huart3, (uint8_t *)TxBuffer, CONNECTION_REQ_SIZE);
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	490a      	ldr	r1, [pc, #40]	; (8004f58 <CommunicationTxWrapper+0xdc>)
 8004f30:	480a      	ldr	r0, [pc, #40]	; (8004f5c <CommunicationTxWrapper+0xe0>)
 8004f32:	f7fe fe33 	bl	8003b9c <HAL_UART_Transmit_IT>
			break;
 8004f36:	e007      	b.n	8004f48 <CommunicationTxWrapper+0xcc>
		case NORMAL_COMMUNICATION:
			break;
		default:
			//should never come here
			Tx_Wrapper_State = INIT_STATE;
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <CommunicationTxWrapper+0xd8>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
			break;
 8004f3e:	e004      	b.n	8004f4a <CommunicationTxWrapper+0xce>
			break;
 8004f40:	bf00      	nop
 8004f42:	e002      	b.n	8004f4a <CommunicationTxWrapper+0xce>
			break;
 8004f44:	bf00      	nop
 8004f46:	e000      	b.n	8004f4a <CommunicationTxWrapper+0xce>
			break;
 8004f48:	bf00      	nop

	}
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000032 	.word	0x20000032
 8004f58:	20001118 	.word	0x20001118
 8004f5c:	20001424 	.word	0x20001424

08004f60 <Rx_fifo_push>:

volatile uint8_t Tx_fifo_tail = 0;
volatile uint8_t Tx_fifo_head = 0;

uint8_t Rx_fifo_push(uint8_t data)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	4603      	mov	r3, r0
 8004f68:	71fb      	strb	r3, [r7, #7]
	if(((Rx_fifo_head + 1) % RX_FIFO_SIZE) == Rx_fifo_tail)
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <Rx_fifo_push+0x78>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	4b1a      	ldr	r3, [pc, #104]	; (8004fdc <Rx_fifo_push+0x7c>)
 8004f74:	fb83 1302 	smull	r1, r3, r3, r2
 8004f78:	4413      	add	r3, r2
 8004f7a:	11d9      	asrs	r1, r3, #7
 8004f7c:	17d3      	asrs	r3, r2, #31
 8004f7e:	1ac9      	subs	r1, r1, r3
 8004f80:	460b      	mov	r3, r1
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	1a5b      	subs	r3, r3, r1
 8004f86:	1ad1      	subs	r1, r2, r3
 8004f88:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <Rx_fifo_push+0x80>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	4299      	cmp	r1, r3
 8004f90:	d101      	bne.n	8004f96 <Rx_fifo_push+0x36>
	{
		return FIFO_FULL;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e019      	b.n	8004fca <Rx_fifo_push+0x6a>
	}

	Rx_fifo[Rx_fifo_head] = data;
 8004f96:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <Rx_fifo_push+0x78>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4a11      	ldr	r2, [pc, #68]	; (8004fe4 <Rx_fifo_push+0x84>)
 8004fa0:	79fb      	ldrb	r3, [r7, #7]
 8004fa2:	5453      	strb	r3, [r2, r1]
	Rx_fifo_head = (Rx_fifo_head + 1) % RX_FIFO_SIZE;
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <Rx_fifo_push+0x78>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <Rx_fifo_push+0x7c>)
 8004fae:	fb83 1302 	smull	r1, r3, r3, r2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	11d9      	asrs	r1, r3, #7
 8004fb6:	17d3      	asrs	r3, r2, #31
 8004fb8:	1ac9      	subs	r1, r1, r3
 8004fba:	460b      	mov	r3, r1
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	1a5b      	subs	r3, r3, r1
 8004fc0:	1ad1      	subs	r1, r2, r3
 8004fc2:	b2ca      	uxtb	r2, r1
 8004fc4:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <Rx_fifo_push+0x78>)
 8004fc6:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8004fc8:	2300      	movs	r3, #0

}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20000034 	.word	0x20000034
 8004fdc:	80808081 	.word	0x80808081
 8004fe0:	20000033 	.word	0x20000033
 8004fe4:	20001218 	.word	0x20001218

08004fe8 <Rx_fifo_pull>:

uint16_t Rx_fifo_pull(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
	uint8_t data;
	if(Rx_fifo_tail == Rx_fifo_head)
 8004fee:	4b10      	ldr	r3, [pc, #64]	; (8005030 <Rx_fifo_pull+0x48>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <Rx_fifo_pull+0x4c>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d102      	bne.n	8005004 <Rx_fifo_pull+0x1c>
	{
		return DATA_NOT_AVAILABLE;
 8004ffe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005002:	e00f      	b.n	8005024 <Rx_fifo_pull+0x3c>
	}

	data = Rx_fifo[Rx_fifo_tail];
 8005004:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <Rx_fifo_pull+0x48>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	b2db      	uxtb	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <Rx_fifo_pull+0x50>)
 800500e:	5c9b      	ldrb	r3, [r3, r2]
 8005010:	71fb      	strb	r3, [r7, #7]
	Rx_fifo_tail = (Rx_fifo_tail + 1) & RX_FIFO_SIZE;
 8005012:	4b07      	ldr	r3, [pc, #28]	; (8005030 <Rx_fifo_pull+0x48>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	3301      	adds	r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <Rx_fifo_pull+0x48>)
 800501e:	701a      	strb	r2, [r3, #0]

	return data;
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	b29b      	uxth	r3, r3

}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	20000033 	.word	0x20000033
 8005034:	20000034 	.word	0x20000034
 8005038:	20001218 	.word	0x20001218

0800503c <Motor_Init>:
#include "Common_Data.h"



void Motor_Init(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08c      	sub	sp, #48	; 0x30
 8005040:	af02      	add	r7, sp, #8
	TIM_PWM_Typedef TIM_handler = {0};
 8005042:	f107 0314 	add.w	r3, r7, #20
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	605a      	str	r2, [r3, #4]
 800504c:	609a      	str	r2, [r3, #8]
 800504e:	60da      	str	r2, [r3, #12]
 8005050:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8005052:	2301      	movs	r3, #1
 8005054:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8005056:	2301      	movs	r3, #1
 8005058:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800505a:	2303      	movs	r3, #3
 800505c:	60fb      	str	r3, [r7, #12]

#ifdef MOTOR1
	TIM_handler.TIMx = Motor1_A_TIM;
 800505e:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <Motor_Init+0x90>)
 8005060:	617b      	str	r3, [r7, #20]
	TIM_handler.TIM_channelx = Motor1_A_TIM_CHANNEL;
 8005062:	2300      	movs	r3, #0
 8005064:	83bb      	strh	r3, [r7, #28]
	TIM_handler.GPIOx = Motor1_A_GPIO;
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <Motor_Init+0x94>)
 8005068:	623b      	str	r3, [r7, #32]
	TIM_handler.GPIO_Pinx = Motor1_A_GPIO_PIN;
 800506a:	2310      	movs	r3, #16
 800506c:	84bb      	strh	r3, [r7, #36]	; 0x24
	TIM_handler.GPIO_AlternateFunctionx = Motor1_A_GPIO_AF;
 800506e:	2302      	movs	r3, #2
 8005070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	TIM_handler.Frequency = PWM_FREQUENCY;
 8005074:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005078:	61bb      	str	r3, [r7, #24]

	TIMx_PWM_Init(TIM_handler);
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	f107 0314 	add.w	r3, r7, #20
 8005082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005084:	f7fb fb0c 	bl	80006a0 <TIMx_PWM_Init>

	TIM_handler.TIMx = Motor1_B_TIM;
 8005088:	4b10      	ldr	r3, [pc, #64]	; (80050cc <Motor_Init+0x90>)
 800508a:	617b      	str	r3, [r7, #20]
	TIM_handler.TIM_channelx = Motor1_B_TIM_CHANNEL;
 800508c:	2304      	movs	r3, #4
 800508e:	83bb      	strh	r3, [r7, #28]
	TIM_handler.GPIOx = Motor1_B_GPIO;
 8005090:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <Motor_Init+0x94>)
 8005092:	623b      	str	r3, [r7, #32]
	TIM_handler.GPIO_Pinx = Motor1_B_GPIO_PIN;
 8005094:	2320      	movs	r3, #32
 8005096:	84bb      	strh	r3, [r7, #36]	; 0x24
	TIM_handler.GPIO_AlternateFunctionx = Motor1_B_GPIO_AF;
 8005098:	2302      	movs	r3, #2
 800509a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	TIM_handler.Frequency = PWM_FREQUENCY;
 800509e:	f644 6320 	movw	r3, #20000	; 0x4e20
 80050a2:	61bb      	str	r3, [r7, #24]

	TIMx_PWM_Init(TIM_handler);
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	f107 0314 	add.w	r3, r7, #20
 80050ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050ae:	f7fb faf7 	bl	80006a0 <TIMx_PWM_Init>

	GPIO_InitStruct.Pin = Motor1_EN_PIN;
 80050b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050b6:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(Motor1_EN_GPIO, &GPIO_InitStruct);
 80050b8:	463b      	mov	r3, r7
 80050ba:	4619      	mov	r1, r3
 80050bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050c0:	f7fb ffa0 	bl	8001004 <HAL_GPIO_Init>

	TIMx_PWM_Init(TIM_handler);
	GPIO_InitStruct.Pin = Motor4_EN_PIN;
	HAL_GPIO_Init(Motor4_EN_GPIO, &GPIO_InitStruct);
#endif
}
 80050c4:	bf00      	nop
 80050c6:	3728      	adds	r7, #40	; 0x28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40000400 	.word	0x40000400
 80050d0:	48000400 	.word	0x48000400

080050d4 <Motor_Start>:

void Motor_Start(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af02      	add	r7, sp, #8
	TIM_PWM_Typedef TIM_handler = {0};
 80050da:	1d3b      	adds	r3, r7, #4
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	605a      	str	r2, [r3, #4]
 80050e2:	609a      	str	r2, [r3, #8]
 80050e4:	60da      	str	r2, [r3, #12]
 80050e6:	611a      	str	r2, [r3, #16]

#ifdef MOTOR1
	TIM_handler.TIMx = Motor1_A_TIM;
 80050e8:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <Motor_Start+0x54>)
 80050ea:	607b      	str	r3, [r7, #4]
	TIM_handler.TIM_channelx = Motor1_A_TIM_CHANNEL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	81bb      	strh	r3, [r7, #12]

	TIMx_PWM_Start(TIM_handler);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	1d3b      	adds	r3, r7, #4
 80050f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050f8:	f7fb fba8 	bl	800084c <TIMx_PWM_Start>

	TIM_handler.TIMx = Motor1_B_TIM;
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <Motor_Start+0x54>)
 80050fe:	607b      	str	r3, [r7, #4]
	TIM_handler.TIM_channelx = Motor1_B_TIM_CHANNEL;
 8005100:	2304      	movs	r3, #4
 8005102:	81bb      	strh	r3, [r7, #12]

	TIMx_PWM_Start(TIM_handler);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	1d3b      	adds	r3, r7, #4
 800510a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800510c:	f7fb fb9e 	bl	800084c <TIMx_PWM_Start>
	HAL_GPIO_WritePin(Motor1_EN_GPIO,Motor1_EN_PIN,1);
 8005110:	2201      	movs	r2, #1
 8005112:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800511a:	f7fc f91b 	bl	8001354 <HAL_GPIO_WritePin>
	TIM_handler.TIM_channelx = Motor4_B_TIM_CHANNEL;

	TIMx_PWM_Start(TIM_handler);
	HAL_GPIO_WritePin(Motor4_EN_GPIO,Motor4_EN_PIN,1);
#endif
}
 800511e:	bf00      	nop
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40000400 	.word	0x40000400

0800512c <Motor_Stop>:

void Motor_Stop(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af02      	add	r7, sp, #8
	TIM_PWM_Typedef TIM_handler = {0};
 8005132:	1d3b      	adds	r3, r7, #4
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	609a      	str	r2, [r3, #8]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	611a      	str	r2, [r3, #16]

#ifdef MOTOR1
	TIM_handler.TIMx = Motor1_A_TIM;
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <Motor_Stop+0x44>)
 8005142:	607b      	str	r3, [r7, #4]
	TIM_handler.TIM_channelx = Motor1_A_TIM_CHANNEL;
 8005144:	2300      	movs	r3, #0
 8005146:	81bb      	strh	r3, [r7, #12]

	TIMx_PWM_Stop(TIM_handler);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	1d3b      	adds	r3, r7, #4
 800514e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005150:	f7fb fb9b 	bl	800088a <TIMx_PWM_Stop>

	TIM_handler.TIMx = Motor1_B_TIM;
 8005154:	4b06      	ldr	r3, [pc, #24]	; (8005170 <Motor_Stop+0x44>)
 8005156:	607b      	str	r3, [r7, #4]
	TIM_handler.TIM_channelx = Motor1_B_TIM_CHANNEL;
 8005158:	2304      	movs	r3, #4
 800515a:	81bb      	strh	r3, [r7, #12]

	TIMx_PWM_Stop(TIM_handler);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	1d3b      	adds	r3, r7, #4
 8005162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005164:	f7fb fb91 	bl	800088a <TIMx_PWM_Stop>
	TIM_handler.TIMx = Motor4_B_TIM;
	TIM_handler.TIM_channelx = Motor4_B_TIM_CHANNEL;

	TIMx_PWM_Stop(TIM_handler);
#endif
}
 8005168:	bf00      	nop
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40000400 	.word	0x40000400

08005174 <Motorx_Set_Speed>:

void Motorx_Set_Speed(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08e      	sub	sp, #56	; 0x38
 8005178:	af02      	add	r7, sp, #8
	TIM_PWM_Typedef TIM_handler = {0};
 800517a:	f107 031c 	add.w	r3, r7, #28
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	605a      	str	r2, [r3, #4]
 8005184:	609a      	str	r2, [r3, #8]
 8005186:	60da      	str	r2, [r3, #12]
 8005188:	611a      	str	r2, [r3, #16]
	WheelSpeed_Typedef Calculated_wheel_speeds;

	Read_Controlled_Wheel_Speeds(&Calculated_wheel_speeds);
 800518a:	f107 030c 	add.w	r3, r7, #12
 800518e:	4618      	mov	r0, r3
 8005190:	f001 fdc8 	bl	8006d24 <Read_Controlled_Wheel_Speeds>

	if(Calculated_wheel_speeds.WheelSpeed_1 > 1)
 8005194:	edd7 7a03 	vldr	s15, [r7, #12]
 8005198:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800519c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a4:	dd03      	ble.n	80051ae <Motorx_Set_Speed+0x3a>
	{
		Calculated_wheel_speeds.WheelSpeed_1 = 1;
 80051a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	e00a      	b.n	80051c4 <Motorx_Set_Speed+0x50>
	}
	else if(Calculated_wheel_speeds.WheelSpeed_1 < (-1))
 80051ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80051b2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80051b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051be:	d501      	bpl.n	80051c4 <Motorx_Set_Speed+0x50>
	{
		Calculated_wheel_speeds.WheelSpeed_1 = -1;
 80051c0:	4b57      	ldr	r3, [pc, #348]	; (8005320 <Motorx_Set_Speed+0x1ac>)
 80051c2:	60fb      	str	r3, [r7, #12]
	}
	if(Calculated_wheel_speeds.WheelSpeed_2 > 1)
 80051c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80051c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d4:	dd03      	ble.n	80051de <Motorx_Set_Speed+0x6a>
	{
		Calculated_wheel_speeds.WheelSpeed_2 = 1;
 80051d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	e00a      	b.n	80051f4 <Motorx_Set_Speed+0x80>
	}
	else if(Calculated_wheel_speeds.WheelSpeed_2 < (-1))
 80051de:	edd7 7a04 	vldr	s15, [r7, #16]
 80051e2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80051e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ee:	d501      	bpl.n	80051f4 <Motorx_Set_Speed+0x80>
	{
		Calculated_wheel_speeds.WheelSpeed_2 = -1;
 80051f0:	4b4b      	ldr	r3, [pc, #300]	; (8005320 <Motorx_Set_Speed+0x1ac>)
 80051f2:	613b      	str	r3, [r7, #16]
	}
	if(Calculated_wheel_speeds.WheelSpeed_3 > 1)
 80051f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80051f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005204:	dd03      	ble.n	800520e <Motorx_Set_Speed+0x9a>
	{
		Calculated_wheel_speeds.WheelSpeed_3 = 1;
 8005206:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	e00a      	b.n	8005224 <Motorx_Set_Speed+0xb0>
	}
	else if(Calculated_wheel_speeds.WheelSpeed_3 < (-1))
 800520e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005212:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521e:	d501      	bpl.n	8005224 <Motorx_Set_Speed+0xb0>
	{
		Calculated_wheel_speeds.WheelSpeed_3 = -1;
 8005220:	4b3f      	ldr	r3, [pc, #252]	; (8005320 <Motorx_Set_Speed+0x1ac>)
 8005222:	617b      	str	r3, [r7, #20]
	}
	if(Calculated_wheel_speeds.WheelSpeed_4 > 1)
 8005224:	edd7 7a06 	vldr	s15, [r7, #24]
 8005228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800522c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005234:	dd03      	ble.n	800523e <Motorx_Set_Speed+0xca>
	{
		Calculated_wheel_speeds.WheelSpeed_4 = 1;
 8005236:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	e00a      	b.n	8005254 <Motorx_Set_Speed+0xe0>
	}
	else if(Calculated_wheel_speeds.WheelSpeed_4 < (-1))
 800523e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005242:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800524a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524e:	d501      	bpl.n	8005254 <Motorx_Set_Speed+0xe0>
	{
		Calculated_wheel_speeds.WheelSpeed_4 = -1;
 8005250:	4b33      	ldr	r3, [pc, #204]	; (8005320 <Motorx_Set_Speed+0x1ac>)
 8005252:	61bb      	str	r3, [r7, #24]
	}

	if(ZERO_SPEED <= Calculated_wheel_speeds.WheelSpeed_1)
 8005254:	edd7 7a03 	vldr	s15, [r7, #12]
 8005258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800525c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005260:	db2d      	blt.n	80052be <Motorx_Set_Speed+0x14a>
	{
		TIM_handler.TIMx = Motor1_A_TIM;
 8005262:	4b30      	ldr	r3, [pc, #192]	; (8005324 <Motorx_Set_Speed+0x1b0>)
 8005264:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor1_A_TIM_CHANNEL;
 8005266:	2300      	movs	r3, #0
 8005268:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 800526a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800526e:	623b      	str	r3, [r7, #32]

		TIM_handler.Duty_Cicle = (uint8_t)(Calculated_wheel_speeds.WheelSpeed_1 * 100);
 8005270:	edd7 7a03 	vldr	s15, [r7, #12]
 8005274:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005328 <Motorx_Set_Speed+0x1b4>
 8005278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800527c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005280:	edc7 7a01 	vstr	s15, [r7, #4]
 8005284:	793b      	ldrb	r3, [r7, #4]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	f107 031c 	add.w	r3, r7, #28
 8005294:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005296:	f7fb fb17 	bl	80008c8 <Change_PWM_Pulse>

		TIM_handler.TIMx = Motor1_B_TIM;
 800529a:	4b22      	ldr	r3, [pc, #136]	; (8005324 <Motorx_Set_Speed+0x1b0>)
 800529c:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor1_B_TIM_CHANNEL;
 800529e:	2304      	movs	r3, #4
 80052a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 80052a2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80052a6:	623b      	str	r3, [r7, #32]
		TIM_handler.Duty_Cicle = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	f107 031c 	add.w	r3, r7, #28
 80052b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052b8:	f7fb fb06 	bl	80008c8 <Change_PWM_Pulse>
		Change_PWM_Pulse(TIM_handler);
	}
#endif


}
 80052bc:	e02c      	b.n	8005318 <Motorx_Set_Speed+0x1a4>
		TIM_handler.TIMx = Motor1_A_TIM;
 80052be:	4b19      	ldr	r3, [pc, #100]	; (8005324 <Motorx_Set_Speed+0x1b0>)
 80052c0:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor1_A_TIM_CHANNEL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 80052c6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80052ca:	623b      	str	r3, [r7, #32]
		TIM_handler.Duty_Cicle = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	f107 031c 	add.w	r3, r7, #28
 80052da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052dc:	f7fb faf4 	bl	80008c8 <Change_PWM_Pulse>
		TIM_handler.TIMx = Motor1_B_TIM;
 80052e0:	4b10      	ldr	r3, [pc, #64]	; (8005324 <Motorx_Set_Speed+0x1b0>)
 80052e2:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor1_B_TIM_CHANNEL;
 80052e4:	2304      	movs	r3, #4
 80052e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 80052e8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80052ec:	623b      	str	r3, [r7, #32]
		TIM_handler.Duty_Cicle = (uint8_t)(Calculated_wheel_speeds.WheelSpeed_1 * -100);
 80052ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80052f2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800532c <Motorx_Set_Speed+0x1b8>
 80052f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8005302:	793b      	ldrb	r3, [r7, #4]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	f107 031c 	add.w	r3, r7, #28
 8005312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005314:	f7fb fad8 	bl	80008c8 <Change_PWM_Pulse>
}
 8005318:	bf00      	nop
 800531a:	3730      	adds	r7, #48	; 0x30
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	bf800000 	.word	0xbf800000
 8005324:	40000400 	.word	0x40000400
 8005328:	42c80000 	.word	0x42c80000
 800532c:	c2c80000 	.word	0xc2c80000

08005330 <PID_Controller>:

float Wheel_Speed4_Integral_Error = 0;
float Wheel_Speed4_Last_Error = 0;

void PID_Controller(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b094      	sub	sp, #80	; 0x50
 8005334:	af00      	add	r7, sp, #0
	float Wheel_Speed3_Error;
	float Wheel_Speed3_Differential_Error;
	float Wheel_Speed4_Error;
	float Wheel_Speed4_Differential_Error;

	Read_Provided_Wheel_Speeds(&Current_Wheel_Speed);
 8005336:	f107 0320 	add.w	r3, r7, #32
 800533a:	4618      	mov	r0, r3
 800533c:	f001 fcce 	bl	8006cdc <Read_Provided_Wheel_Speeds>
	Read_Calculated_Wheel_Speeds(&Target_Wheel_Speed);
 8005340:	f107 0310 	add.w	r3, r7, #16
 8005344:	4618      	mov	r0, r3
 8005346:	f001 fca5 	bl	8006c94 <Read_Calculated_Wheel_Speeds>

	Wheel_Speed1_Error = Target_Wheel_Speed.WheelSpeed_1 - Current_Wheel_Speed.WheelSpeed_1;
 800534a:	ed97 7a04 	vldr	s14, [r7, #16]
 800534e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005356:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	Wheel_Speed1_Integral_Error = Wheel_Speed1_Integral_Error + Wheel_Speed1_Error;
 800535a:	4b6e      	ldr	r3, [pc, #440]	; (8005514 <PID_Controller+0x1e4>)
 800535c:	ed93 7a00 	vldr	s14, [r3]
 8005360:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005368:	4b6a      	ldr	r3, [pc, #424]	; (8005514 <PID_Controller+0x1e4>)
 800536a:	edc3 7a00 	vstr	s15, [r3]
	Wheel_Speed1_Differential_Error = Wheel_Speed1_Error - Wheel_Speed1_Last_Error;
 800536e:	4b6a      	ldr	r3, [pc, #424]	; (8005518 <PID_Controller+0x1e8>)
 8005370:	edd3 7a00 	vldr	s15, [r3]
 8005374:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800537c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	Wheel_Speed1_Last_Error = Wheel_Speed1_Error;
 8005380:	4a65      	ldr	r2, [pc, #404]	; (8005518 <PID_Controller+0x1e8>)
 8005382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005384:	6013      	str	r3, [r2, #0]
	Controlled_Wheel_Speed.WheelSpeed_1 = 	(PROPORTIONAL * Wheel_Speed1_Error) +
 8005386:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800538a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800551c <PID_Controller+0x1ec>
 800538e:	ee27 7a87 	vmul.f32	s14, s15, s14
											(INTEGRAL * Wheel_Speed1_Integral_Error) +
 8005392:	4b60      	ldr	r3, [pc, #384]	; (8005514 <PID_Controller+0x1e4>)
 8005394:	edd3 7a00 	vldr	s15, [r3]
 8005398:	eddf 6a61 	vldr	s13, [pc, #388]	; 8005520 <PID_Controller+0x1f0>
 800539c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Controlled_Wheel_Speed.WheelSpeed_1 = 	(PROPORTIONAL * Wheel_Speed1_Error) +
 80053a0:	ee37 7a27 	vadd.f32	s14, s14, s15
											(DIFFERENTIAL * Wheel_Speed1_Differential_Error);
 80053a4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80053a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005524 <PID_Controller+0x1f4>
 80053ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
											(INTEGRAL * Wheel_Speed1_Integral_Error) +
 80053b0:	ee77 7a27 	vadd.f32	s15, s14, s15
	Controlled_Wheel_Speed.WheelSpeed_1 = 	(PROPORTIONAL * Wheel_Speed1_Error) +
 80053b4:	edc7 7a00 	vstr	s15, [r7]

	Wheel_Speed2_Error = Target_Wheel_Speed.WheelSpeed_2 - Current_Wheel_Speed.WheelSpeed_2;
 80053b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80053bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80053c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053c4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	Wheel_Speed2_Integral_Error = Wheel_Speed2_Integral_Error + Wheel_Speed2_Error;
 80053c8:	4b57      	ldr	r3, [pc, #348]	; (8005528 <PID_Controller+0x1f8>)
 80053ca:	ed93 7a00 	vldr	s14, [r3]
 80053ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80053d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d6:	4b54      	ldr	r3, [pc, #336]	; (8005528 <PID_Controller+0x1f8>)
 80053d8:	edc3 7a00 	vstr	s15, [r3]
	Wheel_Speed2_Differential_Error = Wheel_Speed2_Error - Wheel_Speed2_Last_Error;
 80053dc:	4b53      	ldr	r3, [pc, #332]	; (800552c <PID_Controller+0x1fc>)
 80053de:	edd3 7a00 	vldr	s15, [r3]
 80053e2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80053e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ea:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	Wheel_Speed2_Last_Error = Wheel_Speed2_Error;
 80053ee:	4a4f      	ldr	r2, [pc, #316]	; (800552c <PID_Controller+0x1fc>)
 80053f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f2:	6013      	str	r3, [r2, #0]
	Controlled_Wheel_Speed.WheelSpeed_2 = 	(PROPORTIONAL * Wheel_Speed2_Error) +
 80053f4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80053f8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800551c <PID_Controller+0x1ec>
 80053fc:	ee27 7a87 	vmul.f32	s14, s15, s14
											(INTEGRAL * Wheel_Speed2_Integral_Error) +
 8005400:	4b49      	ldr	r3, [pc, #292]	; (8005528 <PID_Controller+0x1f8>)
 8005402:	edd3 7a00 	vldr	s15, [r3]
 8005406:	eddf 6a46 	vldr	s13, [pc, #280]	; 8005520 <PID_Controller+0x1f0>
 800540a:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Controlled_Wheel_Speed.WheelSpeed_2 = 	(PROPORTIONAL * Wheel_Speed2_Error) +
 800540e:	ee37 7a27 	vadd.f32	s14, s14, s15
											(DIFFERENTIAL * Wheel_Speed2_Differential_Error);
 8005412:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005416:	eddf 6a43 	vldr	s13, [pc, #268]	; 8005524 <PID_Controller+0x1f4>
 800541a:	ee67 7aa6 	vmul.f32	s15, s15, s13
											(INTEGRAL * Wheel_Speed2_Integral_Error) +
 800541e:	ee77 7a27 	vadd.f32	s15, s14, s15
	Controlled_Wheel_Speed.WheelSpeed_2 = 	(PROPORTIONAL * Wheel_Speed2_Error) +
 8005422:	edc7 7a01 	vstr	s15, [r7, #4]

	Wheel_Speed3_Error = Target_Wheel_Speed.WheelSpeed_3 - Current_Wheel_Speed.WheelSpeed_3;
 8005426:	ed97 7a06 	vldr	s14, [r7, #24]
 800542a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800542e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005432:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	Wheel_Speed3_Integral_Error = Wheel_Speed3_Integral_Error + Wheel_Speed3_Error;
 8005436:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <PID_Controller+0x200>)
 8005438:	ed93 7a00 	vldr	s14, [r3]
 800543c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005444:	4b3a      	ldr	r3, [pc, #232]	; (8005530 <PID_Controller+0x200>)
 8005446:	edc3 7a00 	vstr	s15, [r3]
	Wheel_Speed3_Differential_Error = Wheel_Speed3_Error - Wheel_Speed3_Last_Error;
 800544a:	4b3a      	ldr	r3, [pc, #232]	; (8005534 <PID_Controller+0x204>)
 800544c:	edd3 7a00 	vldr	s15, [r3]
 8005450:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005458:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	Wheel_Speed3_Last_Error = Wheel_Speed3_Error;
 800545c:	4a35      	ldr	r2, [pc, #212]	; (8005534 <PID_Controller+0x204>)
 800545e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005460:	6013      	str	r3, [r2, #0]
	Controlled_Wheel_Speed.WheelSpeed_3 = 	(PROPORTIONAL * Wheel_Speed3_Error) +
 8005462:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005466:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800551c <PID_Controller+0x1ec>
 800546a:	ee27 7a87 	vmul.f32	s14, s15, s14
											(INTEGRAL * Wheel_Speed3_Integral_Error) +
 800546e:	4b30      	ldr	r3, [pc, #192]	; (8005530 <PID_Controller+0x200>)
 8005470:	edd3 7a00 	vldr	s15, [r3]
 8005474:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8005520 <PID_Controller+0x1f0>
 8005478:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Controlled_Wheel_Speed.WheelSpeed_3 = 	(PROPORTIONAL * Wheel_Speed3_Error) +
 800547c:	ee37 7a27 	vadd.f32	s14, s14, s15
											(DIFFERENTIAL * Wheel_Speed3_Differential_Error);
 8005480:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005484:	eddf 6a27 	vldr	s13, [pc, #156]	; 8005524 <PID_Controller+0x1f4>
 8005488:	ee67 7aa6 	vmul.f32	s15, s15, s13
											(INTEGRAL * Wheel_Speed3_Integral_Error) +
 800548c:	ee77 7a27 	vadd.f32	s15, s14, s15
	Controlled_Wheel_Speed.WheelSpeed_3 = 	(PROPORTIONAL * Wheel_Speed3_Error) +
 8005490:	edc7 7a02 	vstr	s15, [r7, #8]

	Wheel_Speed4_Error = Target_Wheel_Speed.WheelSpeed_4 - Current_Wheel_Speed.WheelSpeed_4;
 8005494:	ed97 7a07 	vldr	s14, [r7, #28]
 8005498:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800549c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054a0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	Wheel_Speed4_Integral_Error = Wheel_Speed4_Integral_Error + Wheel_Speed4_Error;
 80054a4:	4b24      	ldr	r3, [pc, #144]	; (8005538 <PID_Controller+0x208>)
 80054a6:	ed93 7a00 	vldr	s14, [r3]
 80054aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80054ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054b2:	4b21      	ldr	r3, [pc, #132]	; (8005538 <PID_Controller+0x208>)
 80054b4:	edc3 7a00 	vstr	s15, [r3]
	Wheel_Speed4_Differential_Error = Wheel_Speed4_Error - Wheel_Speed4_Last_Error;
 80054b8:	4b20      	ldr	r3, [pc, #128]	; (800553c <PID_Controller+0x20c>)
 80054ba:	edd3 7a00 	vldr	s15, [r3]
 80054be:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80054c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054c6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	Wheel_Speed4_Last_Error = Wheel_Speed4_Error;
 80054ca:	4a1c      	ldr	r2, [pc, #112]	; (800553c <PID_Controller+0x20c>)
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	6013      	str	r3, [r2, #0]
	Controlled_Wheel_Speed.WheelSpeed_4 = 	(PROPORTIONAL * Wheel_Speed4_Error) +
 80054d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80054d4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800551c <PID_Controller+0x1ec>
 80054d8:	ee27 7a87 	vmul.f32	s14, s15, s14
											(INTEGRAL * Wheel_Speed4_Integral_Error) +
 80054dc:	4b16      	ldr	r3, [pc, #88]	; (8005538 <PID_Controller+0x208>)
 80054de:	edd3 7a00 	vldr	s15, [r3]
 80054e2:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005520 <PID_Controller+0x1f0>
 80054e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Controlled_Wheel_Speed.WheelSpeed_4 = 	(PROPORTIONAL * Wheel_Speed4_Error) +
 80054ea:	ee37 7a27 	vadd.f32	s14, s14, s15
											(DIFFERENTIAL * Wheel_Speed4_Differential_Error);
 80054ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80054f2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8005524 <PID_Controller+0x1f4>
 80054f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
											(INTEGRAL * Wheel_Speed4_Integral_Error) +
 80054fa:	ee77 7a27 	vadd.f32	s15, s14, s15
	Controlled_Wheel_Speed.WheelSpeed_4 = 	(PROPORTIONAL * Wheel_Speed4_Error) +
 80054fe:	edc7 7a03 	vstr	s15, [r7, #12]

	Write_Controlled_Wheel_Speeds(&Controlled_Wheel_Speed);
 8005502:	463b      	mov	r3, r7
 8005504:	4618      	mov	r0, r3
 8005506:	f001 fc1f 	bl	8006d48 <Write_Controlled_Wheel_Speeds>

}
 800550a:	bf00      	nop
 800550c:	3750      	adds	r7, #80	; 0x50
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000038 	.word	0x20000038
 8005518:	2000003c 	.word	0x2000003c
 800551c:	410ccccc 	.word	0x410ccccc
 8005520:	3c449ba6 	.word	0x3c449ba6
 8005524:	3b03126f 	.word	0x3b03126f
 8005528:	20000040 	.word	0x20000040
 800552c:	20000044 	.word	0x20000044
 8005530:	20000048 	.word	0x20000048
 8005534:	2000004c 	.word	0x2000004c
 8005538:	20000050 	.word	0x20000050
 800553c:	20000054 	.word	0x20000054

08005540 <Calculate_Wheel_Speeds>:
#include "WheelSpeedCalculation.h"
#include "Common_Data.h"
#include <math.h>

void Calculate_Wheel_Speeds(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
	WheelSpeed_Typedef Calculated_wheel_speeds;
	RobotSpeed_Typedef Robot_speed;

	Read_Received_Robot_Speed(&Robot_speed);
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	4618      	mov	r0, r3
 800554a:	f001 fb19 	bl	8006b80 <Read_Received_Robot_Speed>


	Calculated_wheel_speeds.WheelSpeed_1 = 	((WHEEL_1_PARAMETER_1 * Robot_speed.Speed_X) +
 800554e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005552:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005620 <Calculate_Wheel_Speeds+0xe0>
 8005556:	ee27 7a87 	vmul.f32	s14, s15, s14
											(WHEEL_1_PARAMETER_2 * Robot_speed.Speed_Y) +
 800555a:	edd7 7a02 	vldr	s15, [r7, #8]
 800555e:	eddf 6a31 	vldr	s13, [pc, #196]	; 8005624 <Calculate_Wheel_Speeds+0xe4>
 8005562:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Calculated_wheel_speeds.WheelSpeed_1 = 	((WHEEL_1_PARAMETER_1 * Robot_speed.Speed_X) +
 8005566:	ee37 7a27 	vadd.f32	s14, s14, s15
											(ROBOT_RADIUS * Robot_speed.Angular_Speed));
 800556a:	edd7 7a03 	vldr	s15, [r7, #12]
 800556e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8005628 <Calculate_Wheel_Speeds+0xe8>
 8005572:	ee67 7aa6 	vmul.f32	s15, s15, s13
											(WHEEL_1_PARAMETER_2 * Robot_speed.Speed_Y) +
 8005576:	ee77 7a27 	vadd.f32	s15, s14, s15
	Calculated_wheel_speeds.WheelSpeed_1 = 	((WHEEL_1_PARAMETER_1 * Robot_speed.Speed_X) +
 800557a:	edc7 7a04 	vstr	s15, [r7, #16]

	Calculated_wheel_speeds.WheelSpeed_2 = 	((WHEEL_2_PARAMETER_1 * Robot_speed.Speed_X) +
 800557e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005582:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800562c <Calculate_Wheel_Speeds+0xec>
 8005586:	ee27 7a87 	vmul.f32	s14, s15, s14
											(WHEEL_2_PARAMETER_2 * Robot_speed.Speed_Y) +
 800558a:	edd7 7a02 	vldr	s15, [r7, #8]
 800558e:	eddf 6a28 	vldr	s13, [pc, #160]	; 8005630 <Calculate_Wheel_Speeds+0xf0>
 8005592:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Calculated_wheel_speeds.WheelSpeed_2 = 	((WHEEL_2_PARAMETER_1 * Robot_speed.Speed_X) +
 8005596:	ee37 7a27 	vadd.f32	s14, s14, s15
											(ROBOT_RADIUS * Robot_speed.Angular_Speed));
 800559a:	edd7 7a03 	vldr	s15, [r7, #12]
 800559e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8005628 <Calculate_Wheel_Speeds+0xe8>
 80055a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
											(WHEEL_2_PARAMETER_2 * Robot_speed.Speed_Y) +
 80055a6:	ee77 7a27 	vadd.f32	s15, s14, s15
	Calculated_wheel_speeds.WheelSpeed_2 = 	((WHEEL_2_PARAMETER_1 * Robot_speed.Speed_X) +
 80055aa:	edc7 7a05 	vstr	s15, [r7, #20]

	Calculated_wheel_speeds.WheelSpeed_3 = 	((WHEEL_3_PARAMETER_1 * Robot_speed.Speed_X) +
 80055ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80055b2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005634 <Calculate_Wheel_Speeds+0xf4>
 80055b6:	ee27 7a87 	vmul.f32	s14, s15, s14
											(WHEEL_3_PARAMETER_2 * Robot_speed.Speed_Y) +
 80055ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80055be:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8005638 <Calculate_Wheel_Speeds+0xf8>
 80055c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Calculated_wheel_speeds.WheelSpeed_3 = 	((WHEEL_3_PARAMETER_1 * Robot_speed.Speed_X) +
 80055c6:	ee37 7a27 	vadd.f32	s14, s14, s15
											(ROBOT_RADIUS * Robot_speed.Angular_Speed));
 80055ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80055ce:	eddf 6a16 	vldr	s13, [pc, #88]	; 8005628 <Calculate_Wheel_Speeds+0xe8>
 80055d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
											(WHEEL_3_PARAMETER_2 * Robot_speed.Speed_Y) +
 80055d6:	ee77 7a27 	vadd.f32	s15, s14, s15
	Calculated_wheel_speeds.WheelSpeed_3 = 	((WHEEL_3_PARAMETER_1 * Robot_speed.Speed_X) +
 80055da:	edc7 7a06 	vstr	s15, [r7, #24]

	Calculated_wheel_speeds.WheelSpeed_4 = 	((WHEEL_4_PARAMETER_1 * Robot_speed.Speed_X) +
 80055de:	edd7 7a01 	vldr	s15, [r7, #4]
 80055e2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800563c <Calculate_Wheel_Speeds+0xfc>
 80055e6:	ee27 7a87 	vmul.f32	s14, s15, s14
											(WHEEL_4_PARAMETER_2 * Robot_speed.Speed_Y) +
 80055ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80055ee:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005640 <Calculate_Wheel_Speeds+0x100>
 80055f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Calculated_wheel_speeds.WheelSpeed_4 = 	((WHEEL_4_PARAMETER_1 * Robot_speed.Speed_X) +
 80055f6:	ee37 7a27 	vadd.f32	s14, s14, s15
											(ROBOT_RADIUS * Robot_speed.Angular_Speed));
 80055fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80055fe:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005628 <Calculate_Wheel_Speeds+0xe8>
 8005602:	ee67 7aa6 	vmul.f32	s15, s15, s13
											(WHEEL_4_PARAMETER_2 * Robot_speed.Speed_Y) +
 8005606:	ee77 7a27 	vadd.f32	s15, s14, s15
	Calculated_wheel_speeds.WheelSpeed_4 = 	((WHEEL_4_PARAMETER_1 * Robot_speed.Speed_X) +
 800560a:	edc7 7a07 	vstr	s15, [r7, #28]

	Write_Calculated_Wheel_Speeds(&Calculated_wheel_speeds);
 800560e:	f107 0310 	add.w	r3, r7, #16
 8005612:	4618      	mov	r0, r3
 8005614:	f001 fb50 	bl	8006cb8 <Write_Calculated_Wheel_Speeds>

}
 8005618:	bf00      	nop
 800561a:	3720      	adds	r7, #32
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	bf3504f7 	.word	0xbf3504f7
 8005624:	3f3504ef 	.word	0x3f3504ef
 8005628:	3d99999a 	.word	0x3d99999a
 800562c:	bf3504e8 	.word	0xbf3504e8
 8005630:	bf3504ff 	.word	0xbf3504ff
 8005634:	3f350506 	.word	0x3f350506
 8005638:	bf3504e0 	.word	0xbf3504e0
 800563c:	bf5b6f55 	.word	0xbf5b6f55
 8005640:	3f03d982 	.word	0x3f03d982

08005644 <Init_Wheel_Speed_Provision>:
volatile uint32_t Enc1_value;
volatile uint32_t Enc1_value_old;
volatile uint32_t Enc1_diff;

void Init_Wheel_Speed_Provision(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af02      	add	r7, sp, #8
	TIM_ENC_Typedef TIM_handler = {0};
 800564a:	463b      	mov	r3, r7
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	60da      	str	r2, [r3, #12]
 8005656:	611a      	str	r2, [r3, #16]
 8005658:	615a      	str	r2, [r3, #20]

	#ifdef MOTOR1
		TIM_handler.TIMx = ENC_1A_TIM;
 800565a:	4b16      	ldr	r3, [pc, #88]	; (80056b4 <Init_Wheel_Speed_Provision+0x70>)
 800565c:	603b      	str	r3, [r7, #0]
		TIM_handler.TIM_channelx = ENC_1A_TIM_CHANNEL;
 800565e:	2300      	movs	r3, #0
 8005660:	80bb      	strh	r3, [r7, #4]
		TIM_handler.GPIOx_ch1 = ENC_1A_GPIO;
 8005662:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005666:	60bb      	str	r3, [r7, #8]
		TIM_handler.GPIOx_ch2 = ENC_1B_GPIO;
 8005668:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800566c:	60fb      	str	r3, [r7, #12]
		TIM_handler.GPIO_Pinx_ch1 = ENC_1A_GPIO_PIN;
 800566e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005672:	823b      	strh	r3, [r7, #16]
		TIM_handler.GPIO_Pinx_ch2 = ENC_1B_GPIO_PIN;
 8005674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005678:	827b      	strh	r3, [r7, #18]
		TIM_handler.GPIO_AlternateFunctionx = ENC_1A_GPIO_AF;
 800567a:	2301      	movs	r3, #1
 800567c:	753b      	strb	r3, [r7, #20]

		TIMx_ENC_Init(TIM_handler);
 800567e:	466a      	mov	r2, sp
 8005680:	f107 0310 	add.w	r3, r7, #16
 8005684:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005688:	e882 0003 	stmia.w	r2, {r0, r1}
 800568c:	463b      	mov	r3, r7
 800568e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005690:	f7fb f9c0 	bl	8000a14 <TIMx_ENC_Init>
		TIMx_ENC_Start(TIM_handler);
 8005694:	466a      	mov	r2, sp
 8005696:	f107 0310 	add.w	r3, r7, #16
 800569a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800569e:	e882 0003 	stmia.w	r2, {r0, r1}
 80056a2:	463b      	mov	r3, r7
 80056a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056a6:	f7fb faed 	bl	8000c84 <TIMx_ENC_Start>
		TIM_handler.GPIO_AlternateFunctionx = ENC_2A_GPIO_AF;

		TIMx_ENC_Init(TIM_handler);
		TIMx_ENC_Start(TIM_handler);
	#endif
}
 80056aa:	bf00      	nop
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40012c00 	.word	0x40012c00

080056b8 <Provide_Wheel_Speeds>:


void Provide_Wheel_Speeds(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
	WheelSpeed_Typedef Provided_wheel_speeds;
	int Direction = POSITIVE;
 80056be:	2301      	movs	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]
	uint8_t isEnc1_ok=FALSE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	74fb      	strb	r3, [r7, #19]
	Enc1_value_old = Enc1_value;
 80056c6:	4b3b      	ldr	r3, [pc, #236]	; (80057b4 <Provide_Wheel_Speeds+0xfc>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a3b      	ldr	r2, [pc, #236]	; (80057b8 <Provide_Wheel_Speeds+0x100>)
 80056cc:	6013      	str	r3, [r2, #0]
	Enc1_value = ENC_1_TIM_CNT;
 80056ce:	4b3b      	ldr	r3, [pc, #236]	; (80057bc <Provide_Wheel_Speeds+0x104>)
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	4a38      	ldr	r2, [pc, #224]	; (80057b4 <Provide_Wheel_Speeds+0xfc>)
 80056d4:	6013      	str	r3, [r2, #0]
	if((ENC_1_TIM_DIR == FORWARD_DIR) && (Enc1_value < Enc1_value_old))
 80056d6:	4b39      	ldr	r3, [pc, #228]	; (80057bc <Provide_Wheel_Speeds+0x104>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d110      	bne.n	8005704 <Provide_Wheel_Speeds+0x4c>
 80056e2:	4b34      	ldr	r3, [pc, #208]	; (80057b4 <Provide_Wheel_Speeds+0xfc>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b34      	ldr	r3, [pc, #208]	; (80057b8 <Provide_Wheel_Speeds+0x100>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d20a      	bcs.n	8005704 <Provide_Wheel_Speeds+0x4c>
	{
		Enc1_diff = Enc1_value - (0xFFFF - Enc1_value_old);
 80056ee:	4b32      	ldr	r3, [pc, #200]	; (80057b8 <Provide_Wheel_Speeds+0x100>)
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	4b30      	ldr	r3, [pc, #192]	; (80057b4 <Provide_Wheel_Speeds+0xfc>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4413      	add	r3, r2
 80056f8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80056fc:	3bff      	subs	r3, #255	; 0xff
 80056fe:	4a30      	ldr	r2, [pc, #192]	; (80057c0 <Provide_Wheel_Speeds+0x108>)
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	e031      	b.n	8005768 <Provide_Wheel_Speeds+0xb0>
	}
	else if((ENC_1_TIM_DIR == BACKWARD_DIR) && (Enc1_value > Enc1_value_old))
 8005704:	4b2d      	ldr	r3, [pc, #180]	; (80057bc <Provide_Wheel_Speeds+0x104>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b10      	cmp	r3, #16
 800570e:	d113      	bne.n	8005738 <Provide_Wheel_Speeds+0x80>
 8005710:	4b28      	ldr	r3, [pc, #160]	; (80057b4 <Provide_Wheel_Speeds+0xfc>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4b28      	ldr	r3, [pc, #160]	; (80057b8 <Provide_Wheel_Speeds+0x100>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d90d      	bls.n	8005738 <Provide_Wheel_Speeds+0x80>
	{
		Enc1_diff = Enc1_value_old - (0xFFFF - Enc1_value);
 800571c:	4b25      	ldr	r3, [pc, #148]	; (80057b4 <Provide_Wheel_Speeds+0xfc>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4b25      	ldr	r3, [pc, #148]	; (80057b8 <Provide_Wheel_Speeds+0x100>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4413      	add	r3, r2
 8005726:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800572a:	3bff      	subs	r3, #255	; 0xff
 800572c:	4a24      	ldr	r2, [pc, #144]	; (80057c0 <Provide_Wheel_Speeds+0x108>)
 800572e:	6013      	str	r3, [r2, #0]
		Direction=NEGATIVE;
 8005730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	e017      	b.n	8005768 <Provide_Wheel_Speeds+0xb0>
	}
	else if(ENC_1_TIM_DIR == BACKWARD_DIR)
 8005738:	4b20      	ldr	r3, [pc, #128]	; (80057bc <Provide_Wheel_Speeds+0x104>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	2b10      	cmp	r3, #16
 8005742:	d10a      	bne.n	800575a <Provide_Wheel_Speeds+0xa2>
	{
		Enc1_diff = Enc1_value_old - Enc1_value;
 8005744:	4b1c      	ldr	r3, [pc, #112]	; (80057b8 <Provide_Wheel_Speeds+0x100>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4b1a      	ldr	r3, [pc, #104]	; (80057b4 <Provide_Wheel_Speeds+0xfc>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <Provide_Wheel_Speeds+0x108>)
 8005750:	6013      	str	r3, [r2, #0]
		Direction=NEGATIVE;
 8005752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e006      	b.n	8005768 <Provide_Wheel_Speeds+0xb0>
	}
	else
	{
		Enc1_diff = Enc1_value - Enc1_value_old;
 800575a:	4b16      	ldr	r3, [pc, #88]	; (80057b4 <Provide_Wheel_Speeds+0xfc>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <Provide_Wheel_Speeds+0x100>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	4a16      	ldr	r2, [pc, #88]	; (80057c0 <Provide_Wheel_Speeds+0x108>)
 8005766:	6013      	str	r3, [r2, #0]
	}
	if(MIN_LIMIT <= Enc1_diff && MAX_LIMIT >= Enc1_diff)
 8005768:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <Provide_Wheel_Speeds+0x108>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4b14      	ldr	r3, [pc, #80]	; (80057c0 <Provide_Wheel_Speeds+0x108>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b28      	cmp	r3, #40	; 0x28
 8005772:	d814      	bhi.n	800579e <Provide_Wheel_Speeds+0xe6>
	{

		Provided_wheel_speeds.WheelSpeed_1= Enc1_diff * ANG_SPD_TO_METER_PER_SEC * Direction;
 8005774:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <Provide_Wheel_Speeds+0x108>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	ee07 3a90 	vmov	s15, r3
 800577c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005780:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80057c4 <Provide_Wheel_Speeds+0x10c>
 8005784:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005796:	edc7 7a00 	vstr	s15, [r7]
		isEnc1_ok=TRUE;
 800579a:	2301      	movs	r3, #1
 800579c:	74fb      	strb	r3, [r7, #19]
	}


	if(TRUE == isEnc1_ok)
 800579e:	7cfb      	ldrb	r3, [r7, #19]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d103      	bne.n	80057ac <Provide_Wheel_Speeds+0xf4>
	{
		Write_Provided_Wheel_Speeds(&Provided_wheel_speeds);
 80057a4:	463b      	mov	r3, r7
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 faaa 	bl	8006d00 <Write_Provided_Wheel_Speeds>
	}

}
 80057ac:	bf00      	nop
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20001420 	.word	0x20001420
 80057b8:	2000141c 	.word	0x2000141c
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	20001418 	.word	0x20001418
 80057c4:	3d029709 	.word	0x3d029709

080057c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80057d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057da:	2b84      	cmp	r3, #132	; 0x84
 80057dc:	d005      	beq.n	80057ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80057de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	3303      	adds	r3, #3
 80057e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80057ea:	68fb      	ldr	r3, [r7, #12]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80057fc:	f000 fa82 	bl	8005d04 <vTaskStartScheduler>
  
  return osOK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	bd80      	pop	{r7, pc}

08005806 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005808:	b087      	sub	sp, #28
 800580a:	af02      	add	r7, sp, #8
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685c      	ldr	r4, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800581c:	b29e      	uxth	r6, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff ffcf 	bl	80057c8 <makeFreeRtosPriority>
 800582a:	4602      	mov	r2, r0
 800582c:	f107 030c 	add.w	r3, r7, #12
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	9200      	str	r2, [sp, #0]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	4632      	mov	r2, r6
 8005838:	4629      	mov	r1, r5
 800583a:	4620      	mov	r0, r4
 800583c:	f000 f8be 	bl	80059bc <xTaskCreate>
 8005840:	4603      	mov	r3, r0
 8005842:	2b01      	cmp	r3, #1
 8005844:	d001      	beq.n	800584a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8005846:	2300      	movs	r3, #0
 8005848:	e000      	b.n	800584c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800584a:	68fb      	ldr	r3, [r7, #12]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005854 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f103 0208 	add.w	r2, r3, #8
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800586c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f103 0208 	add.w	r2, r3, #8
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f103 0208 	add.w	r2, r3, #8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058ae:	b480      	push	{r7}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058f6:	b480      	push	{r7}
 80058f8:	b085      	sub	sp, #20
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800590c:	d103      	bne.n	8005916 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	e00c      	b.n	8005930 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3308      	adds	r3, #8
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	e002      	b.n	8005924 <vListInsert+0x2e>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	429a      	cmp	r2, r3
 800592e:	d2f6      	bcs.n	800591e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	601a      	str	r2, [r3, #0]
}
 800595c:	bf00      	nop
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6892      	ldr	r2, [r2, #8]
 800597e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6852      	ldr	r2, [r2, #4]
 8005988:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	429a      	cmp	r2, r3
 8005992:	d103      	bne.n	800599c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	1e5a      	subs	r2, r3, #1
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08c      	sub	sp, #48	; 0x30
 80059c0:	af04      	add	r7, sp, #16
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	4613      	mov	r3, r2
 80059ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fecf 	bl	8006774 <pvPortMalloc>
 80059d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00e      	beq.n	80059fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80059de:	2054      	movs	r0, #84	; 0x54
 80059e0:	f000 fec8 	bl	8006774 <pvPortMalloc>
 80059e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
 80059f2:	e005      	b.n	8005a00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059f4:	6978      	ldr	r0, [r7, #20]
 80059f6:	f000 ff7f 	bl	80068f8 <vPortFree>
 80059fa:	e001      	b.n	8005a00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d013      	beq.n	8005a2e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a06:	88fa      	ldrh	r2, [r7, #6]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9303      	str	r3, [sp, #12]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	9302      	str	r3, [sp, #8]
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f80e 	bl	8005a3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a22:	69f8      	ldr	r0, [r7, #28]
 8005a24:	f000 f88a 	bl	8005b3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	e002      	b.n	8005a34 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a34:	69bb      	ldr	r3, [r7, #24]
	}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b088      	sub	sp, #32
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a56:	3b01      	subs	r3, #1
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	f023 0307 	bic.w	r3, r3, #7
 8005a64:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d009      	beq.n	8005a84 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e7fe      	b.n	8005a82 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	e012      	b.n	8005ab0 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	7819      	ldrb	r1, [r3, #0]
 8005a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	4413      	add	r3, r2
 8005a98:	3334      	adds	r3, #52	; 0x34
 8005a9a:	460a      	mov	r2, r1
 8005a9c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d006      	beq.n	8005ab8 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	3301      	adds	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	2b0f      	cmp	r3, #15
 8005ab4:	d9e9      	bls.n	8005a8a <prvInitialiseNewTask+0x4c>
 8005ab6:	e000      	b.n	8005aba <prvInitialiseNewTask+0x7c>
		{
			break;
 8005ab8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	2b06      	cmp	r3, #6
 8005ac6:	d901      	bls.n	8005acc <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ac8:	2306      	movs	r3, #6
 8005aca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ad0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ad6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	2200      	movs	r2, #0
 8005adc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fed6 	bl	8005894 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	3318      	adds	r3, #24
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff fed1 	bl	8005894 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	f1c3 0207 	rsb	r2, r3, #7
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	68f9      	ldr	r1, [r7, #12]
 8005b1a:	69b8      	ldr	r0, [r7, #24]
 8005b1c:	f000 fc28 	bl	8006370 <pxPortInitialiseStack>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b32:	bf00      	nop
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b44:	f000 fd3a 	bl	80065bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b48:	4b2a      	ldr	r3, [pc, #168]	; (8005bf4 <prvAddNewTaskToReadyList+0xb8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	4a29      	ldr	r2, [pc, #164]	; (8005bf4 <prvAddNewTaskToReadyList+0xb8>)
 8005b50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b52:	4b29      	ldr	r3, [pc, #164]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d109      	bne.n	8005b6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b5a:	4a27      	ldr	r2, [pc, #156]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b60:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <prvAddNewTaskToReadyList+0xb8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d110      	bne.n	8005b8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b68:	f000 fafa 	bl	8006160 <prvInitialiseTaskLists>
 8005b6c:	e00d      	b.n	8005b8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b6e:	4b23      	ldr	r3, [pc, #140]	; (8005bfc <prvAddNewTaskToReadyList+0xc0>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d109      	bne.n	8005b8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b76:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d802      	bhi.n	8005b8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b84:	4a1c      	ldr	r2, [pc, #112]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b8a:	4b1d      	ldr	r3, [pc, #116]	; (8005c00 <prvAddNewTaskToReadyList+0xc4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	4a1b      	ldr	r2, [pc, #108]	; (8005c00 <prvAddNewTaskToReadyList+0xc4>)
 8005b92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	2201      	movs	r2, #1
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	4b19      	ldr	r3, [pc, #100]	; (8005c04 <prvAddNewTaskToReadyList+0xc8>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <prvAddNewTaskToReadyList+0xc8>)
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <prvAddNewTaskToReadyList+0xcc>)
 8005bb4:	441a      	add	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	f7ff fe76 	bl	80058ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bc2:	f000 fd29 	bl	8006618 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <prvAddNewTaskToReadyList+0xc0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00e      	beq.n	8005bec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bce:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d207      	bcs.n	8005bec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <prvAddNewTaskToReadyList+0xd0>)
 8005bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20000158 	.word	0x20000158
 8005bf8:	20000058 	.word	0x20000058
 8005bfc:	20000164 	.word	0x20000164
 8005c00:	20000174 	.word	0x20000174
 8005c04:	20000160 	.word	0x20000160
 8005c08:	2000005c 	.word	0x2000005c
 8005c0c:	e000ed04 	.word	0xe000ed04

08005c10 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08a      	sub	sp, #40	; 0x28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <vTaskDelayUntil+0x28>
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e7fe      	b.n	8005c36 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <vTaskDelayUntil+0x42>
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	e7fe      	b.n	8005c50 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8005c52:	4b29      	ldr	r3, [pc, #164]	; (8005cf8 <vTaskDelayUntil+0xe8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <vTaskDelayUntil+0x5e>
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	e7fe      	b.n	8005c6c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005c6e:	f000 f88f 	bl	8005d90 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005c72:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <vTaskDelayUntil+0xec>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	4413      	add	r3, r2
 8005c80:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6a3a      	ldr	r2, [r7, #32]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d20b      	bcs.n	8005ca4 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d211      	bcs.n	8005cba <vTaskDelayUntil+0xaa>
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d90d      	bls.n	8005cba <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca2:	e00a      	b.n	8005cba <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d303      	bcc.n	8005cb6 <vTaskDelayUntil+0xa6>
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d901      	bls.n	8005cba <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d006      	beq.n	8005cd4 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2100      	movs	r1, #0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fae8 	bl	80062a4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005cd4:	f000 f86a 	bl	8005dac <xTaskResumeAll>
 8005cd8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d107      	bne.n	8005cf0 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8005ce0:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <vTaskDelayUntil+0xf0>)
 8005ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cf0:	bf00      	nop
 8005cf2:	3728      	adds	r7, #40	; 0x28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20000180 	.word	0x20000180
 8005cfc:	2000015c 	.word	0x2000015c
 8005d00:	e000ed04 	.word	0xe000ed04

08005d04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005d0a:	4b1b      	ldr	r3, [pc, #108]	; (8005d78 <vTaskStartScheduler+0x74>)
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	2300      	movs	r3, #0
 8005d14:	2280      	movs	r2, #128	; 0x80
 8005d16:	4919      	ldr	r1, [pc, #100]	; (8005d7c <vTaskStartScheduler+0x78>)
 8005d18:	4819      	ldr	r0, [pc, #100]	; (8005d80 <vTaskStartScheduler+0x7c>)
 8005d1a:	f7ff fe4f 	bl	80059bc <xTaskCreate>
 8005d1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d115      	bne.n	8005d52 <vTaskStartScheduler+0x4e>
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d38:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <vTaskStartScheduler+0x80>)
 8005d3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d40:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <vTaskStartScheduler+0x84>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005d46:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <vTaskStartScheduler+0x88>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d4c:	f000 fb98 	bl	8006480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d50:	e00d      	b.n	8005d6e <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d58:	d109      	bne.n	8005d6e <vTaskStartScheduler+0x6a>
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	607b      	str	r3, [r7, #4]
 8005d6c:	e7fe      	b.n	8005d6c <vTaskStartScheduler+0x68>
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	2000017c 	.word	0x2000017c
 8005d7c:	080073a4 	.word	0x080073a4
 8005d80:	08006131 	.word	0x08006131
 8005d84:	20000178 	.word	0x20000178
 8005d88:	20000164 	.word	0x20000164
 8005d8c:	2000015c 	.word	0x2000015c

08005d90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d94:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <vTaskSuspendAll+0x18>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	4a03      	ldr	r2, [pc, #12]	; (8005da8 <vTaskSuspendAll+0x18>)
 8005d9c:	6013      	str	r3, [r2, #0]
}
 8005d9e:	bf00      	nop
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	20000180 	.word	0x20000180

08005dac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005dba:	4b41      	ldr	r3, [pc, #260]	; (8005ec0 <xTaskResumeAll+0x114>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <xTaskResumeAll+0x2a>
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	e7fe      	b.n	8005dd4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005dd6:	f000 fbf1 	bl	80065bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005dda:	4b39      	ldr	r3, [pc, #228]	; (8005ec0 <xTaskResumeAll+0x114>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	4a37      	ldr	r2, [pc, #220]	; (8005ec0 <xTaskResumeAll+0x114>)
 8005de2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de4:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <xTaskResumeAll+0x114>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d161      	bne.n	8005eb0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005dec:	4b35      	ldr	r3, [pc, #212]	; (8005ec4 <xTaskResumeAll+0x118>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d05d      	beq.n	8005eb0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005df4:	e02e      	b.n	8005e54 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005df6:	4b34      	ldr	r3, [pc, #208]	; (8005ec8 <xTaskResumeAll+0x11c>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3318      	adds	r3, #24
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fdb0 	bl	8005968 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fdab 	bl	8005968 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	2201      	movs	r2, #1
 8005e18:	409a      	lsls	r2, r3
 8005e1a:	4b2c      	ldr	r3, [pc, #176]	; (8005ecc <xTaskResumeAll+0x120>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	4a2a      	ldr	r2, [pc, #168]	; (8005ecc <xTaskResumeAll+0x120>)
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4a27      	ldr	r2, [pc, #156]	; (8005ed0 <xTaskResumeAll+0x124>)
 8005e32:	441a      	add	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f7ff fd37 	bl	80058ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e44:	4b23      	ldr	r3, [pc, #140]	; (8005ed4 <xTaskResumeAll+0x128>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d302      	bcc.n	8005e54 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005e4e:	4b22      	ldr	r3, [pc, #136]	; (8005ed8 <xTaskResumeAll+0x12c>)
 8005e50:	2201      	movs	r2, #1
 8005e52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e54:	4b1c      	ldr	r3, [pc, #112]	; (8005ec8 <xTaskResumeAll+0x11c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1cc      	bne.n	8005df6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e62:	f000 f9f9 	bl	8006258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e66:	4b1d      	ldr	r3, [pc, #116]	; (8005edc <xTaskResumeAll+0x130>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d010      	beq.n	8005e94 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e72:	f000 f847 	bl	8005f04 <xTaskIncrementTick>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005e7c:	4b16      	ldr	r3, [pc, #88]	; (8005ed8 <xTaskResumeAll+0x12c>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f1      	bne.n	8005e72 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005e8e:	4b13      	ldr	r3, [pc, #76]	; (8005edc <xTaskResumeAll+0x130>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e94:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <xTaskResumeAll+0x12c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d009      	beq.n	8005eb0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ea0:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <xTaskResumeAll+0x134>)
 8005ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005eb0:	f000 fbb2 	bl	8006618 <vPortExitCritical>

	return xAlreadyYielded;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000180 	.word	0x20000180
 8005ec4:	20000158 	.word	0x20000158
 8005ec8:	20000118 	.word	0x20000118
 8005ecc:	20000160 	.word	0x20000160
 8005ed0:	2000005c 	.word	0x2000005c
 8005ed4:	20000058 	.word	0x20000058
 8005ed8:	2000016c 	.word	0x2000016c
 8005edc:	20000168 	.word	0x20000168
 8005ee0:	e000ed04 	.word	0xe000ed04

08005ee4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005eea:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <xTaskGetTickCount+0x1c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ef0:	687b      	ldr	r3, [r7, #4]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	2000015c 	.word	0x2000015c

08005f04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f0e:	4b50      	ldr	r3, [pc, #320]	; (8006050 <xTaskIncrementTick+0x14c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f040 808c 	bne.w	8006030 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f18:	4b4e      	ldr	r3, [pc, #312]	; (8006054 <xTaskIncrementTick+0x150>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f20:	4a4c      	ldr	r2, [pc, #304]	; (8006054 <xTaskIncrementTick+0x150>)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d11f      	bne.n	8005f6c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f2c:	4b4a      	ldr	r3, [pc, #296]	; (8006058 <xTaskIncrementTick+0x154>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <xTaskIncrementTick+0x46>
 8005f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	e7fe      	b.n	8005f48 <xTaskIncrementTick+0x44>
 8005f4a:	4b43      	ldr	r3, [pc, #268]	; (8006058 <xTaskIncrementTick+0x154>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	4b42      	ldr	r3, [pc, #264]	; (800605c <xTaskIncrementTick+0x158>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a40      	ldr	r2, [pc, #256]	; (8006058 <xTaskIncrementTick+0x154>)
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	4a40      	ldr	r2, [pc, #256]	; (800605c <xTaskIncrementTick+0x158>)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	4b40      	ldr	r3, [pc, #256]	; (8006060 <xTaskIncrementTick+0x15c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3301      	adds	r3, #1
 8005f64:	4a3e      	ldr	r2, [pc, #248]	; (8006060 <xTaskIncrementTick+0x15c>)
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	f000 f976 	bl	8006258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f6c:	4b3d      	ldr	r3, [pc, #244]	; (8006064 <xTaskIncrementTick+0x160>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d34d      	bcc.n	8006012 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f76:	4b38      	ldr	r3, [pc, #224]	; (8006058 <xTaskIncrementTick+0x154>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <xTaskIncrementTick+0x80>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <xTaskIncrementTick+0x82>
 8005f84:	2300      	movs	r3, #0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d004      	beq.n	8005f94 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f8a:	4b36      	ldr	r3, [pc, #216]	; (8006064 <xTaskIncrementTick+0x160>)
 8005f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f90:	601a      	str	r2, [r3, #0]
					break;
 8005f92:	e03e      	b.n	8006012 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f94:	4b30      	ldr	r3, [pc, #192]	; (8006058 <xTaskIncrementTick+0x154>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d203      	bcs.n	8005fb4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fac:	4a2d      	ldr	r2, [pc, #180]	; (8006064 <xTaskIncrementTick+0x160>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6013      	str	r3, [r2, #0]
						break;
 8005fb2:	e02e      	b.n	8006012 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff fcd5 	bl	8005968 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3318      	adds	r3, #24
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff fccc 	bl	8005968 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	4b23      	ldr	r3, [pc, #140]	; (8006068 <xTaskIncrementTick+0x164>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	4a22      	ldr	r2, [pc, #136]	; (8006068 <xTaskIncrementTick+0x164>)
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4a1f      	ldr	r2, [pc, #124]	; (800606c <xTaskIncrementTick+0x168>)
 8005ff0:	441a      	add	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f7ff fc58 	bl	80058ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006002:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <xTaskIncrementTick+0x16c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	429a      	cmp	r2, r3
 800600a:	d3b4      	bcc.n	8005f76 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800600c:	2301      	movs	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006010:	e7b1      	b.n	8005f76 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006012:	4b17      	ldr	r3, [pc, #92]	; (8006070 <xTaskIncrementTick+0x16c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006018:	4914      	ldr	r1, [pc, #80]	; (800606c <xTaskIncrementTick+0x168>)
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d907      	bls.n	800603a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800602a:	2301      	movs	r3, #1
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	e004      	b.n	800603a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006030:	4b10      	ldr	r3, [pc, #64]	; (8006074 <xTaskIncrementTick+0x170>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3301      	adds	r3, #1
 8006036:	4a0f      	ldr	r2, [pc, #60]	; (8006074 <xTaskIncrementTick+0x170>)
 8006038:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800603a:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <xTaskIncrementTick+0x174>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006042:	2301      	movs	r3, #1
 8006044:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006046:	697b      	ldr	r3, [r7, #20]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20000180 	.word	0x20000180
 8006054:	2000015c 	.word	0x2000015c
 8006058:	20000110 	.word	0x20000110
 800605c:	20000114 	.word	0x20000114
 8006060:	20000170 	.word	0x20000170
 8006064:	20000178 	.word	0x20000178
 8006068:	20000160 	.word	0x20000160
 800606c:	2000005c 	.word	0x2000005c
 8006070:	20000058 	.word	0x20000058
 8006074:	20000168 	.word	0x20000168
 8006078:	2000016c 	.word	0x2000016c

0800607c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006082:	4b26      	ldr	r3, [pc, #152]	; (800611c <vTaskSwitchContext+0xa0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800608a:	4b25      	ldr	r3, [pc, #148]	; (8006120 <vTaskSwitchContext+0xa4>)
 800608c:	2201      	movs	r2, #1
 800608e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006090:	e03e      	b.n	8006110 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006092:	4b23      	ldr	r3, [pc, #140]	; (8006120 <vTaskSwitchContext+0xa4>)
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006098:	4b22      	ldr	r3, [pc, #136]	; (8006124 <vTaskSwitchContext+0xa8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	fab3 f383 	clz	r3, r3
 80060a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060a6:	7afb      	ldrb	r3, [r7, #11]
 80060a8:	f1c3 031f 	rsb	r3, r3, #31
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	491e      	ldr	r1, [pc, #120]	; (8006128 <vTaskSwitchContext+0xac>)
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4613      	mov	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	440b      	add	r3, r1
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	607b      	str	r3, [r7, #4]
 80060d4:	e7fe      	b.n	80060d4 <vTaskSwitchContext+0x58>
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4a11      	ldr	r2, [pc, #68]	; (8006128 <vTaskSwitchContext+0xac>)
 80060e2:	4413      	add	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	605a      	str	r2, [r3, #4]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	3308      	adds	r3, #8
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d104      	bne.n	8006106 <vTaskSwitchContext+0x8a>
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	4a07      	ldr	r2, [pc, #28]	; (800612c <vTaskSwitchContext+0xb0>)
 800610e:	6013      	str	r3, [r2, #0]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	20000180 	.word	0x20000180
 8006120:	2000016c 	.word	0x2000016c
 8006124:	20000160 	.word	0x20000160
 8006128:	2000005c 	.word	0x2000005c
 800612c:	20000058 	.word	0x20000058

08006130 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006138:	f000 f852 	bl	80061e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <prvIdleTask+0x28>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d9f9      	bls.n	8006138 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <prvIdleTask+0x2c>)
 8006146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006154:	e7f0      	b.n	8006138 <prvIdleTask+0x8>
 8006156:	bf00      	nop
 8006158:	2000005c 	.word	0x2000005c
 800615c:	e000ed04 	.word	0xe000ed04

08006160 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006166:	2300      	movs	r3, #0
 8006168:	607b      	str	r3, [r7, #4]
 800616a:	e00c      	b.n	8006186 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4a12      	ldr	r2, [pc, #72]	; (80061c0 <prvInitialiseTaskLists+0x60>)
 8006178:	4413      	add	r3, r2
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fb6a 	bl	8005854 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3301      	adds	r3, #1
 8006184:	607b      	str	r3, [r7, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b06      	cmp	r3, #6
 800618a:	d9ef      	bls.n	800616c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800618c:	480d      	ldr	r0, [pc, #52]	; (80061c4 <prvInitialiseTaskLists+0x64>)
 800618e:	f7ff fb61 	bl	8005854 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006192:	480d      	ldr	r0, [pc, #52]	; (80061c8 <prvInitialiseTaskLists+0x68>)
 8006194:	f7ff fb5e 	bl	8005854 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006198:	480c      	ldr	r0, [pc, #48]	; (80061cc <prvInitialiseTaskLists+0x6c>)
 800619a:	f7ff fb5b 	bl	8005854 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800619e:	480c      	ldr	r0, [pc, #48]	; (80061d0 <prvInitialiseTaskLists+0x70>)
 80061a0:	f7ff fb58 	bl	8005854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061a4:	480b      	ldr	r0, [pc, #44]	; (80061d4 <prvInitialiseTaskLists+0x74>)
 80061a6:	f7ff fb55 	bl	8005854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061aa:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <prvInitialiseTaskLists+0x78>)
 80061ac:	4a05      	ldr	r2, [pc, #20]	; (80061c4 <prvInitialiseTaskLists+0x64>)
 80061ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <prvInitialiseTaskLists+0x7c>)
 80061b2:	4a05      	ldr	r2, [pc, #20]	; (80061c8 <prvInitialiseTaskLists+0x68>)
 80061b4:	601a      	str	r2, [r3, #0]
}
 80061b6:	bf00      	nop
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	2000005c 	.word	0x2000005c
 80061c4:	200000e8 	.word	0x200000e8
 80061c8:	200000fc 	.word	0x200000fc
 80061cc:	20000118 	.word	0x20000118
 80061d0:	2000012c 	.word	0x2000012c
 80061d4:	20000144 	.word	0x20000144
 80061d8:	20000110 	.word	0x20000110
 80061dc:	20000114 	.word	0x20000114

080061e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061e6:	e019      	b.n	800621c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061e8:	f000 f9e8 	bl	80065bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80061ec:	4b0f      	ldr	r3, [pc, #60]	; (800622c <prvCheckTasksWaitingTermination+0x4c>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3304      	adds	r3, #4
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fbb5 	bl	8005968 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061fe:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <prvCheckTasksWaitingTermination+0x50>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3b01      	subs	r3, #1
 8006204:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <prvCheckTasksWaitingTermination+0x50>)
 8006206:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <prvCheckTasksWaitingTermination+0x54>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3b01      	subs	r3, #1
 800620e:	4a09      	ldr	r2, [pc, #36]	; (8006234 <prvCheckTasksWaitingTermination+0x54>)
 8006210:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006212:	f000 fa01 	bl	8006618 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f80e 	bl	8006238 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800621c:	4b05      	ldr	r3, [pc, #20]	; (8006234 <prvCheckTasksWaitingTermination+0x54>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e1      	bne.n	80061e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	2000012c 	.word	0x2000012c
 8006230:	20000158 	.word	0x20000158
 8006234:	20000140 	.word	0x20000140

08006238 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fb57 	bl	80068f8 <vPortFree>
			vPortFree( pxTCB );
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fb54 	bl	80068f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800625e:	4b0f      	ldr	r3, [pc, #60]	; (800629c <prvResetNextTaskUnblockTime+0x44>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <prvResetNextTaskUnblockTime+0x14>
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <prvResetNextTaskUnblockTime+0x16>
 800626c:	2300      	movs	r3, #0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006272:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <prvResetNextTaskUnblockTime+0x48>)
 8006274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006278:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800627a:	e008      	b.n	800628e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800627c:	4b07      	ldr	r3, [pc, #28]	; (800629c <prvResetNextTaskUnblockTime+0x44>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4a05      	ldr	r2, [pc, #20]	; (80062a0 <prvResetNextTaskUnblockTime+0x48>)
 800628c:	6013      	str	r3, [r2, #0]
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	20000110 	.word	0x20000110
 80062a0:	20000178 	.word	0x20000178

080062a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062ae:	4b29      	ldr	r3, [pc, #164]	; (8006354 <prvAddCurrentTaskToDelayedList+0xb0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062b4:	4b28      	ldr	r3, [pc, #160]	; (8006358 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff fb54 	bl	8005968 <uxListRemove>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10b      	bne.n	80062de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80062c6:	4b24      	ldr	r3, [pc, #144]	; (8006358 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	2201      	movs	r2, #1
 80062ce:	fa02 f303 	lsl.w	r3, r2, r3
 80062d2:	43da      	mvns	r2, r3
 80062d4:	4b21      	ldr	r3, [pc, #132]	; (800635c <prvAddCurrentTaskToDelayedList+0xb8>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4013      	ands	r3, r2
 80062da:	4a20      	ldr	r2, [pc, #128]	; (800635c <prvAddCurrentTaskToDelayedList+0xb8>)
 80062dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e4:	d10a      	bne.n	80062fc <prvAddCurrentTaskToDelayedList+0x58>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ec:	4b1a      	ldr	r3, [pc, #104]	; (8006358 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4619      	mov	r1, r3
 80062f4:	481a      	ldr	r0, [pc, #104]	; (8006360 <prvAddCurrentTaskToDelayedList+0xbc>)
 80062f6:	f7ff fada 	bl	80058ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062fa:	e026      	b.n	800634a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4413      	add	r3, r2
 8006302:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006304:	4b14      	ldr	r3, [pc, #80]	; (8006358 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	429a      	cmp	r2, r3
 8006312:	d209      	bcs.n	8006328 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006314:	4b13      	ldr	r3, [pc, #76]	; (8006364 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <prvAddCurrentTaskToDelayedList+0xb4>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3304      	adds	r3, #4
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f7ff fae8 	bl	80058f6 <vListInsert>
}
 8006326:	e010      	b.n	800634a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006328:	4b0f      	ldr	r3, [pc, #60]	; (8006368 <prvAddCurrentTaskToDelayedList+0xc4>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <prvAddCurrentTaskToDelayedList+0xb4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3304      	adds	r3, #4
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f7ff fade 	bl	80058f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800633a:	4b0c      	ldr	r3, [pc, #48]	; (800636c <prvAddCurrentTaskToDelayedList+0xc8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	429a      	cmp	r2, r3
 8006342:	d202      	bcs.n	800634a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006344:	4a09      	ldr	r2, [pc, #36]	; (800636c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	6013      	str	r3, [r2, #0]
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	2000015c 	.word	0x2000015c
 8006358:	20000058 	.word	0x20000058
 800635c:	20000160 	.word	0x20000160
 8006360:	20000144 	.word	0x20000144
 8006364:	20000114 	.word	0x20000114
 8006368:	20000110 	.word	0x20000110
 800636c:	20000178 	.word	0x20000178

08006370 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3b04      	subs	r3, #4
 8006380:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3b04      	subs	r3, #4
 800638e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f023 0201 	bic.w	r2, r3, #1
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3b04      	subs	r3, #4
 800639e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063a0:	4a0c      	ldr	r2, [pc, #48]	; (80063d4 <pxPortInitialiseStack+0x64>)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3b14      	subs	r3, #20
 80063aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3b04      	subs	r3, #4
 80063b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f06f 0202 	mvn.w	r2, #2
 80063be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3b20      	subs	r3, #32
 80063c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063c6:	68fb      	ldr	r3, [r7, #12]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	080063d9 	.word	0x080063d9

080063d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063de:	2300      	movs	r3, #0
 80063e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <prvTaskExitError+0x50>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ea:	d009      	beq.n	8006400 <prvTaskExitError+0x28>
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e7fe      	b.n	80063fe <prvTaskExitError+0x26>
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006412:	bf00      	nop
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0fc      	beq.n	8006414 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	20000008 	.word	0x20000008
 800642c:	00000000 	.word	0x00000000

08006430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006430:	4b07      	ldr	r3, [pc, #28]	; (8006450 <pxCurrentTCBConst2>)
 8006432:	6819      	ldr	r1, [r3, #0]
 8006434:	6808      	ldr	r0, [r1, #0]
 8006436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643a:	f380 8809 	msr	PSP, r0
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f04f 0000 	mov.w	r0, #0
 8006446:	f380 8811 	msr	BASEPRI, r0
 800644a:	4770      	bx	lr
 800644c:	f3af 8000 	nop.w

08006450 <pxCurrentTCBConst2>:
 8006450:	20000058 	.word	0x20000058
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop

08006458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006458:	4808      	ldr	r0, [pc, #32]	; (800647c <prvPortStartFirstTask+0x24>)
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	6800      	ldr	r0, [r0, #0]
 800645e:	f380 8808 	msr	MSP, r0
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	f380 8814 	msr	CONTROL, r0
 800646a:	b662      	cpsie	i
 800646c:	b661      	cpsie	f
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	df00      	svc	0
 8006478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800647a:	bf00      	nop
 800647c:	e000ed08 	.word	0xe000ed08

08006480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006486:	4b44      	ldr	r3, [pc, #272]	; (8006598 <xPortStartScheduler+0x118>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a44      	ldr	r2, [pc, #272]	; (800659c <xPortStartScheduler+0x11c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d109      	bne.n	80064a4 <xPortStartScheduler+0x24>
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	e7fe      	b.n	80064a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064a4:	4b3c      	ldr	r3, [pc, #240]	; (8006598 <xPortStartScheduler+0x118>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a3d      	ldr	r2, [pc, #244]	; (80065a0 <xPortStartScheduler+0x120>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d109      	bne.n	80064c2 <xPortStartScheduler+0x42>
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e7fe      	b.n	80064c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064c2:	4b38      	ldr	r3, [pc, #224]	; (80065a4 <xPortStartScheduler+0x124>)
 80064c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	22ff      	movs	r2, #255	; 0xff
 80064d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064dc:	78fb      	ldrb	r3, [r7, #3]
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	4b30      	ldr	r3, [pc, #192]	; (80065a8 <xPortStartScheduler+0x128>)
 80064e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064ea:	4b30      	ldr	r3, [pc, #192]	; (80065ac <xPortStartScheduler+0x12c>)
 80064ec:	2207      	movs	r2, #7
 80064ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064f0:	e009      	b.n	8006506 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80064f2:	4b2e      	ldr	r3, [pc, #184]	; (80065ac <xPortStartScheduler+0x12c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	4a2c      	ldr	r2, [pc, #176]	; (80065ac <xPortStartScheduler+0x12c>)
 80064fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	b2db      	uxtb	r3, r3
 8006504:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650e:	2b80      	cmp	r3, #128	; 0x80
 8006510:	d0ef      	beq.n	80064f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006512:	4b26      	ldr	r3, [pc, #152]	; (80065ac <xPortStartScheduler+0x12c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1c3 0307 	rsb	r3, r3, #7
 800651a:	2b04      	cmp	r3, #4
 800651c:	d009      	beq.n	8006532 <xPortStartScheduler+0xb2>
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	60bb      	str	r3, [r7, #8]
 8006530:	e7fe      	b.n	8006530 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006532:	4b1e      	ldr	r3, [pc, #120]	; (80065ac <xPortStartScheduler+0x12c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	021b      	lsls	r3, r3, #8
 8006538:	4a1c      	ldr	r2, [pc, #112]	; (80065ac <xPortStartScheduler+0x12c>)
 800653a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800653c:	4b1b      	ldr	r3, [pc, #108]	; (80065ac <xPortStartScheduler+0x12c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006544:	4a19      	ldr	r2, [pc, #100]	; (80065ac <xPortStartScheduler+0x12c>)
 8006546:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	b2da      	uxtb	r2, r3
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006550:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <xPortStartScheduler+0x130>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a16      	ldr	r2, [pc, #88]	; (80065b0 <xPortStartScheduler+0x130>)
 8006556:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800655a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800655c:	4b14      	ldr	r3, [pc, #80]	; (80065b0 <xPortStartScheduler+0x130>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <xPortStartScheduler+0x130>)
 8006562:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006566:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006568:	f000 f8d6 	bl	8006718 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800656c:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <xPortStartScheduler+0x134>)
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006572:	f000 f8f5 	bl	8006760 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <xPortStartScheduler+0x138>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <xPortStartScheduler+0x138>)
 800657c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006580:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006582:	f7ff ff69 	bl	8006458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006586:	f7ff fd79 	bl	800607c <vTaskSwitchContext>
	prvTaskExitError();
 800658a:	f7ff ff25 	bl	80063d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	e000ed00 	.word	0xe000ed00
 800659c:	410fc271 	.word	0x410fc271
 80065a0:	410fc270 	.word	0x410fc270
 80065a4:	e000e400 	.word	0xe000e400
 80065a8:	20000184 	.word	0x20000184
 80065ac:	20000188 	.word	0x20000188
 80065b0:	e000ed20 	.word	0xe000ed20
 80065b4:	20000008 	.word	0x20000008
 80065b8:	e000ef34 	.word	0xe000ef34

080065bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065d4:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <vPortEnterCritical+0x54>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3301      	adds	r3, #1
 80065da:	4a0d      	ldr	r2, [pc, #52]	; (8006610 <vPortEnterCritical+0x54>)
 80065dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065de:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <vPortEnterCritical+0x54>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d10e      	bne.n	8006604 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e6:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <vPortEnterCritical+0x58>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <vPortEnterCritical+0x48>
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	603b      	str	r3, [r7, #0]
 8006602:	e7fe      	b.n	8006602 <vPortEnterCritical+0x46>
	}
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	20000008 	.word	0x20000008
 8006614:	e000ed04 	.word	0xe000ed04

08006618 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800661e:	4b11      	ldr	r3, [pc, #68]	; (8006664 <vPortExitCritical+0x4c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d109      	bne.n	800663a <vPortExitCritical+0x22>
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	607b      	str	r3, [r7, #4]
 8006638:	e7fe      	b.n	8006638 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800663a:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <vPortExitCritical+0x4c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3b01      	subs	r3, #1
 8006640:	4a08      	ldr	r2, [pc, #32]	; (8006664 <vPortExitCritical+0x4c>)
 8006642:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006644:	4b07      	ldr	r3, [pc, #28]	; (8006664 <vPortExitCritical+0x4c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <vPortExitCritical+0x3e>
 800664c:	2300      	movs	r3, #0
 800664e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	20000008 	.word	0x20000008
	...

08006670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006670:	f3ef 8009 	mrs	r0, PSP
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <pxCurrentTCBConst>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	f01e 0f10 	tst.w	lr, #16
 8006680:	bf08      	it	eq
 8006682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	6010      	str	r0, [r2, #0]
 800668c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006694:	f380 8811 	msr	BASEPRI, r0
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f7ff fcec 	bl	800607c <vTaskSwitchContext>
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	f380 8811 	msr	BASEPRI, r0
 80066ac:	bc09      	pop	{r0, r3}
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b6:	f01e 0f10 	tst.w	lr, #16
 80066ba:	bf08      	it	eq
 80066bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066c0:	f380 8809 	msr	PSP, r0
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst>:
 80066d0:	20000058 	.word	0x20000058
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066f0:	f7ff fc08 	bl	8005f04 <xTaskIncrementTick>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <SysTick_Handler+0x3c>)
 80066fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	2300      	movs	r3, #0
 8006704:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800671c:	4b0b      	ldr	r3, [pc, #44]	; (800674c <vPortSetupTimerInterrupt+0x34>)
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006722:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <vPortSetupTimerInterrupt+0x38>)
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006728:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <vPortSetupTimerInterrupt+0x3c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a0a      	ldr	r2, [pc, #40]	; (8006758 <vPortSetupTimerInterrupt+0x40>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	099b      	lsrs	r3, r3, #6
 8006734:	4a09      	ldr	r2, [pc, #36]	; (800675c <vPortSetupTimerInterrupt+0x44>)
 8006736:	3b01      	subs	r3, #1
 8006738:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673a:	4b04      	ldr	r3, [pc, #16]	; (800674c <vPortSetupTimerInterrupt+0x34>)
 800673c:	2207      	movs	r2, #7
 800673e:	601a      	str	r2, [r3, #0]
}
 8006740:	bf00      	nop
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	e000e010 	.word	0xe000e010
 8006750:	e000e018 	.word	0xe000e018
 8006754:	20000010 	.word	0x20000010
 8006758:	10624dd3 	.word	0x10624dd3
 800675c:	e000e014 	.word	0xe000e014

08006760 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006760:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006770 <vPortEnableVFP+0x10>
 8006764:	6801      	ldr	r1, [r0, #0]
 8006766:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800676a:	6001      	str	r1, [r0, #0]
 800676c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800676e:	bf00      	nop
 8006770:	e000ed88 	.word	0xe000ed88

08006774 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08a      	sub	sp, #40	; 0x28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800677c:	2300      	movs	r3, #0
 800677e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006780:	f7ff fb06 	bl	8005d90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006784:	4b57      	ldr	r3, [pc, #348]	; (80068e4 <pvPortMalloc+0x170>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800678c:	f000 f90c 	bl	80069a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006790:	4b55      	ldr	r3, [pc, #340]	; (80068e8 <pvPortMalloc+0x174>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4013      	ands	r3, r2
 8006798:	2b00      	cmp	r3, #0
 800679a:	f040 808c 	bne.w	80068b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01c      	beq.n	80067de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80067a4:	2208      	movs	r2, #8
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4413      	add	r3, r2
 80067aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d013      	beq.n	80067de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f023 0307 	bic.w	r3, r3, #7
 80067bc:	3308      	adds	r3, #8
 80067be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <pvPortMalloc+0x6a>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	e7fe      	b.n	80067dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d068      	beq.n	80068b6 <pvPortMalloc+0x142>
 80067e4:	4b41      	ldr	r3, [pc, #260]	; (80068ec <pvPortMalloc+0x178>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d863      	bhi.n	80068b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067ee:	4b40      	ldr	r3, [pc, #256]	; (80068f0 <pvPortMalloc+0x17c>)
 80067f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067f2:	4b3f      	ldr	r3, [pc, #252]	; (80068f0 <pvPortMalloc+0x17c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067f8:	e004      	b.n	8006804 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	d903      	bls.n	8006816 <pvPortMalloc+0xa2>
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1f1      	bne.n	80067fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006816:	4b33      	ldr	r3, [pc, #204]	; (80068e4 <pvPortMalloc+0x170>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681c:	429a      	cmp	r2, r3
 800681e:	d04a      	beq.n	80068b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2208      	movs	r2, #8
 8006826:	4413      	add	r3, r2
 8006828:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	1ad2      	subs	r2, r2, r3
 800683a:	2308      	movs	r3, #8
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	429a      	cmp	r2, r3
 8006840:	d91e      	bls.n	8006880 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4413      	add	r3, r2
 8006848:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	2b00      	cmp	r3, #0
 8006852:	d009      	beq.n	8006868 <pvPortMalloc+0xf4>
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	613b      	str	r3, [r7, #16]
 8006866:	e7fe      	b.n	8006866 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	1ad2      	subs	r2, r2, r3
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800687a:	69b8      	ldr	r0, [r7, #24]
 800687c:	f000 f8f6 	bl	8006a6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006880:	4b1a      	ldr	r3, [pc, #104]	; (80068ec <pvPortMalloc+0x178>)
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	4a18      	ldr	r2, [pc, #96]	; (80068ec <pvPortMalloc+0x178>)
 800688c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800688e:	4b17      	ldr	r3, [pc, #92]	; (80068ec <pvPortMalloc+0x178>)
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <pvPortMalloc+0x180>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d203      	bcs.n	80068a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800689a:	4b14      	ldr	r3, [pc, #80]	; (80068ec <pvPortMalloc+0x178>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a15      	ldr	r2, [pc, #84]	; (80068f4 <pvPortMalloc+0x180>)
 80068a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <pvPortMalloc+0x174>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	431a      	orrs	r2, r3
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068b6:	f7ff fa79 	bl	8005dac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d009      	beq.n	80068d8 <pvPortMalloc+0x164>
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	e7fe      	b.n	80068d6 <pvPortMalloc+0x162>
	return pvReturn;
 80068d8:	69fb      	ldr	r3, [r7, #28]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3728      	adds	r7, #40	; 0x28
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000d4c 	.word	0x20000d4c
 80068e8:	20000d58 	.word	0x20000d58
 80068ec:	20000d50 	.word	0x20000d50
 80068f0:	20000d44 	.word	0x20000d44
 80068f4:	20000d54 	.word	0x20000d54

080068f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d046      	beq.n	8006998 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800690a:	2308      	movs	r3, #8
 800690c:	425b      	negs	r3, r3
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4413      	add	r3, r2
 8006912:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	4b20      	ldr	r3, [pc, #128]	; (80069a0 <vPortFree+0xa8>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4013      	ands	r3, r2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <vPortFree+0x42>
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	e7fe      	b.n	8006938 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d009      	beq.n	8006956 <vPortFree+0x5e>
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	60bb      	str	r3, [r7, #8]
 8006954:	e7fe      	b.n	8006954 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	4b11      	ldr	r3, [pc, #68]	; (80069a0 <vPortFree+0xa8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4013      	ands	r3, r2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d019      	beq.n	8006998 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d115      	bne.n	8006998 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <vPortFree+0xa8>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	43db      	mvns	r3, r3
 8006976:	401a      	ands	r2, r3
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800697c:	f7ff fa08 	bl	8005d90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	4b07      	ldr	r3, [pc, #28]	; (80069a4 <vPortFree+0xac>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4413      	add	r3, r2
 800698a:	4a06      	ldr	r2, [pc, #24]	; (80069a4 <vPortFree+0xac>)
 800698c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800698e:	6938      	ldr	r0, [r7, #16]
 8006990:	f000 f86c 	bl	8006a6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006994:	f7ff fa0a 	bl	8005dac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006998:	bf00      	nop
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20000d58 	.word	0x20000d58
 80069a4:	20000d50 	.word	0x20000d50

080069a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80069b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069b4:	4b27      	ldr	r3, [pc, #156]	; (8006a54 <prvHeapInit+0xac>)
 80069b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00c      	beq.n	80069dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3307      	adds	r3, #7
 80069c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0307 	bic.w	r3, r3, #7
 80069ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	4a1f      	ldr	r2, [pc, #124]	; (8006a54 <prvHeapInit+0xac>)
 80069d8:	4413      	add	r3, r2
 80069da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069e0:	4a1d      	ldr	r2, [pc, #116]	; (8006a58 <prvHeapInit+0xb0>)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069e6:	4b1c      	ldr	r3, [pc, #112]	; (8006a58 <prvHeapInit+0xb0>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069f4:	2208      	movs	r2, #8
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	1a9b      	subs	r3, r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0307 	bic.w	r3, r3, #7
 8006a02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <prvHeapInit+0xb4>)
 8006a08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a0a:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <prvHeapInit+0xb4>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a12:	4b12      	ldr	r3, [pc, #72]	; (8006a5c <prvHeapInit+0xb4>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2200      	movs	r2, #0
 8006a18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	1ad2      	subs	r2, r2, r3
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a28:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <prvHeapInit+0xb4>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	4a0a      	ldr	r2, [pc, #40]	; (8006a60 <prvHeapInit+0xb8>)
 8006a36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	4a09      	ldr	r2, [pc, #36]	; (8006a64 <prvHeapInit+0xbc>)
 8006a3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a40:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <prvHeapInit+0xc0>)
 8006a42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a46:	601a      	str	r2, [r3, #0]
}
 8006a48:	bf00      	nop
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	2000018c 	.word	0x2000018c
 8006a58:	20000d44 	.word	0x20000d44
 8006a5c:	20000d4c 	.word	0x20000d4c
 8006a60:	20000d54 	.word	0x20000d54
 8006a64:	20000d50 	.word	0x20000d50
 8006a68:	20000d58 	.word	0x20000d58

08006a6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a74:	4b28      	ldr	r3, [pc, #160]	; (8006b18 <prvInsertBlockIntoFreeList+0xac>)
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	e002      	b.n	8006a80 <prvInsertBlockIntoFreeList+0x14>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d8f7      	bhi.n	8006a7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	4413      	add	r3, r2
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d108      	bne.n	8006aae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	441a      	add	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	441a      	add	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d118      	bne.n	8006af4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	4b15      	ldr	r3, [pc, #84]	; (8006b1c <prvInsertBlockIntoFreeList+0xb0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d00d      	beq.n	8006aea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	441a      	add	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	e008      	b.n	8006afc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006aea:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <prvInsertBlockIntoFreeList+0xb0>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	e003      	b.n	8006afc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d002      	beq.n	8006b0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b0a:	bf00      	nop
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	20000d44 	.word	0x20000d44
 8006b1c:	20000d4c 	.word	0x20000d4c

08006b20 <Write_IC_Channel1_Raw_data>:
{
	(* data) = Timer_IC_Channel1_Raw_data;
}

void Write_IC_Channel1_Raw_data(uint32_t * data)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel1_Raw_data = (* data);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a03      	ldr	r2, [pc, #12]	; (8006b3c <Write_IC_Channel1_Raw_data+0x1c>)
 8006b2e:	6013      	str	r3, [r2, #0]
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	20000d5c 	.word	0x20000d5c

08006b40 <Write_IC_Channel2_Raw_data>:
{
	(* data) = Timer_IC_Channel2_Raw_data;
}

void Write_IC_Channel2_Raw_data(uint32_t * data)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel2_Raw_data = (* data);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a03      	ldr	r2, [pc, #12]	; (8006b5c <Write_IC_Channel2_Raw_data+0x1c>)
 8006b4e:	6013      	str	r3, [r2, #0]
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	20000d60 	.word	0x20000d60

08006b60 <Write_IC_Channel3_Raw_data>:
{
	(* data) = Timer_IC_Channel3_Raw_data;
}

void Write_IC_Channel3_Raw_data(uint32_t * data)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel3_Raw_data = (* data);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a03      	ldr	r2, [pc, #12]	; (8006b7c <Write_IC_Channel3_Raw_data+0x1c>)
 8006b6e:	6013      	str	r3, [r2, #0]
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	20000d64 	.word	0x20000d64

08006b80 <Read_Received_Robot_Speed>:
{
	RemoteControl_Provided_Robot_Speed = (* data);
}

void Read_Received_Robot_Speed(RobotSpeed_Typedef * data)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	(* data) = CommunicationRxWrapper_Received_Robot_Speed;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a05      	ldr	r2, [pc, #20]	; (8006ba0 <Read_Received_Robot_Speed+0x20>)
 8006b8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	20000d6c 	.word	0x20000d6c

08006ba4 <Write_Received_Robot_Speed>:

void Write_Received_Robot_Speed(RobotSpeed_Typedef * data)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
	CommunicationRxWrapper_Received_Robot_Speed = (* data);
 8006bac:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <Write_Received_Robot_Speed+0x20>)
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8006bb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20000d6c 	.word	0x20000d6c

08006bc8 <Read_Transmit_Enabled>:

void Read_Transmit_Enabled(uint8_t * data)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
	(* data) = UART_Transmit_enabled;
 8006bd0:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <Read_Transmit_Enabled+0x20>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	701a      	strb	r2, [r3, #0]
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	20000d68 	.word	0x20000d68

08006bec <Write_Transmit_Enabled>:

void Write_Transmit_Enabled(uint8_t * data)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
	UART_Transmit_enabled = (* data);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	781a      	ldrb	r2, [r3, #0]
 8006bf8:	4b03      	ldr	r3, [pc, #12]	; (8006c08 <Write_Transmit_Enabled+0x1c>)
 8006bfa:	701a      	strb	r2, [r3, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	20000d68 	.word	0x20000d68

08006c0c <Read_Wifi_Connected>:

void Read_Wifi_Connected(uint8_t * data)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	(* data) = CommunicationRxWrapper_WIFI_Connected;
 8006c14:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <Read_Wifi_Connected+0x20>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	701a      	strb	r2, [r3, #0]
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	20000d69 	.word	0x20000d69

08006c30 <Write_Wifi_Connected>:

void Write_Wifi_Connected(uint8_t * data)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
	CommunicationRxWrapper_WIFI_Connected = (* data);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	781a      	ldrb	r2, [r3, #0]
 8006c3c:	4b03      	ldr	r3, [pc, #12]	; (8006c4c <Write_Wifi_Connected+0x1c>)
 8006c3e:	701a      	strb	r2, [r3, #0]
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	20000d69 	.word	0x20000d69

08006c50 <Read_Connection_Estabilished>:

void Read_Connection_Estabilished(uint8_t * data)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	(* data) = CommunicationRxWrapper_Connection_Estabilished;
 8006c58:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <Read_Connection_Estabilished+0x20>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	701a      	strb	r2, [r3, #0]
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	20000d6a 	.word	0x20000d6a

08006c74 <Write_Connection_Estabilished>:

void Write_Connection_Estabilished(uint8_t * data)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	CommunicationRxWrapper_Connection_Estabilished = (* data);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	781a      	ldrb	r2, [r3, #0]
 8006c80:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <Write_Connection_Estabilished+0x1c>)
 8006c82:	701a      	strb	r2, [r3, #0]
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	20000d6a 	.word	0x20000d6a

08006c94 <Read_Calculated_Wheel_Speeds>:

void Read_Calculated_Wheel_Speeds(WheelSpeed_Typedef * data)
{
 8006c94:	b490      	push	{r4, r7}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	(* data) = WheelSpeedCalculation_Calculated_WheelSpeeds;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a05      	ldr	r2, [pc, #20]	; (8006cb4 <Read_Calculated_Wheel_Speeds+0x20>)
 8006ca0:	461c      	mov	r4, r3
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ca6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc90      	pop	{r4, r7}
 8006cb2:	4770      	bx	lr
 8006cb4:	20000d78 	.word	0x20000d78

08006cb8 <Write_Calculated_Wheel_Speeds>:

void Write_Calculated_Wheel_Speeds(WheelSpeed_Typedef * data)
{
 8006cb8:	b490      	push	{r4, r7}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
	WheelSpeedCalculation_Calculated_WheelSpeeds = (* data);
 8006cc0:	4a05      	ldr	r2, [pc, #20]	; (8006cd8 <Write_Calculated_Wheel_Speeds+0x20>)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4614      	mov	r4, r2
 8006cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bc90      	pop	{r4, r7}
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	20000d78 	.word	0x20000d78

08006cdc <Read_Provided_Wheel_Speeds>:

void Read_Provided_Wheel_Speeds(WheelSpeed_Typedef * data)
{
 8006cdc:	b490      	push	{r4, r7}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	(* data) = WheelSpeedProvider_Calculated_WheelSpeeds;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a05      	ldr	r2, [pc, #20]	; (8006cfc <Read_Provided_Wheel_Speeds+0x20>)
 8006ce8:	461c      	mov	r4, r3
 8006cea:	4613      	mov	r3, r2
 8006cec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006cf2:	bf00      	nop
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc90      	pop	{r4, r7}
 8006cfa:	4770      	bx	lr
 8006cfc:	20000d88 	.word	0x20000d88

08006d00 <Write_Provided_Wheel_Speeds>:

void Write_Provided_Wheel_Speeds(WheelSpeed_Typedef * data)
{
 8006d00:	b490      	push	{r4, r7}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	WheelSpeedProvider_Calculated_WheelSpeeds = (* data);
 8006d08:	4a05      	ldr	r2, [pc, #20]	; (8006d20 <Write_Provided_Wheel_Speeds+0x20>)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006d14:	bf00      	nop
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bc90      	pop	{r4, r7}
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	20000d88 	.word	0x20000d88

08006d24 <Read_Controlled_Wheel_Speeds>:

void Read_Controlled_Wheel_Speeds(WheelSpeed_Typedef * data)
{
 8006d24:	b490      	push	{r4, r7}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
	(* data) = PID_Controller_Controlled_WheelSpeeds;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a05      	ldr	r2, [pc, #20]	; (8006d44 <Read_Controlled_Wheel_Speeds+0x20>)
 8006d30:	461c      	mov	r4, r3
 8006d32:	4613      	mov	r3, r2
 8006d34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006d3a:	bf00      	nop
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc90      	pop	{r4, r7}
 8006d42:	4770      	bx	lr
 8006d44:	20000d98 	.word	0x20000d98

08006d48 <Write_Controlled_Wheel_Speeds>:

void Write_Controlled_Wheel_Speeds(WheelSpeed_Typedef * data)
{
 8006d48:	b490      	push	{r4, r7}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	PID_Controller_Controlled_WheelSpeeds = (* data);
 8006d50:	4a05      	ldr	r2, [pc, #20]	; (8006d68 <Write_Controlled_Wheel_Speeds+0x20>)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4614      	mov	r4, r2
 8006d56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006d5c:	bf00      	nop
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc90      	pop	{r4, r7}
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	20000d98 	.word	0x20000d98

08006d6c <Init_System_Startup>:
#include "Initialize_System.h"

TIM_HandleTypeDef htim1;

void Init_System_Startup(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
	//WheelSpeed_Typedef Whl_spd;
	//Remote_Control_init();
	Init_Wheel_Speed_Provision();
 8006d70:	f7fe fc68 	bl	8005644 <Init_Wheel_Speed_Provision>
	Motor_Init();
 8006d74:	f7fe f962 	bl	800503c <Motor_Init>
	Motor_Stop();
 8006d78:	f7fe f9d8 	bl	800512c <Motor_Stop>
	Motor_Start();
 8006d7c:	f7fe f9aa 	bl	80050d4 <Motor_Start>

	//Calibrate_Remote_Control();
}
 8006d80:	bf00      	nop
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006d84:	b5b0      	push	{r4, r5, r7, lr}
 8006d86:	b090      	sub	sp, #64	; 0x40
 8006d88:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006d8a:	f7f9 ffb7 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006d8e:	f000 f85b 	bl	8006e48 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  Init_System_Startup();
 8006d92:	f7ff ffeb 	bl	8006d6c <Init_System_Startup>

  HAL_Delay(30000);
 8006d96:	f247 5030 	movw	r0, #30000	; 0x7530
 8006d9a:	f7f9 ffed 	bl	8000d78 <HAL_Delay>
  MX_GPIO_Init();
 8006d9e:	f000 f8f9 	bl	8006f94 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8006da2:	f000 f8c7 	bl	8006f34 <MX_USART3_UART_Init>

  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, RXBUFFERSIZE);
 8006da6:	2201      	movs	r2, #1
 8006da8:	491e      	ldr	r1, [pc, #120]	; (8006e24 <main+0xa0>)
 8006daa:	481f      	ldr	r0, [pc, #124]	; (8006e28 <main+0xa4>)
 8006dac:	f7fc ff52 	bl	8003c54 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart3, (uint8_t *)Startup_tx_message, 3);
 8006db0:	2203      	movs	r2, #3
 8006db2:	491e      	ldr	r1, [pc, #120]	; (8006e2c <main+0xa8>)
 8006db4:	481c      	ldr	r0, [pc, #112]	; (8006e28 <main+0xa4>)
 8006db6:	f7fc fef1 	bl	8003b9c <HAL_UART_Transmit_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MwPeriodicTask */
  osThreadDef(MwPeriodicTask, StartMwPeriodicTask, osPriorityNormal, 0, 128);
 8006dba:	4b1d      	ldr	r3, [pc, #116]	; (8006e30 <main+0xac>)
 8006dbc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8006dc0:	461d      	mov	r5, r3
 8006dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dc6:	682b      	ldr	r3, [r5, #0]
 8006dc8:	6023      	str	r3, [r4, #0]
  MwPeriodicTaskHandle = osThreadCreate(osThread(MwPeriodicTask), NULL);
 8006dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006dce:	2100      	movs	r1, #0
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fe fd18 	bl	8005806 <osThreadCreate>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	4b16      	ldr	r3, [pc, #88]	; (8006e34 <main+0xb0>)
 8006dda:	601a      	str	r2, [r3, #0]

  /* definition and creation of LowLevelPeriodi */
  osThreadDef(LowLevelPeriodi, StartLowLevelPeriodicTask, osPriorityRealtime, 0, 128);
 8006ddc:	4b16      	ldr	r3, [pc, #88]	; (8006e38 <main+0xb4>)
 8006dde:	f107 0418 	add.w	r4, r7, #24
 8006de2:	461d      	mov	r5, r3
 8006de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	6023      	str	r3, [r4, #0]
  LowLevelPeriodiHandle = osThreadCreate(osThread(LowLevelPeriodi), NULL);
 8006dec:	f107 0318 	add.w	r3, r7, #24
 8006df0:	2100      	movs	r1, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe fd07 	bl	8005806 <osThreadCreate>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	4b10      	ldr	r3, [pc, #64]	; (8006e3c <main+0xb8>)
 8006dfc:	601a      	str	r2, [r3, #0]

  /* definition and creation of AppPeriodicTask */
  osThreadDef(AppPeriodicTask, StartAppPeriodicTask, osPriorityAboveNormal, 0, 128);
 8006dfe:	4b10      	ldr	r3, [pc, #64]	; (8006e40 <main+0xbc>)
 8006e00:	1d3c      	adds	r4, r7, #4
 8006e02:	461d      	mov	r5, r3
 8006e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	6023      	str	r3, [r4, #0]
  AppPeriodicTaskHandle = osThreadCreate(osThread(AppPeriodicTask), NULL);
 8006e0c:	1d3b      	adds	r3, r7, #4
 8006e0e:	2100      	movs	r1, #0
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fe fcf8 	bl	8005806 <osThreadCreate>
 8006e16:	4602      	mov	r2, r0
 8006e18:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <main+0xc0>)
 8006e1a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8006e1c:	f7fe fcec 	bl	80057f8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006e20:	e7fe      	b.n	8006e20 <main+0x9c>
 8006e22:	bf00      	nop
 8006e24:	20000e00 	.word	0x20000e00
 8006e28:	20001424 	.word	0x20001424
 8006e2c:	2000000c 	.word	0x2000000c
 8006e30:	080073bc 	.word	0x080073bc
 8006e34:	200014a4 	.word	0x200014a4
 8006e38:	080073e0 	.word	0x080073e0
 8006e3c:	200014ac 	.word	0x200014ac
 8006e40:	08007404 	.word	0x08007404
 8006e44:	200014a8 	.word	0x200014a8

08006e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b0b8      	sub	sp, #224	; 0xe0
 8006e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006e52:	2244      	movs	r2, #68	; 0x44
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fa90 	bl	800737c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e5c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	605a      	str	r2, [r3, #4]
 8006e66:	609a      	str	r2, [r3, #8]
 8006e68:	60da      	str	r2, [r3, #12]
 8006e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e6c:	463b      	mov	r3, r7
 8006e6e:	2288      	movs	r2, #136	; 0x88
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fa82 	bl	800737c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006e78:	2302      	movs	r3, #2
 8006e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006e86:	2310      	movs	r3, #16
 8006e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006e92:	2302      	movs	r3, #2
 8006e94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 8006e9e:	2308      	movs	r3, #8
 8006ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006ea4:	2307      	movs	r3, #7
 8006ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006eaa:	2302      	movs	r3, #2
 8006eac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006eb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fa fac6 	bl	800144c <HAL_RCC_OscConfig>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006ec6:	f000 f8d9 	bl	800707c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006eca:	230f      	movs	r3, #15
 8006ecc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006edc:	2300      	movs	r3, #0
 8006ede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006ee8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006eec:	2103      	movs	r1, #3
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fa fe5c 	bl	8001bac <HAL_RCC_ClockConfig>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8006efa:	f000 f8bf 	bl	800707c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006efe:	2304      	movs	r3, #4
 8006f00:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006f02:	2300      	movs	r3, #0
 8006f04:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f06:	463b      	mov	r3, r7
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fb f885 	bl	8002018 <HAL_RCCEx_PeriphCLKConfig>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8006f14:	f000 f8b2 	bl	800707c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006f18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006f1c:	f7fa fa40 	bl	80013a0 <HAL_PWREx_ControlVoltageScaling>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8006f26:	f000 f8a9 	bl	800707c <Error_Handler>
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	37e0      	adds	r7, #224	; 0xe0
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
	...

08006f34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006f38:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <MX_USART3_UART_Init+0x58>)
 8006f3a:	4a15      	ldr	r2, [pc, #84]	; (8006f90 <MX_USART3_UART_Init+0x5c>)
 8006f3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006f3e:	4b13      	ldr	r3, [pc, #76]	; (8006f8c <MX_USART3_UART_Init+0x58>)
 8006f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006f46:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <MX_USART3_UART_Init+0x58>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <MX_USART3_UART_Init+0x58>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006f52:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <MX_USART3_UART_Init+0x58>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006f58:	4b0c      	ldr	r3, [pc, #48]	; (8006f8c <MX_USART3_UART_Init+0x58>)
 8006f5a:	220c      	movs	r2, #12
 8006f5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f5e:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <MX_USART3_UART_Init+0x58>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f64:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <MX_USART3_UART_Init+0x58>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f6a:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <MX_USART3_UART_Init+0x58>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <MX_USART3_UART_Init+0x58>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006f76:	4805      	ldr	r0, [pc, #20]	; (8006f8c <MX_USART3_UART_Init+0x58>)
 8006f78:	f7fc fdc2 	bl	8003b00 <HAL_UART_Init>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8006f82:	f000 f87b 	bl	800707c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006f86:	bf00      	nop
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20001424 	.word	0x20001424
 8006f90:	40004800 	.word	0x40004800

08006f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f9a:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <MX_GPIO_Init+0x44>)
 8006f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9e:	4a0e      	ldr	r2, [pc, #56]	; (8006fd8 <MX_GPIO_Init+0x44>)
 8006fa0:	f043 0304 	orr.w	r3, r3, #4
 8006fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fa6:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <MX_GPIO_Init+0x44>)
 8006fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006faa:	f003 0304 	and.w	r3, r3, #4
 8006fae:	607b      	str	r3, [r7, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fb2:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <MX_GPIO_Init+0x44>)
 8006fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb6:	4a08      	ldr	r2, [pc, #32]	; (8006fd8 <MX_GPIO_Init+0x44>)
 8006fb8:	f043 0301 	orr.w	r3, r3, #1
 8006fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fbe:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <MX_GPIO_Init+0x44>)
 8006fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	683b      	ldr	r3, [r7, #0]

}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40021000 	.word	0x40021000

08006fdc <StartMwPeriodicTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartMwPeriodicTask */
void StartMwPeriodicTask(void const * argument)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
	//xLastWakeTime = xTaskGetTickCount();
  /* Infinite loop */
  for(;;)
  {
	//vTaskDelayUntil( &xLastWakeTime, xFrequency );
	CommunicationRxWrapper();
 8006fe4:	f7fd fe04 	bl	8004bf0 <CommunicationRxWrapper>
	CommunicationTxWrapper();
 8006fe8:	f7fd ff48 	bl	8004e7c <CommunicationTxWrapper>
	CommunicationRxWrapper();
 8006fec:	e7fa      	b.n	8006fe4 <StartMwPeriodicTask+0x8>

08006fee <StartLowLevelPeriodicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowLevelPeriodicTask */
void StartLowLevelPeriodicTask(void const * argument)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLowLevelPeriodicTask */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;
 8006ff6:	230a      	movs	r3, #10
 8006ff8:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8006ffa:	f7fe ff73 	bl	8005ee4 <xTaskGetTickCount>
 8006ffe:	4603      	mov	r3, r0
 8007000:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */

  for(;;)
  {
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8007002:	f107 0308 	add.w	r3, r7, #8
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe fe01 	bl	8005c10 <vTaskDelayUntil>
 800700e:	e7f8      	b.n	8007002 <StartLowLevelPeriodicTask+0x14>

08007010 <StartAppPeriodicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAppPeriodicTask */
void StartAppPeriodicTask(void const * argument)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAppPeriodicTask */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2 / portTICK_PERIOD_MS;
 8007018:	2302      	movs	r3, #2
 800701a:	61fb      	str	r3, [r7, #28]
	WheelSpeed_Typedef Provided_wheel_speeds;
	Provided_wheel_speeds.WheelSpeed_1=100;
 800701c:	4b0d      	ldr	r3, [pc, #52]	; (8007054 <StartAppPeriodicTask+0x44>)
 800701e:	60bb      	str	r3, [r7, #8]
	Write_Calculated_Wheel_Speeds(&Provided_wheel_speeds);
 8007020:	f107 0308 	add.w	r3, r7, #8
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff fe47 	bl	8006cb8 <Write_Calculated_Wheel_Speeds>
	Motorx_Set_Speed();
 800702a:	f7fe f8a3 	bl	8005174 <Motorx_Set_Speed>
		// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 800702e:	f7fe ff59 	bl	8005ee4 <xTaskGetTickCount>
 8007032:	4603      	mov	r3, r0
 8007034:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8007036:	f107 0318 	add.w	r3, r7, #24
 800703a:	69f9      	ldr	r1, [r7, #28]
 800703c:	4618      	mov	r0, r3
 800703e:	f7fe fde7 	bl	8005c10 <vTaskDelayUntil>

	  Calculate_Wheel_Speeds();
 8007042:	f7fe fa7d 	bl	8005540 <Calculate_Wheel_Speeds>
	  Provide_Wheel_Speeds();
 8007046:	f7fe fb37 	bl	80056b8 <Provide_Wheel_Speeds>
	  PID_Controller();
 800704a:	f7fe f971 	bl	8005330 <PID_Controller>
	  Motorx_Set_Speed();
 800704e:	f7fe f891 	bl	8005174 <Motorx_Set_Speed>
  {
 8007052:	e7f0      	b.n	8007036 <StartAppPeriodicTask+0x26>
 8007054:	42c80000 	.word	0x42c80000

08007058 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a04      	ldr	r2, [pc, #16]	; (8007078 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d101      	bne.n	800706e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800706a:	f7f9 fe67 	bl	8000d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800706e:	bf00      	nop
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	40001400 	.word	0x40001400

0800707c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1);
 8007080:	e7fe      	b.n	8007080 <Error_Handler+0x4>
	...

08007084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800708a:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <HAL_MspInit+0x4c>)
 800708c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800708e:	4a10      	ldr	r2, [pc, #64]	; (80070d0 <HAL_MspInit+0x4c>)
 8007090:	f043 0301 	orr.w	r3, r3, #1
 8007094:	6613      	str	r3, [r2, #96]	; 0x60
 8007096:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <HAL_MspInit+0x4c>)
 8007098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80070a2:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <HAL_MspInit+0x4c>)
 80070a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a6:	4a0a      	ldr	r2, [pc, #40]	; (80070d0 <HAL_MspInit+0x4c>)
 80070a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ac:	6593      	str	r3, [r2, #88]	; 0x58
 80070ae:	4b08      	ldr	r3, [pc, #32]	; (80070d0 <HAL_MspInit+0x4c>)
 80070b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80070ba:	2200      	movs	r2, #0
 80070bc:	210f      	movs	r1, #15
 80070be:	f06f 0001 	mvn.w	r0, #1
 80070c2:	f7f9 ff33 	bl	8000f2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80070c6:	bf00      	nop
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	40021000 	.word	0x40021000

080070d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08a      	sub	sp, #40	; 0x28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070dc:	f107 0314 	add.w	r3, r7, #20
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	605a      	str	r2, [r3, #4]
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	60da      	str	r2, [r3, #12]
 80070ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1b      	ldr	r2, [pc, #108]	; (8007160 <HAL_UART_MspInit+0x8c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d12f      	bne.n	8007156 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80070f6:	4b1b      	ldr	r3, [pc, #108]	; (8007164 <HAL_UART_MspInit+0x90>)
 80070f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fa:	4a1a      	ldr	r2, [pc, #104]	; (8007164 <HAL_UART_MspInit+0x90>)
 80070fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007100:	6593      	str	r3, [r2, #88]	; 0x58
 8007102:	4b18      	ldr	r3, [pc, #96]	; (8007164 <HAL_UART_MspInit+0x90>)
 8007104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800710e:	4b15      	ldr	r3, [pc, #84]	; (8007164 <HAL_UART_MspInit+0x90>)
 8007110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007112:	4a14      	ldr	r2, [pc, #80]	; (8007164 <HAL_UART_MspInit+0x90>)
 8007114:	f043 0304 	orr.w	r3, r3, #4
 8007118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800711a:	4b12      	ldr	r3, [pc, #72]	; (8007164 <HAL_UART_MspInit+0x90>)
 800711c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711e:	f003 0304 	and.w	r3, r3, #4
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007126:	2330      	movs	r3, #48	; 0x30
 8007128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800712a:	2302      	movs	r3, #2
 800712c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800712e:	2300      	movs	r3, #0
 8007130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007132:	2303      	movs	r3, #3
 8007134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007136:	2307      	movs	r3, #7
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800713a:	f107 0314 	add.w	r3, r7, #20
 800713e:	4619      	mov	r1, r3
 8007140:	4809      	ldr	r0, [pc, #36]	; (8007168 <HAL_UART_MspInit+0x94>)
 8007142:	f7f9 ff5f 	bl	8001004 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8007146:	2200      	movs	r2, #0
 8007148:	2105      	movs	r1, #5
 800714a:	2027      	movs	r0, #39	; 0x27
 800714c:	f7f9 feee 	bl	8000f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007150:	2027      	movs	r0, #39	; 0x27
 8007152:	f7f9 ff07 	bl	8000f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007156:	bf00      	nop
 8007158:	3728      	adds	r7, #40	; 0x28
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40004800 	.word	0x40004800
 8007164:	40021000 	.word	0x40021000
 8007168:	48000800 	.word	0x48000800

0800716c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08c      	sub	sp, #48	; 0x30
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 800717c:	2200      	movs	r2, #0
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	2037      	movs	r0, #55	; 0x37
 8007182:	f7f9 fed3 	bl	8000f2c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8007186:	2037      	movs	r0, #55	; 0x37
 8007188:	f7f9 feec 	bl	8000f64 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800718c:	4b1e      	ldr	r3, [pc, #120]	; (8007208 <HAL_InitTick+0x9c>)
 800718e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007190:	4a1d      	ldr	r2, [pc, #116]	; (8007208 <HAL_InitTick+0x9c>)
 8007192:	f043 0320 	orr.w	r3, r3, #32
 8007196:	6593      	str	r3, [r2, #88]	; 0x58
 8007198:	4b1b      	ldr	r3, [pc, #108]	; (8007208 <HAL_InitTick+0x9c>)
 800719a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80071a4:	f107 0210 	add.w	r2, r7, #16
 80071a8:	f107 0314 	add.w	r3, r7, #20
 80071ac:	4611      	mov	r1, r2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fa fea0 	bl	8001ef4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80071b4:	f7fa fe72 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 80071b8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80071ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071bc:	4a13      	ldr	r2, [pc, #76]	; (800720c <HAL_InitTick+0xa0>)
 80071be:	fba2 2303 	umull	r2, r3, r2, r3
 80071c2:	0c9b      	lsrs	r3, r3, #18
 80071c4:	3b01      	subs	r3, #1
 80071c6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80071c8:	4b11      	ldr	r3, [pc, #68]	; (8007210 <HAL_InitTick+0xa4>)
 80071ca:	4a12      	ldr	r2, [pc, #72]	; (8007214 <HAL_InitTick+0xa8>)
 80071cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80071ce:	4b10      	ldr	r3, [pc, #64]	; (8007210 <HAL_InitTick+0xa4>)
 80071d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80071d4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80071d6:	4a0e      	ldr	r2, [pc, #56]	; (8007210 <HAL_InitTick+0xa4>)
 80071d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071da:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80071dc:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <HAL_InitTick+0xa4>)
 80071de:	2200      	movs	r2, #0
 80071e0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071e2:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <HAL_InitTick+0xa4>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80071e8:	4809      	ldr	r0, [pc, #36]	; (8007210 <HAL_InitTick+0xa4>)
 80071ea:	f7fb fbc5 	bl	8002978 <HAL_TIM_Base_Init>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d104      	bne.n	80071fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80071f4:	4806      	ldr	r0, [pc, #24]	; (8007210 <HAL_InitTick+0xa4>)
 80071f6:	f7fb fbf5 	bl	80029e4 <HAL_TIM_Base_Start_IT>
 80071fa:	4603      	mov	r3, r0
 80071fc:	e000      	b.n	8007200 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
}
 8007200:	4618      	mov	r0, r3
 8007202:	3730      	adds	r7, #48	; 0x30
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40021000 	.word	0x40021000
 800720c:	431bde83 	.word	0x431bde83
 8007210:	200014b0 	.word	0x200014b0
 8007214:	40001400 	.word	0x40001400

08007218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800721c:	bf00      	nop
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007226:	b480      	push	{r7}
 8007228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800722a:	e7fe      	b.n	800722a <HardFault_Handler+0x4>

0800722c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007230:	e7fe      	b.n	8007230 <MemManage_Handler+0x4>

08007232 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007232:	b480      	push	{r7}
 8007234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007236:	e7fe      	b.n	8007236 <BusFault_Handler+0x4>

08007238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800723c:	e7fe      	b.n	800723c <UsageFault_Handler+0x4>

0800723e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800723e:	b480      	push	{r7}
 8007240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007242:	bf00      	nop
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007250:	4802      	ldr	r0, [pc, #8]	; (800725c <USART3_IRQHandler+0x10>)
 8007252:	f7fc fda1 	bl	8003d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007256:	bf00      	nop
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20001424 	.word	0x20001424

08007260 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007264:	4802      	ldr	r0, [pc, #8]	; (8007270 <TIM7_IRQHandler+0x10>)
 8007266:	f7fb fda2 	bl	8002dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800726a:	bf00      	nop
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	200014b0 	.word	0x200014b0

08007274 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007278:	4b17      	ldr	r3, [pc, #92]	; (80072d8 <SystemInit+0x64>)
 800727a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727e:	4a16      	ldr	r2, [pc, #88]	; (80072d8 <SystemInit+0x64>)
 8007280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007288:	4b14      	ldr	r3, [pc, #80]	; (80072dc <SystemInit+0x68>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a13      	ldr	r2, [pc, #76]	; (80072dc <SystemInit+0x68>)
 800728e:	f043 0301 	orr.w	r3, r3, #1
 8007292:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007294:	4b11      	ldr	r3, [pc, #68]	; (80072dc <SystemInit+0x68>)
 8007296:	2200      	movs	r2, #0
 8007298:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800729a:	4b10      	ldr	r3, [pc, #64]	; (80072dc <SystemInit+0x68>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a0f      	ldr	r2, [pc, #60]	; (80072dc <SystemInit+0x68>)
 80072a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80072a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80072a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80072aa:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <SystemInit+0x68>)
 80072ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80072b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80072b2:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <SystemInit+0x68>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a09      	ldr	r2, [pc, #36]	; (80072dc <SystemInit+0x68>)
 80072b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80072be:	4b07      	ldr	r3, [pc, #28]	; (80072dc <SystemInit+0x68>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80072c4:	4b04      	ldr	r3, [pc, #16]	; (80072d8 <SystemInit+0x64>)
 80072c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072ca:	609a      	str	r2, [r3, #8]
#endif
}
 80072cc:	bf00      	nop
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	e000ed00 	.word	0xe000ed00
 80072dc:	40021000 	.word	0x40021000

080072e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80072e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007318 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80072e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80072e6:	e003      	b.n	80072f0 <LoopCopyDataInit>

080072e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80072e8:	4b0c      	ldr	r3, [pc, #48]	; (800731c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80072ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80072ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80072ee:	3104      	adds	r1, #4

080072f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80072f0:	480b      	ldr	r0, [pc, #44]	; (8007320 <LoopForever+0xa>)
	ldr	r3, =_edata
 80072f2:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <LoopForever+0xe>)
	adds	r2, r0, r1
 80072f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80072f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80072f8:	d3f6      	bcc.n	80072e8 <CopyDataInit>
	ldr	r2, =_sbss
 80072fa:	4a0b      	ldr	r2, [pc, #44]	; (8007328 <LoopForever+0x12>)
	b	LoopFillZerobss
 80072fc:	e002      	b.n	8007304 <LoopFillZerobss>

080072fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80072fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007300:	f842 3b04 	str.w	r3, [r2], #4

08007304 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007304:	4b09      	ldr	r3, [pc, #36]	; (800732c <LoopForever+0x16>)
	cmp	r2, r3
 8007306:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007308:	d3f9      	bcc.n	80072fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800730a:	f7ff ffb3 	bl	8007274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800730e:	f000 f811 	bl	8007334 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007312:	f7ff fd37 	bl	8006d84 <main>

08007316 <LoopForever>:

LoopForever:
    b LoopForever
 8007316:	e7fe      	b.n	8007316 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007318:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800731c:	08007470 	.word	0x08007470
	ldr	r0, =_sdata
 8007320:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007324:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8007328:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 800732c:	200014f0 	.word	0x200014f0

08007330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007330:	e7fe      	b.n	8007330 <ADC1_2_IRQHandler>
	...

08007334 <__libc_init_array>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	4e0d      	ldr	r6, [pc, #52]	; (800736c <__libc_init_array+0x38>)
 8007338:	4c0d      	ldr	r4, [pc, #52]	; (8007370 <__libc_init_array+0x3c>)
 800733a:	1ba4      	subs	r4, r4, r6
 800733c:	10a4      	asrs	r4, r4, #2
 800733e:	2500      	movs	r5, #0
 8007340:	42a5      	cmp	r5, r4
 8007342:	d109      	bne.n	8007358 <__libc_init_array+0x24>
 8007344:	4e0b      	ldr	r6, [pc, #44]	; (8007374 <__libc_init_array+0x40>)
 8007346:	4c0c      	ldr	r4, [pc, #48]	; (8007378 <__libc_init_array+0x44>)
 8007348:	f000 f820 	bl	800738c <_init>
 800734c:	1ba4      	subs	r4, r4, r6
 800734e:	10a4      	asrs	r4, r4, #2
 8007350:	2500      	movs	r5, #0
 8007352:	42a5      	cmp	r5, r4
 8007354:	d105      	bne.n	8007362 <__libc_init_array+0x2e>
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800735c:	4798      	blx	r3
 800735e:	3501      	adds	r5, #1
 8007360:	e7ee      	b.n	8007340 <__libc_init_array+0xc>
 8007362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007366:	4798      	blx	r3
 8007368:	3501      	adds	r5, #1
 800736a:	e7f2      	b.n	8007352 <__libc_init_array+0x1e>
 800736c:	08007468 	.word	0x08007468
 8007370:	08007468 	.word	0x08007468
 8007374:	08007468 	.word	0x08007468
 8007378:	0800746c 	.word	0x0800746c

0800737c <memset>:
 800737c:	4402      	add	r2, r0
 800737e:	4603      	mov	r3, r0
 8007380:	4293      	cmp	r3, r2
 8007382:	d100      	bne.n	8007386 <memset+0xa>
 8007384:	4770      	bx	lr
 8007386:	f803 1b01 	strb.w	r1, [r3], #1
 800738a:	e7f9      	b.n	8007380 <memset+0x4>

0800738c <_init>:
 800738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738e:	bf00      	nop
 8007390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007392:	bc08      	pop	{r3}
 8007394:	469e      	mov	lr, r3
 8007396:	4770      	bx	lr

08007398 <_fini>:
 8007398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739a:	bf00      	nop
 800739c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739e:	bc08      	pop	{r3}
 80073a0:	469e      	mov	lr, r3
 80073a2:	4770      	bx	lr
