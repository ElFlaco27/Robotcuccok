
robocup3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002340  08002340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002380  08002380  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002380  08002380  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002380  08002380  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002380  08002380  00012380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08002394  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002394  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf0d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c25  00000000  00000000  0002cf49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c48  00000000  00000000  0002eb70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  0002f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000261b7  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000acb6  00000000  00000000  000564af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9def  00000000  00000000  00061165  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014af54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031cc  00000000  00000000  0014afd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002328 	.word	0x08002328

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002328 	.word	0x08002328

080001c8 <HAL_TIM_IC_CaptureCallback>:
	TIM_handler.Instance = config.TIMx;
	HAL_TIM_IC_Stop_IT(&TIM_handler, config.TIM_channelx);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t value2;
	uint32_t Diff_value;
	if((htim->Instance == IC_1_TIM) && (htim->Channel == IC_1_TIM_ACT_CHANNEL))
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a68      	ldr	r2, [pc, #416]	; (8000378 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 80001d6:	4293      	cmp	r3, r2
 80001d8:	d13f      	bne.n	800025a <HAL_TIM_IC_CaptureCallback+0x92>
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	7f1b      	ldrb	r3, [r3, #28]
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d13b      	bne.n	800025a <HAL_TIM_IC_CaptureCallback+0x92>
	{
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 80001e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e6:	691b      	ldr	r3, [r3, #16]
 80001e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d00a      	beq.n	8000206 <HAL_TIM_IC_CaptureCallback+0x3e>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_1_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_1_TIM_CHANNEL);
 80001f0:	2100      	movs	r1, #0
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f001 fcfc 	bl	8001bf0 <HAL_TIM_ReadCapturedValue>
 80001f8:	4602      	mov	r2, r0
 80001fa:	4b60      	ldr	r3, [pc, #384]	; (800037c <HAL_TIM_IC_CaptureCallback+0x1b4>)
 80001fc:	601a      	str	r2, [r3, #0]
			TIM_IC_1_CaptureIndex = 1;
 80001fe:	4b60      	ldr	r3, [pc, #384]	; (8000380 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000200:	2201      	movs	r2, #1
 8000202:	601a      	str	r2, [r3, #0]
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 8000204:	e0b1      	b.n	800036a <HAL_TIM_IC_CaptureCallback+0x1a2>
		}
		else if(TIM_IC_1_CaptureIndex == 1)
 8000206:	4b5e      	ldr	r3, [pc, #376]	; (8000380 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2b01      	cmp	r3, #1
 800020c:	f040 80ad 	bne.w	800036a <HAL_TIM_IC_CaptureCallback+0x1a2>
		{
			 /* Get the 2nd Input Capture value */
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_1_TIM_CHANNEL);
 8000210:	2100      	movs	r1, #0
 8000212:	6878      	ldr	r0, [r7, #4]
 8000214:	f001 fcec 	bl	8001bf0 <HAL_TIM_ReadCapturedValue>
 8000218:	60f8      	str	r0, [r7, #12]

			 /* Capture computation */
			 if (value2 > TIM_IC_1_Value_1)
 800021a:	4b58      	ldr	r3, [pc, #352]	; (800037c <HAL_TIM_IC_CaptureCallback+0x1b4>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	68fa      	ldr	r2, [r7, #12]
 8000220:	429a      	cmp	r2, r3
 8000222:	d905      	bls.n	8000230 <HAL_TIM_IC_CaptureCallback+0x68>
			 {
				 Diff_value = (value2 - TIM_IC_1_Value_1);
 8000224:	4b55      	ldr	r3, [pc, #340]	; (800037c <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	68fa      	ldr	r2, [r7, #12]
 800022a:	1ad3      	subs	r3, r2, r3
 800022c:	60bb      	str	r3, [r7, #8]
 800022e:	e00b      	b.n	8000248 <HAL_TIM_IC_CaptureCallback+0x80>
			 }
			 else if (value2 < TIM_IC_1_Value_1)
 8000230:	4b52      	ldr	r3, [pc, #328]	; (800037c <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	68fa      	ldr	r2, [r7, #12]
 8000236:	429a      	cmp	r2, r3
 8000238:	d206      	bcs.n	8000248 <HAL_TIM_IC_CaptureCallback+0x80>
			 {
				 /* 0xFFFF is max TIM1_CCRx value */
				 Diff_value = ((65535 - TIM_IC_1_Value_1) + value2) + 1;
 800023a:	4b50      	ldr	r3, [pc, #320]	; (800037c <HAL_TIM_IC_CaptureCallback+0x1b4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	68fa      	ldr	r2, [r7, #12]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000246:	60bb      	str	r3, [r7, #8]
			 }
			 Write_IC_Channel1_Raw_data(&Diff_value);
 8000248:	f107 0308 	add.w	r3, r7, #8
 800024c:	4618      	mov	r0, r3
 800024e:	f001 fed3 	bl	8001ff8 <Write_IC_Channel1_Raw_data>
			 TIM_IC_1_CaptureIndex = 0;
 8000252:	4b4b      	ldr	r3, [pc, #300]	; (8000380 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 8000258:	e087      	b.n	800036a <HAL_TIM_IC_CaptureCallback+0x1a2>
		}
	}
#if (IC_IN_USE>1)
	else if((htim->Instance == IC_2_TIM) && (htim->Channel == IC_2_TIM_ACT_CHANNEL))
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a46      	ldr	r2, [pc, #280]	; (8000378 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d13e      	bne.n	80002e2 <HAL_TIM_IC_CaptureCallback+0x11a>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	7f1b      	ldrb	r3, [r3, #28]
 8000268:	2b02      	cmp	r3, #2
 800026a:	d13a      	bne.n	80002e2 <HAL_TIM_IC_CaptureCallback+0x11a>
	{
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 800026c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000270:	691b      	ldr	r3, [r3, #16]
 8000272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000276:	2b00      	cmp	r3, #0
 8000278:	d00a      	beq.n	8000290 <HAL_TIM_IC_CaptureCallback+0xc8>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_2_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_2_TIM_CHANNEL);
 800027a:	2104      	movs	r1, #4
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f001 fcb7 	bl	8001bf0 <HAL_TIM_ReadCapturedValue>
 8000282:	4602      	mov	r2, r0
 8000284:	4b3f      	ldr	r3, [pc, #252]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000286:	601a      	str	r2, [r3, #0]
			TIM_IC_2_CaptureIndex = 1;
 8000288:	4b3f      	ldr	r3, [pc, #252]	; (8000388 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 800028a:	2201      	movs	r2, #1
 800028c:	601a      	str	r2, [r3, #0]
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 800028e:	e06e      	b.n	800036e <HAL_TIM_IC_CaptureCallback+0x1a6>
		}
		else if(TIM_IC_2_CaptureIndex == 1)
 8000290:	4b3d      	ldr	r3, [pc, #244]	; (8000388 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d16a      	bne.n	800036e <HAL_TIM_IC_CaptureCallback+0x1a6>
		{
			 /* Get the 2nd Input Capture value */
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_2_TIM_CHANNEL);
 8000298:	2104      	movs	r1, #4
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f001 fca8 	bl	8001bf0 <HAL_TIM_ReadCapturedValue>
 80002a0:	60f8      	str	r0, [r7, #12]

			 /* Capture computation */
			 if (value2 > TIM_IC_2_Value_1)
 80002a2:	4b38      	ldr	r3, [pc, #224]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d905      	bls.n	80002b8 <HAL_TIM_IC_CaptureCallback+0xf0>
			 {
				 Diff_value = (value2 - TIM_IC_2_Value_1);
 80002ac:	4b35      	ldr	r3, [pc, #212]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	68fa      	ldr	r2, [r7, #12]
 80002b2:	1ad3      	subs	r3, r2, r3
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	e00b      	b.n	80002d0 <HAL_TIM_IC_CaptureCallback+0x108>
			 }
			 else if (value2 < TIM_IC_2_Value_1)
 80002b8:	4b32      	ldr	r3, [pc, #200]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d206      	bcs.n	80002d0 <HAL_TIM_IC_CaptureCallback+0x108>
			 {
				 /* 0xFFFF is max TIM1_CCRx value */
				 Diff_value = ((65535 - TIM_IC_2_Value_1) + value2) + 1;
 80002c2:	4b30      	ldr	r3, [pc, #192]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	1ad3      	subs	r3, r2, r3
 80002ca:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80002ce:	60bb      	str	r3, [r7, #8]
			 }
			 Write_IC_Channel2_Raw_data(&Diff_value);
 80002d0:	f107 0308 	add.w	r3, r7, #8
 80002d4:	4618      	mov	r0, r3
 80002d6:	f001 fe9f 	bl	8002018 <Write_IC_Channel2_Raw_data>
			 TIM_IC_2_CaptureIndex = 0;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 80002e0:	e045      	b.n	800036e <HAL_TIM_IC_CaptureCallback+0x1a6>
		}
	}
#endif
#if (IC_IN_USE>2)
	else if((htim->Instance == IC_3_TIM) && (htim->Channel == IC_3_TIM_ACT_CHANNEL))
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a24      	ldr	r2, [pc, #144]	; (8000378 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d141      	bne.n	8000370 <HAL_TIM_IC_CaptureCallback+0x1a8>
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	7f1b      	ldrb	r3, [r3, #28]
 80002f0:	2b08      	cmp	r3, #8
 80002f2:	d13d      	bne.n	8000370 <HAL_TIM_IC_CaptureCallback+0x1a8>
	{
		if(IC_3_GPIO->IDR & IC_3_GPIO_PIN)
 80002f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d00a      	beq.n	8000318 <HAL_TIM_IC_CaptureCallback+0x150>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_3_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_3_TIM_CHANNEL);
 8000302:	210c      	movs	r1, #12
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f001 fc73 	bl	8001bf0 <HAL_TIM_ReadCapturedValue>
 800030a:	4602      	mov	r2, r0
 800030c:	4b1f      	ldr	r3, [pc, #124]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800030e:	601a      	str	r2, [r3, #0]
			TIM_IC_3_CaptureIndex = 1;
 8000310:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000312:	2201      	movs	r2, #1
 8000314:	601a      	str	r2, [r3, #0]
		}
	}
#endif


}
 8000316:	e02b      	b.n	8000370 <HAL_TIM_IC_CaptureCallback+0x1a8>
		else if(TIM_IC_3_CaptureIndex == 1)
 8000318:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d127      	bne.n	8000370 <HAL_TIM_IC_CaptureCallback+0x1a8>
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_3_TIM_CHANNEL);
 8000320:	210c      	movs	r1, #12
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f001 fc64 	bl	8001bf0 <HAL_TIM_ReadCapturedValue>
 8000328:	60f8      	str	r0, [r7, #12]
			 if (value2 > TIM_IC_3_Value_1)
 800032a:	4b18      	ldr	r3, [pc, #96]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	68fa      	ldr	r2, [r7, #12]
 8000330:	429a      	cmp	r2, r3
 8000332:	d905      	bls.n	8000340 <HAL_TIM_IC_CaptureCallback+0x178>
				 Diff_value = (value2 - TIM_IC_3_Value_1);
 8000334:	4b15      	ldr	r3, [pc, #84]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	68fa      	ldr	r2, [r7, #12]
 800033a:	1ad3      	subs	r3, r2, r3
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	e00b      	b.n	8000358 <HAL_TIM_IC_CaptureCallback+0x190>
			 else if (value2 < TIM_IC_3_Value_1)
 8000340:	4b12      	ldr	r3, [pc, #72]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	68fa      	ldr	r2, [r7, #12]
 8000346:	429a      	cmp	r2, r3
 8000348:	d206      	bcs.n	8000358 <HAL_TIM_IC_CaptureCallback+0x190>
				 Diff_value = ((65535 - TIM_IC_3_Value_1) + value2) + 1;
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	1ad3      	subs	r3, r2, r3
 8000352:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000356:	60bb      	str	r3, [r7, #8]
			 Write_IC_Channel3_Raw_data(&Diff_value);
 8000358:	f107 0308 	add.w	r3, r7, #8
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fe6b 	bl	8002038 <Write_IC_Channel3_Raw_data>
			 TIM_IC_3_CaptureIndex = 0;
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
}
 8000368:	e002      	b.n	8000370 <HAL_TIM_IC_CaptureCallback+0x1a8>
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 800036a:	bf00      	nop
 800036c:	e000      	b.n	8000370 <HAL_TIM_IC_CaptureCallback+0x1a8>
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 800036e:	bf00      	nop
}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40012c00 	.word	0x40012c00
 800037c:	20000030 	.word	0x20000030
 8000380:	20000038 	.word	0x20000038
 8000384:	20000080 	.word	0x20000080
 8000388:	2000003c 	.word	0x2000003c
 800038c:	20000034 	.word	0x20000034
 8000390:	20000084 	.word	0x20000084

08000394 <TIMx_ENC_Init>:
uint32_t TIM_ENC_4_CaptureIndex;
#endif


void TIMx_ENC_Init(TIM_ENC_Typedef config)
{
 8000394:	b084      	sub	sp, #16
 8000396:	b580      	push	{r7, lr}
 8000398:	b098      	sub	sp, #96	; 0x60
 800039a:	af00      	add	r7, sp, #0
 800039c:	f107 0c68 	add.w	ip, r7, #104	; 0x68
 80003a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
	TIM_Encoder_InitTypeDef sConfigENC = {0};
 80003b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003b4:	2224      	movs	r2, #36	; 0x24
 80003b6:	2100      	movs	r1, #0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f001 ffad 	bl	8002318 <memset>
	GPIO_InitTypeDef  GPIO_InitStruct;

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	TIM_handler.Instance = config.TIMx;
 80003be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80003c0:	4a69      	ldr	r2, [pc, #420]	; (8000568 <TIMx_ENC_Init+0x1d4>)
 80003c2:	6013      	str	r3, [r2, #0]
	TIM_handler.Init.Prescaler = 0;
 80003c4:	4b68      	ldr	r3, [pc, #416]	; (8000568 <TIMx_ENC_Init+0x1d4>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	605a      	str	r2, [r3, #4]
	TIM_handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ca:	4b67      	ldr	r3, [pc, #412]	; (8000568 <TIMx_ENC_Init+0x1d4>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
	TIM_handler.Init.Period = 65535;
 80003d0:	4b65      	ldr	r3, [pc, #404]	; (8000568 <TIMx_ENC_Init+0x1d4>)
 80003d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003d6:	60da      	str	r2, [r3, #12]
	TIM_handler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d8:	4b63      	ldr	r3, [pc, #396]	; (8000568 <TIMx_ENC_Init+0x1d4>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]
	TIM_handler.Init.RepetitionCounter = 0;
 80003de:	4b62      	ldr	r3, [pc, #392]	; (8000568 <TIMx_ENC_Init+0x1d4>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
	TIM_handler.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e4:	4b60      	ldr	r3, [pc, #384]	; (8000568 <TIMx_ENC_Init+0x1d4>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	619a      	str	r2, [r3, #24]
	sConfigENC.EncoderMode = TIM_ENCODERMODE_TI12;
 80003ea:	2303      	movs	r3, #3
 80003ec:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigENC.IC1Polarity = TIM_ICPOLARITY_RISING;
 80003ee:	2300      	movs	r3, #0
 80003f0:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigENC.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003f2:	2301      	movs	r3, #1
 80003f4:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigENC.IC1Prescaler = TIM_ICPSC_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigENC.IC1Filter = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigENC.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003fe:	2300      	movs	r3, #0
 8000400:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigENC.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000402:	2301      	movs	r3, #1
 8000404:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigENC.IC2Prescaler = TIM_ICPSC_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigENC.IC2Filter = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_Encoder_Init(&TIM_handler, &sConfigENC) != HAL_OK)
 800040e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000412:	4619      	mov	r1, r3
 8000414:	4854      	ldr	r0, [pc, #336]	; (8000568 <TIMx_ENC_Init+0x1d4>)
 8000416:	f001 fa03 	bl	8001820 <HAL_TIM_Encoder_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <TIMx_ENC_Init+0x90>
	{
		Error_Handler();
 8000420:	f001 fe94 	bl	800214c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000424:	2300      	movs	r3, #0
 8000426:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000428:	2300      	movs	r3, #0
 800042a:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042c:	2300      	movs	r3, #0
 800042e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&TIM_handler, &sMasterConfig) != HAL_OK)
 8000430:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000434:	4619      	mov	r1, r3
 8000436:	484c      	ldr	r0, [pc, #304]	; (8000568 <TIMx_ENC_Init+0x1d4>)
 8000438:	f001 fd06 	bl	8001e48 <HAL_TIMEx_MasterConfigSynchronization>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <TIMx_ENC_Init+0xb2>
	{
		Error_Handler();
 8000442:	f001 fe83 	bl	800214c <Error_Handler>
	}


	if(config.GPIOx_ch1 == GPIOA)
 8000446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000448:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800044c:	d10c      	bne.n	8000468 <TIMx_ENC_Init+0xd4>
	{

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b47      	ldr	r3, [pc, #284]	; (800056c <TIMx_ENC_Init+0x1d8>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	4a46      	ldr	r2, [pc, #280]	; (800056c <TIMx_ENC_Init+0x1d8>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045a:	4b44      	ldr	r3, [pc, #272]	; (800056c <TIMx_ENC_Init+0x1d8>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	61bb      	str	r3, [r7, #24]
 8000464:	69bb      	ldr	r3, [r7, #24]
 8000466:	e020      	b.n	80004aa <TIMx_ENC_Init+0x116>
	}
	else if(config.GPIOx_ch1 == GPIOB)
 8000468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800046a:	4a41      	ldr	r2, [pc, #260]	; (8000570 <TIMx_ENC_Init+0x1dc>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d10c      	bne.n	800048a <TIMx_ENC_Init+0xf6>
	{

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	4b3e      	ldr	r3, [pc, #248]	; (800056c <TIMx_ENC_Init+0x1d8>)
 8000472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000474:	4a3d      	ldr	r2, [pc, #244]	; (800056c <TIMx_ENC_Init+0x1d8>)
 8000476:	f043 0302 	orr.w	r3, r3, #2
 800047a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047c:	4b3b      	ldr	r3, [pc, #236]	; (800056c <TIMx_ENC_Init+0x1d8>)
 800047e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000480:	f003 0302 	and.w	r3, r3, #2
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	e00f      	b.n	80004aa <TIMx_ENC_Init+0x116>
	}
	else if(config.GPIOx_ch1 == GPIOC)
 800048a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800048c:	4a39      	ldr	r2, [pc, #228]	; (8000574 <TIMx_ENC_Init+0x1e0>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d10b      	bne.n	80004aa <TIMx_ENC_Init+0x116>
	{

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000492:	4b36      	ldr	r3, [pc, #216]	; (800056c <TIMx_ENC_Init+0x1d8>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	4a35      	ldr	r2, [pc, #212]	; (800056c <TIMx_ENC_Init+0x1d8>)
 8000498:	f043 0304 	orr.w	r3, r3, #4
 800049c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049e:	4b33      	ldr	r3, [pc, #204]	; (800056c <TIMx_ENC_Init+0x1d8>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	f003 0304 	and.w	r3, r3, #4
 80004a6:	613b      	str	r3, [r7, #16]
 80004a8:	693b      	ldr	r3, [r7, #16]
	}

	if(config.GPIOx_ch2 == GPIOA)
 80004aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80004ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80004b0:	d10c      	bne.n	80004cc <TIMx_ENC_Init+0x138>
	{

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80004b2:	4b2e      	ldr	r3, [pc, #184]	; (800056c <TIMx_ENC_Init+0x1d8>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b6:	4a2d      	ldr	r2, [pc, #180]	; (800056c <TIMx_ENC_Init+0x1d8>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004be:	4b2b      	ldr	r3, [pc, #172]	; (800056c <TIMx_ENC_Init+0x1d8>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	e020      	b.n	800050e <TIMx_ENC_Init+0x17a>
	}
	else if(config.GPIOx_ch2 == GPIOB)
 80004cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80004ce:	4a28      	ldr	r2, [pc, #160]	; (8000570 <TIMx_ENC_Init+0x1dc>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d10c      	bne.n	80004ee <TIMx_ENC_Init+0x15a>
	{

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80004d4:	4b25      	ldr	r3, [pc, #148]	; (800056c <TIMx_ENC_Init+0x1d8>)
 80004d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d8:	4a24      	ldr	r2, [pc, #144]	; (800056c <TIMx_ENC_Init+0x1d8>)
 80004da:	f043 0302 	orr.w	r3, r3, #2
 80004de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e0:	4b22      	ldr	r3, [pc, #136]	; (800056c <TIMx_ENC_Init+0x1d8>)
 80004e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e4:	f003 0302 	and.w	r3, r3, #2
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	e00f      	b.n	800050e <TIMx_ENC_Init+0x17a>
	}
	else if(config.GPIOx_ch2 == GPIOC)
 80004ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80004f0:	4a20      	ldr	r2, [pc, #128]	; (8000574 <TIMx_ENC_Init+0x1e0>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d10b      	bne.n	800050e <TIMx_ENC_Init+0x17a>
	{

		__HAL_RCC_GPIOC_CLK_ENABLE();
 80004f6:	4b1d      	ldr	r3, [pc, #116]	; (800056c <TIMx_ENC_Init+0x1d8>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	4a1c      	ldr	r2, [pc, #112]	; (800056c <TIMx_ENC_Init+0x1d8>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <TIMx_ENC_Init+0x1d8>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
	}


	GPIO_InitStruct.Pin = config.GPIO_Pinx_ch1;
 800050e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000512:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000514:	2302      	movs	r3, #2
 8000516:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051c:	2300      	movs	r3, #0
 800051e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = config.GPIO_AlternateFunctionx;
 8000520:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000524:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(config.GPIOx_ch1, &GPIO_InitStruct);
 8000526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000528:	f107 021c 	add.w	r2, r7, #28
 800052c:	4611      	mov	r1, r2
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f9ca 	bl	80008c8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = config.GPIO_Pinx_ch2;
 8000534:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000538:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053a:	2302      	movs	r3, #2
 800053c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2300      	movs	r3, #0
 8000544:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = config.GPIO_AlternateFunctionx;
 8000546:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800054a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(config.GPIOx_ch2, &GPIO_InitStruct);
 800054c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800054e:	f107 021c 	add.w	r2, r7, #28
 8000552:	4611      	mov	r1, r2
 8000554:	4618      	mov	r0, r3
 8000556:	f000 f9b7 	bl	80008c8 <HAL_GPIO_Init>

	//HAL_NVENC_SetPriority(config.TIMx_IRQ, 0, 0);
	//HAL_NVENC_EnableIRQ(config.TIMx_IRQ);
}
 800055a:	bf00      	nop
 800055c:	3760      	adds	r7, #96	; 0x60
 800055e:	46bd      	mov	sp, r7
 8000560:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000564:	b004      	add	sp, #16
 8000566:	4770      	bx	lr
 8000568:	20000040 	.word	0x20000040
 800056c:	40021000 	.word	0x40021000
 8000570:	48000400 	.word	0x48000400
 8000574:	48000800 	.word	0x48000800

08000578 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_ENC)
{
 8000578:	b480      	push	{r7}
 800057a:	b087      	sub	sp, #28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

	if ((htim_ENC->Instance == TIM1))
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d10c      	bne.n	80005a4 <HAL_TIM_Encoder_MspInit+0x2c>
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM1_CLK_ENABLE();
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <HAL_TIM_Encoder_MspInit+0x84>)
 800058c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800058e:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <HAL_TIM_Encoder_MspInit+0x84>)
 8000590:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000594:	6613      	str	r3, [r2, #96]	; 0x60
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <HAL_TIM_Encoder_MspInit+0x84>)
 8000598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800059a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697b      	ldr	r3, [r7, #20]
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM3_CLK_ENABLE();
	}

}
 80005a2:	e022      	b.n	80005ea <HAL_TIM_Encoder_MspInit+0x72>
	else if ((htim_ENC->Instance == TIM2))
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005ac:	d10c      	bne.n	80005c8 <HAL_TIM_Encoder_MspInit+0x50>
	    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <HAL_TIM_Encoder_MspInit+0x84>)
 80005b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <HAL_TIM_Encoder_MspInit+0x84>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6593      	str	r3, [r2, #88]	; 0x58
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <HAL_TIM_Encoder_MspInit+0x84>)
 80005bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]
}
 80005c6:	e010      	b.n	80005ea <HAL_TIM_Encoder_MspInit+0x72>
	else if ((htim_ENC->Instance == TIM3))
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <HAL_TIM_Encoder_MspInit+0x88>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d10b      	bne.n	80005ea <HAL_TIM_Encoder_MspInit+0x72>
	    __HAL_RCC_TIM3_CLK_ENABLE();
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <HAL_TIM_Encoder_MspInit+0x84>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <HAL_TIM_Encoder_MspInit+0x84>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6593      	str	r3, [r2, #88]	; 0x58
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <HAL_TIM_Encoder_MspInit+0x84>)
 80005e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
}
 80005ea:	bf00      	nop
 80005ec:	371c      	adds	r7, #28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40012c00 	.word	0x40012c00
 80005fc:	40021000 	.word	0x40021000
 8000600:	40000400 	.word	0x40000400

08000604 <TIMx_ENC_Start>:

void TIMx_ENC_Start(TIM_ENC_Typedef config)
{
 8000604:	b084      	sub	sp, #16
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
 800060a:	f107 0c08 	add.w	ip, r7, #8
 800060e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_handler.Instance = config.TIMx;
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	4a05      	ldr	r2, [pc, #20]	; (800062c <TIMx_ENC_Start+0x28>)
 8000616:	6013      	str	r3, [r2, #0]
	HAL_TIM_Encoder_Start(&TIM_handler, TIM_CHANNEL_ALL);
 8000618:	213c      	movs	r1, #60	; 0x3c
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <TIMx_ENC_Start+0x28>)
 800061c:	f001 f992 	bl	8001944 <HAL_TIM_Encoder_Start>
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000628:	b004      	add	sp, #16
 800062a:	4770      	bx	lr
 800062c:	20000040 	.word	0x20000040

08000630 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	71fb      	strb	r3, [r7, #7]
#if (INSTRUCTION_CACHE_ENABLE == 0)
   __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_Init+0x3c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a0b      	ldr	r2, [pc, #44]	; (800066c <HAL_Init+0x3c>)
 8000640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000644:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000646:	2003      	movs	r0, #3
 8000648:	f000 f90a 	bl	8000860 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800064c:	2000      	movs	r0, #0
 800064e:	f000 f80f 	bl	8000670 <HAL_InitTick>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	e001      	b.n	8000662 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800065e:	f001 fd79 	bl	8002154 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000662:	79fb      	ldrb	r3, [r7, #7]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40022000 	.word	0x40022000

08000670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_InitTick+0x68>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d022      	beq.n	80006ca <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_InitTick+0x6c>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <HAL_InitTick+0x68>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000690:	fbb1 f3f3 	udiv	r3, r1, r3
 8000694:	fbb2 f3f3 	udiv	r3, r2, r3
 8000698:	4618      	mov	r0, r3
 800069a:	f000 f908 	bl	80008ae <HAL_SYSTICK_Config>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d10f      	bne.n	80006c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b0f      	cmp	r3, #15
 80006a8:	d809      	bhi.n	80006be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006aa:	2200      	movs	r2, #0
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006b2:	f000 f8e0 	bl	8000876 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <HAL_InitTick+0x70>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	e007      	b.n	80006ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	73fb      	strb	r3, [r7, #15]
 80006c2:	e004      	b.n	80006ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	73fb      	strb	r3, [r7, #15]
 80006c8:	e001      	b.n	80006ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000004 	.word	0x20000004
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000000 	.word	0x20000000

080006e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <HAL_GetTick+0x14>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000088 	.word	0x20000088

080006fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000718:	4013      	ands	r3, r2
 800071a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072e:	4a04      	ldr	r2, [pc, #16]	; (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	60d3      	str	r3, [r2, #12]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <__NVIC_GetPriorityGrouping+0x18>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	f003 0307 	and.w	r3, r3, #7
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	; (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43da      	mvns	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	401a      	ands	r2, r3
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43d9      	mvns	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	4313      	orrs	r3, r2
         );
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800082c:	d301      	bcc.n	8000832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082e:	2301      	movs	r3, #1
 8000830:	e00f      	b.n	8000852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <SysTick_Config+0x40>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800083a:	210f      	movs	r1, #15
 800083c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000840:	f7ff ff8e 	bl	8000760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <SysTick_Config+0x40>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <SysTick_Config+0x40>)
 800084c:	2207      	movs	r2, #7
 800084e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	e000e010 	.word	0xe000e010

08000860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ff47 	bl	80006fc <__NVIC_SetPriorityGrouping>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000888:	f7ff ff5c 	bl	8000744 <__NVIC_GetPriorityGrouping>
 800088c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	6978      	ldr	r0, [r7, #20]
 8000894:	f7ff ff8e 	bl	80007b4 <NVIC_EncodePriority>
 8000898:	4602      	mov	r2, r0
 800089a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089e:	4611      	mov	r1, r2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff5d 	bl	8000760 <__NVIC_SetPriority>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ffb0 	bl	800081c <SysTick_Config>
 80008bc:	4603      	mov	r3, r0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008d6:	e17f      	b.n	8000bd8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	2101      	movs	r1, #1
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	fa01 f303 	lsl.w	r3, r1, r3
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f000 8171 	beq.w	8000bd2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d003      	beq.n	8000900 <HAL_GPIO_Init+0x38>
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b12      	cmp	r3, #18
 80008fe:	d123      	bne.n	8000948 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	08da      	lsrs	r2, r3, #3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3208      	adds	r2, #8
 8000908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	f003 0307 	and.w	r3, r3, #7
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	220f      	movs	r2, #15
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	691a      	ldr	r2, [r3, #16]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	08da      	lsrs	r2, r3, #3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3208      	adds	r2, #8
 8000942:	6939      	ldr	r1, [r7, #16]
 8000944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	2203      	movs	r2, #3
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 0203 	and.w	r2, r3, #3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d00b      	beq.n	800099c <HAL_GPIO_Init+0xd4>
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d007      	beq.n	800099c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000990:	2b11      	cmp	r3, #17
 8000992:	d003      	beq.n	800099c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2b12      	cmp	r3, #18
 800099a:	d130      	bne.n	80009fe <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	2203      	movs	r2, #3
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68da      	ldr	r2, [r3, #12]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009d2:	2201      	movs	r2, #1
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	091b      	lsrs	r3, r3, #4
 80009e8:	f003 0201 	and.w	r2, r3, #1
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d118      	bne.n	8000a3c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a10:	2201      	movs	r2, #1
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	08db      	lsrs	r3, r3, #3
 8000a26:	f003 0201 	and.w	r2, r3, #1
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f000 80ac 	beq.w	8000bd2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b5e      	ldr	r3, [pc, #376]	; (8000bf4 <HAL_GPIO_Init+0x32c>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	4a5d      	ldr	r2, [pc, #372]	; (8000bf4 <HAL_GPIO_Init+0x32c>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6613      	str	r3, [r2, #96]	; 0x60
 8000a86:	4b5b      	ldr	r3, [pc, #364]	; (8000bf4 <HAL_GPIO_Init+0x32c>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a92:	4a59      	ldr	r2, [pc, #356]	; (8000bf8 <HAL_GPIO_Init+0x330>)
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	3302      	adds	r3, #2
 8000a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	f003 0303 	and.w	r3, r3, #3
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	220f      	movs	r2, #15
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000abc:	d025      	beq.n	8000b0a <HAL_GPIO_Init+0x242>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a4e      	ldr	r2, [pc, #312]	; (8000bfc <HAL_GPIO_Init+0x334>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d01f      	beq.n	8000b06 <HAL_GPIO_Init+0x23e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a4d      	ldr	r2, [pc, #308]	; (8000c00 <HAL_GPIO_Init+0x338>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d019      	beq.n	8000b02 <HAL_GPIO_Init+0x23a>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a4c      	ldr	r2, [pc, #304]	; (8000c04 <HAL_GPIO_Init+0x33c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d013      	beq.n	8000afe <HAL_GPIO_Init+0x236>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4b      	ldr	r2, [pc, #300]	; (8000c08 <HAL_GPIO_Init+0x340>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d00d      	beq.n	8000afa <HAL_GPIO_Init+0x232>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4a      	ldr	r2, [pc, #296]	; (8000c0c <HAL_GPIO_Init+0x344>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d007      	beq.n	8000af6 <HAL_GPIO_Init+0x22e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a49      	ldr	r2, [pc, #292]	; (8000c10 <HAL_GPIO_Init+0x348>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d101      	bne.n	8000af2 <HAL_GPIO_Init+0x22a>
 8000aee:	2306      	movs	r3, #6
 8000af0:	e00c      	b.n	8000b0c <HAL_GPIO_Init+0x244>
 8000af2:	2307      	movs	r3, #7
 8000af4:	e00a      	b.n	8000b0c <HAL_GPIO_Init+0x244>
 8000af6:	2305      	movs	r3, #5
 8000af8:	e008      	b.n	8000b0c <HAL_GPIO_Init+0x244>
 8000afa:	2304      	movs	r3, #4
 8000afc:	e006      	b.n	8000b0c <HAL_GPIO_Init+0x244>
 8000afe:	2303      	movs	r3, #3
 8000b00:	e004      	b.n	8000b0c <HAL_GPIO_Init+0x244>
 8000b02:	2302      	movs	r3, #2
 8000b04:	e002      	b.n	8000b0c <HAL_GPIO_Init+0x244>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e000      	b.n	8000b0c <HAL_GPIO_Init+0x244>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	f002 0203 	and.w	r2, r2, #3
 8000b12:	0092      	lsls	r2, r2, #2
 8000b14:	4093      	lsls	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b1c:	4936      	ldr	r1, [pc, #216]	; (8000bf8 <HAL_GPIO_Init+0x330>)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3302      	adds	r3, #2
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b2a:	4b3a      	ldr	r3, [pc, #232]	; (8000c14 <HAL_GPIO_Init+0x34c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b4e:	4a31      	ldr	r2, [pc, #196]	; (8000c14 <HAL_GPIO_Init+0x34c>)
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b54:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <HAL_GPIO_Init+0x34c>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b78:	4a26      	ldr	r2, [pc, #152]	; (8000c14 <HAL_GPIO_Init+0x34c>)
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b7e:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <HAL_GPIO_Init+0x34c>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <HAL_GPIO_Init+0x34c>)
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_GPIO_Init+0x34c>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bcc:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <HAL_GPIO_Init+0x34c>)
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa22 f303 	lsr.w	r3, r2, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f47f ae78 	bne.w	80008d8 <HAL_GPIO_Init+0x10>
  }
}
 8000be8:	bf00      	nop
 8000bea:	371c      	adds	r7, #28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010000 	.word	0x40010000
 8000bfc:	48000400 	.word	0x48000400
 8000c00:	48000800 	.word	0x48000800
 8000c04:	48000c00 	.word	0x48000c00
 8000c08:	48001000 	.word	0x48001000
 8000c0c:	48001400 	.word	0x48001400
 8000c10:	48001800 	.word	0x48001800
 8000c14:	40010400 	.word	0x40010400

08000c18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f806 	bl	8000c48 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40010400 	.word	0x40010400

08000c48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40007000 	.word	0x40007000

08000c7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c8a:	d130      	bne.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c98:	d038      	beq.n	8000d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2232      	movs	r2, #50	; 0x32
 8000cb0:	fb02 f303 	mul.w	r3, r2, r3
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cba:	0c9b      	lsrs	r3, r3, #18
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cc0:	e002      	b.n	8000cc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd4:	d102      	bne.n	8000cdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1f2      	bne.n	8000cc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce8:	d110      	bne.n	8000d0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	e00f      	b.n	8000d0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cfa:	d007      	beq.n	8000d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d04:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40007000 	.word	0x40007000
 8000d20:	20000008 	.word	0x20000008
 8000d24:	431bde83 	.word	0x431bde83

08000d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e39d      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d3a:	4ba4      	ldr	r3, [pc, #656]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d44:	4ba1      	ldr	r3, [pc, #644]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 80e1 	beq.w	8000f1e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d007      	beq.n	8000d72 <HAL_RCC_OscConfig+0x4a>
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	2b0c      	cmp	r3, #12
 8000d66:	f040 8088 	bne.w	8000e7a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	f040 8084 	bne.w	8000e7a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d72:	4b96      	ldr	r3, [pc, #600]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <HAL_RCC_OscConfig+0x62>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e375      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a1a      	ldr	r2, [r3, #32]
 8000d8e:	4b8f      	ldr	r3, [pc, #572]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d004      	beq.n	8000da4 <HAL_RCC_OscConfig+0x7c>
 8000d9a:	4b8c      	ldr	r3, [pc, #560]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000da2:	e005      	b.n	8000db0 <HAL_RCC_OscConfig+0x88>
 8000da4:	4b89      	ldr	r3, [pc, #548]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000daa:	091b      	lsrs	r3, r3, #4
 8000dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d223      	bcs.n	8000dfc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fcd1 	bl	8001760 <RCC_SetFlashLatencyFromMSIRange>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e356      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dc8:	4b80      	ldr	r3, [pc, #512]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a7f      	ldr	r2, [pc, #508]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b7d      	ldr	r3, [pc, #500]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	497a      	ldr	r1, [pc, #488]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000de6:	4b79      	ldr	r3, [pc, #484]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	4975      	ldr	r1, [pc, #468]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	604b      	str	r3, [r1, #4]
 8000dfa:	e022      	b.n	8000e42 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dfc:	4b73      	ldr	r3, [pc, #460]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a72      	ldr	r2, [pc, #456]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b70      	ldr	r3, [pc, #448]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	496d      	ldr	r1, [pc, #436]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e1a:	4b6c      	ldr	r3, [pc, #432]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	4968      	ldr	r1, [pc, #416]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a1b      	ldr	r3, [r3, #32]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fc94 	bl	8001760 <RCC_SetFlashLatencyFromMSIRange>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e319      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e42:	f000 fc03 	bl	800164c <HAL_RCC_GetSysClockFreq>
 8000e46:	4601      	mov	r1, r0
 8000e48:	4b60      	ldr	r3, [pc, #384]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	4a5f      	ldr	r2, [pc, #380]	; (8000fd0 <HAL_RCC_OscConfig+0x2a8>)
 8000e54:	5cd3      	ldrb	r3, [r2, r3]
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5e:	4a5d      	ldr	r2, [pc, #372]	; (8000fd4 <HAL_RCC_OscConfig+0x2ac>)
 8000e60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e62:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <HAL_RCC_OscConfig+0x2b0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fc02 	bl	8000670 <HAL_InitTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d052      	beq.n	8000f1c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	e2fd      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d032      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e82:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a51      	ldr	r2, [pc, #324]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fc29 	bl	80006e4 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e96:	f7ff fc25 	bl	80006e4 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e2e6      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ea8:	4b48      	ldr	r3, [pc, #288]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f0      	beq.n	8000e96 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eb4:	4b45      	ldr	r3, [pc, #276]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a44      	ldr	r2, [pc, #272]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	493f      	ldr	r1, [pc, #252]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ed2:	4b3e      	ldr	r3, [pc, #248]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	493a      	ldr	r1, [pc, #232]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	604b      	str	r3, [r1, #4]
 8000ee6:	e01a      	b.n	8000f1e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ee8:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a37      	ldr	r2, [pc, #220]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000eee:	f023 0301 	bic.w	r3, r3, #1
 8000ef2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fbf6 	bl	80006e4 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000efc:	f7ff fbf2 	bl	80006e4 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e2b3      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f0      	bne.n	8000efc <HAL_RCC_OscConfig+0x1d4>
 8000f1a:	e000      	b.n	8000f1e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d074      	beq.n	8001014 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d005      	beq.n	8000f3c <HAL_RCC_OscConfig+0x214>
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2b0c      	cmp	r3, #12
 8000f34:	d10e      	bne.n	8000f54 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d10b      	bne.n	8000f54 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d064      	beq.n	8001012 <HAL_RCC_OscConfig+0x2ea>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d160      	bne.n	8001012 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e290      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5c:	d106      	bne.n	8000f6c <HAL_RCC_OscConfig+0x244>
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e01d      	b.n	8000fa8 <HAL_RCC_OscConfig+0x280>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f74:	d10c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x268>
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e00b      	b.n	8000fa8 <HAL_RCC_OscConfig+0x280>
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_RCC_OscConfig+0x2a4>)
 8000fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d01c      	beq.n	8000fea <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fb98 	bl	80006e4 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fb6:	e011      	b.n	8000fdc <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb8:	f7ff fb94 	bl	80006e4 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b64      	cmp	r3, #100	; 0x64
 8000fc4:	d90a      	bls.n	8000fdc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e255      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	08002340 	.word	0x08002340
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fdc:	4bae      	ldr	r3, [pc, #696]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0e7      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x290>
 8000fe8:	e014      	b.n	8001014 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fea:	f7ff fb7b 	bl	80006e4 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fb77 	bl	80006e4 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b64      	cmp	r3, #100	; 0x64
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e238      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001004:	4ba4      	ldr	r3, [pc, #656]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f0      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x2ca>
 8001010:	e000      	b.n	8001014 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001012:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d060      	beq.n	80010e2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2b04      	cmp	r3, #4
 8001024:	d005      	beq.n	8001032 <HAL_RCC_OscConfig+0x30a>
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	2b0c      	cmp	r3, #12
 800102a:	d119      	bne.n	8001060 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d116      	bne.n	8001060 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001032:	4b99      	ldr	r3, [pc, #612]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103a:	2b00      	cmp	r3, #0
 800103c:	d005      	beq.n	800104a <HAL_RCC_OscConfig+0x322>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e215      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104a:	4b93      	ldr	r3, [pc, #588]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	061b      	lsls	r3, r3, #24
 8001058:	498f      	ldr	r1, [pc, #572]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800105a:	4313      	orrs	r3, r2
 800105c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800105e:	e040      	b.n	80010e2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d023      	beq.n	80010b0 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001068:	4b8b      	ldr	r3, [pc, #556]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a8a      	ldr	r2, [pc, #552]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800106e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001074:	f7ff fb36 	bl	80006e4 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107c:	f7ff fb32 	bl	80006e4 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e1f3      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800108e:	4b82      	ldr	r3, [pc, #520]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109a:	4b7f      	ldr	r3, [pc, #508]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	061b      	lsls	r3, r3, #24
 80010a8:	497b      	ldr	r1, [pc, #492]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	604b      	str	r3, [r1, #4]
 80010ae:	e018      	b.n	80010e2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010b0:	4b79      	ldr	r3, [pc, #484]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a78      	ldr	r2, [pc, #480]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80010b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010bc:	f7ff fb12 	bl	80006e4 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c4:	f7ff fb0e 	bl	80006e4 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e1cf      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d6:	4b70      	ldr	r3, [pc, #448]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d03c      	beq.n	8001168 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d01c      	beq.n	8001130 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010f6:	4b68      	ldr	r3, [pc, #416]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80010f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010fc:	4a66      	ldr	r2, [pc, #408]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001106:	f7ff faed 	bl	80006e4 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800110e:	f7ff fae9 	bl	80006e4 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e1aa      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001120:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0ef      	beq.n	800110e <HAL_RCC_OscConfig+0x3e6>
 800112e:	e01b      	b.n	8001168 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001130:	4b59      	ldr	r3, [pc, #356]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001136:	4a58      	ldr	r2, [pc, #352]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001140:	f7ff fad0 	bl	80006e4 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001148:	f7ff facc 	bl	80006e4 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e18d      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800115a:	4b4f      	ldr	r3, [pc, #316]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800115c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1ef      	bne.n	8001148 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80a5 	beq.w	80012c0 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10d      	bne.n	80011a2 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b44      	ldr	r3, [pc, #272]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	4a43      	ldr	r2, [pc, #268]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6593      	str	r3, [r2, #88]	; 0x58
 8001192:	4b41      	ldr	r3, [pc, #260]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800119e:	2301      	movs	r3, #1
 80011a0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a2:	4b3e      	ldr	r3, [pc, #248]	; (800129c <HAL_RCC_OscConfig+0x574>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d118      	bne.n	80011e0 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011ae:	4b3b      	ldr	r3, [pc, #236]	; (800129c <HAL_RCC_OscConfig+0x574>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a3a      	ldr	r2, [pc, #232]	; (800129c <HAL_RCC_OscConfig+0x574>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fa93 	bl	80006e4 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c2:	f7ff fa8f 	bl	80006e4 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e150      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d4:	4b31      	ldr	r3, [pc, #196]	; (800129c <HAL_RCC_OscConfig+0x574>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d108      	bne.n	80011fa <HAL_RCC_OscConfig+0x4d2>
 80011e8:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80011ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ee:	4a2a      	ldr	r2, [pc, #168]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011f8:	e024      	b.n	8001244 <HAL_RCC_OscConfig+0x51c>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b05      	cmp	r3, #5
 8001200:	d110      	bne.n	8001224 <HAL_RCC_OscConfig+0x4fc>
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001208:	4a23      	ldr	r2, [pc, #140]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001218:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001222:	e00f      	b.n	8001244 <HAL_RCC_OscConfig+0x51c>
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122a:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 8001236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800123c:	f023 0304 	bic.w	r3, r3, #4
 8001240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d016      	beq.n	800127a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff fa4a 	bl	80006e4 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001252:	e00a      	b.n	800126a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001254:	f7ff fa46 	bl	80006e4 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e105      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_RCC_OscConfig+0x570>)
 800126c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0ed      	beq.n	8001254 <HAL_RCC_OscConfig+0x52c>
 8001278:	e019      	b.n	80012ae <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127a:	f7ff fa33 	bl	80006e4 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001280:	e00e      	b.n	80012a0 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff fa2f 	bl	80006e4 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001290:	4293      	cmp	r3, r2
 8001292:	d905      	bls.n	80012a0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e0ee      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
 8001298:	40021000 	.word	0x40021000
 800129c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012a0:	4b77      	ldr	r3, [pc, #476]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 80012a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1e9      	bne.n	8001282 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ae:	7ffb      	ldrb	r3, [r7, #31]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d105      	bne.n	80012c0 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b4:	4b72      	ldr	r3, [pc, #456]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b8:	4a71      	ldr	r2, [pc, #452]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 80012ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80d5 	beq.w	8001474 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	f000 808e 	beq.w	80013ee <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d15b      	bne.n	8001392 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012da:	4b69      	ldr	r3, [pc, #420]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a68      	ldr	r2, [pc, #416]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 80012e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e6:	f7ff f9fd 	bl	80006e4 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ee:	f7ff f9f9 	bl	80006e4 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e0ba      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001300:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130c:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	4b5c      	ldr	r3, [pc, #368]	; (8001484 <HAL_RCC_OscConfig+0x75c>)
 8001312:	4013      	ands	r3, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800131c:	3a01      	subs	r2, #1
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	4311      	orrs	r1, r2
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001326:	0212      	lsls	r2, r2, #8
 8001328:	4311      	orrs	r1, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800132e:	0852      	lsrs	r2, r2, #1
 8001330:	3a01      	subs	r2, #1
 8001332:	0552      	lsls	r2, r2, #21
 8001334:	4311      	orrs	r1, r2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800133a:	0852      	lsrs	r2, r2, #1
 800133c:	3a01      	subs	r2, #1
 800133e:	0652      	lsls	r2, r2, #25
 8001340:	4311      	orrs	r1, r2
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001346:	0912      	lsrs	r2, r2, #4
 8001348:	0452      	lsls	r2, r2, #17
 800134a:	430a      	orrs	r2, r1
 800134c:	494c      	ldr	r1, [pc, #304]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 800134e:	4313      	orrs	r3, r2
 8001350:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001352:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a4a      	ldr	r2, [pc, #296]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 8001358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800135e:	4b48      	ldr	r3, [pc, #288]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	4a47      	ldr	r2, [pc, #284]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 8001364:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001368:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136a:	f7ff f9bb 	bl	80006e4 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001372:	f7ff f9b7 	bl	80006e4 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e078      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001384:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x64a>
 8001390:	e070      	b.n	8001474 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a3a      	ldr	r2, [pc, #232]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 8001398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800139c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800139e:	4b38      	ldr	r3, [pc, #224]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d105      	bne.n	80013b6 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	4a34      	ldr	r2, [pc, #208]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 80013b0:	f023 0303 	bic.w	r3, r3, #3
 80013b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	4a31      	ldr	r2, [pc, #196]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 80013bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80013c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff f98d 	bl	80006e4 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ce:	f7ff f989 	bl	80006e4 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e04a      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f0      	bne.n	80013ce <HAL_RCC_OscConfig+0x6a6>
 80013ec:	e042      	b.n	8001474 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e03d      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <HAL_RCC_OscConfig+0x758>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f003 0203 	and.w	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	429a      	cmp	r2, r3
 800140c:	d130      	bne.n	8001470 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	3b01      	subs	r3, #1
 800141a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800141c:	429a      	cmp	r2, r3
 800141e:	d127      	bne.n	8001470 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d11f      	bne.n	8001470 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800143a:	2a07      	cmp	r2, #7
 800143c:	bf14      	ite	ne
 800143e:	2201      	movne	r2, #1
 8001440:	2200      	moveq	r2, #0
 8001442:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001444:	4293      	cmp	r3, r2
 8001446:	d113      	bne.n	8001470 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001452:	085b      	lsrs	r3, r3, #1
 8001454:	3b01      	subs	r3, #1
 8001456:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001458:	429a      	cmp	r2, r3
 800145a:	d109      	bne.n	8001470 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	085b      	lsrs	r3, r3, #1
 8001468:	3b01      	subs	r3, #1
 800146a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	f99d808c 	.word	0xf99d808c

08001488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0c8      	b.n	800162e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800149c:	4b66      	ldr	r3, [pc, #408]	; (8001638 <HAL_RCC_ClockConfig+0x1b0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d910      	bls.n	80014cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b63      	ldr	r3, [pc, #396]	; (8001638 <HAL_RCC_ClockConfig+0x1b0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 0207 	bic.w	r2, r3, #7
 80014b2:	4961      	ldr	r1, [pc, #388]	; (8001638 <HAL_RCC_ClockConfig+0x1b0>)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b5f      	ldr	r3, [pc, #380]	; (8001638 <HAL_RCC_ClockConfig+0x1b0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0b0      	b.n	800162e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d04c      	beq.n	8001572 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d107      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e0:	4b56      	ldr	r3, [pc, #344]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d121      	bne.n	8001530 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e09e      	b.n	800162e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f8:	4b50      	ldr	r3, [pc, #320]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d115      	bne.n	8001530 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e092      	b.n	800162e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d107      	bne.n	8001520 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001510:	4b4a      	ldr	r3, [pc, #296]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d109      	bne.n	8001530 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e086      	b.n	800162e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001520:	4b46      	ldr	r3, [pc, #280]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e07e      	b.n	800162e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001530:	4b42      	ldr	r3, [pc, #264]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f023 0203 	bic.w	r2, r3, #3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	493f      	ldr	r1, [pc, #252]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 800153e:	4313      	orrs	r3, r2
 8001540:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001542:	f7ff f8cf 	bl	80006e4 <HAL_GetTick>
 8001546:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001548:	e00a      	b.n	8001560 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154a:	f7ff f8cb 	bl	80006e4 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e066      	b.n	800162e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 020c 	and.w	r2, r3, #12
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	429a      	cmp	r2, r3
 8001570:	d1eb      	bne.n	800154a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d008      	beq.n	8001590 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800157e:	4b2f      	ldr	r3, [pc, #188]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	492c      	ldr	r1, [pc, #176]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001590:	4b29      	ldr	r3, [pc, #164]	; (8001638 <HAL_RCC_ClockConfig+0x1b0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d210      	bcs.n	80015c0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <HAL_RCC_ClockConfig+0x1b0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 0207 	bic.w	r2, r3, #7
 80015a6:	4924      	ldr	r1, [pc, #144]	; (8001638 <HAL_RCC_ClockConfig+0x1b0>)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_RCC_ClockConfig+0x1b0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e036      	b.n	800162e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4918      	ldr	r1, [pc, #96]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4910      	ldr	r1, [pc, #64]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015fe:	f000 f825 	bl	800164c <HAL_RCC_GetSysClockFreq>
 8001602:	4601      	mov	r1, r0
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_RCC_ClockConfig+0x1b4>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	5cd3      	ldrb	r3, [r2, r3]
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	fa21 f303 	lsr.w	r3, r1, r3
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f824 	bl	8000670 <HAL_InitTick>
 8001628:	4603      	mov	r3, r0
 800162a:	72fb      	strb	r3, [r7, #11]

  return status;
 800162c:	7afb      	ldrb	r3, [r7, #11]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40022000 	.word	0x40022000
 800163c:	40021000 	.word	0x40021000
 8001640:	08002340 	.word	0x08002340
 8001644:	20000008 	.word	0x20000008
 8001648:	20000000 	.word	0x20000000

0800164c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165a:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <HAL_RCC_GetSysClockFreq+0x104>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001664:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <HAL_RCC_GetSysClockFreq+0x104>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x34>
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	2b0c      	cmp	r3, #12
 8001678:	d121      	bne.n	80016be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d11e      	bne.n	80016be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001680:	4b33      	ldr	r3, [pc, #204]	; (8001750 <HAL_RCC_GetSysClockFreq+0x104>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d107      	bne.n	800169c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800168c:	4b30      	ldr	r3, [pc, #192]	; (8001750 <HAL_RCC_GetSysClockFreq+0x104>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001692:	0a1b      	lsrs	r3, r3, #8
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	e005      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800169c:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <HAL_RCC_GetSysClockFreq+0x104>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016a8:	4a2a      	ldr	r2, [pc, #168]	; (8001754 <HAL_RCC_GetSysClockFreq+0x108>)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10d      	bne.n	80016d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d102      	bne.n	80016ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016c4:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	e004      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_RCC_GetSysClockFreq+0x110>)
 80016d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	2b0c      	cmp	r3, #12
 80016d8:	d133      	bne.n	8001742 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <HAL_RCC_GetSysClockFreq+0x104>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d002      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0xa4>
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d003      	beq.n	80016f6 <HAL_RCC_GetSysClockFreq+0xaa>
 80016ee:	e005      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016f2:	617b      	str	r3, [r7, #20]
      break;
 80016f4:	e005      	b.n	8001702 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_GetSysClockFreq+0x110>)
 80016f8:	617b      	str	r3, [r7, #20]
      break;
 80016fa:	e002      	b.n	8001702 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	617b      	str	r3, [r7, #20]
      break;
 8001700:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_RCC_GetSysClockFreq+0x104>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	3301      	adds	r3, #1
 800170e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_RCC_GetSysClockFreq+0x104>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	fb02 f203 	mul.w	r2, r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_RCC_GetSysClockFreq+0x104>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0e5b      	lsrs	r3, r3, #25
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	3301      	adds	r3, #1
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001740:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001742:	69bb      	ldr	r3, [r7, #24]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3724      	adds	r7, #36	; 0x24
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40021000 	.word	0x40021000
 8001754:	08002350 	.word	0x08002350
 8001758:	00f42400 	.word	0x00f42400
 800175c:	007a1200 	.word	0x007a1200

08001760 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800176c:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001778:	f7ff fa72 	bl	8000c60 <HAL_PWREx_GetVoltageRange>
 800177c:	6178      	str	r0, [r7, #20]
 800177e:	e014      	b.n	80017aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	4a24      	ldr	r2, [pc, #144]	; (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178a:	6593      	str	r3, [r2, #88]	; 0x58
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001798:	f7ff fa62 	bl	8000c60 <HAL_PWREx_GetVoltageRange>
 800179c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800179e:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b0:	d10b      	bne.n	80017ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b80      	cmp	r3, #128	; 0x80
 80017b6:	d919      	bls.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2ba0      	cmp	r3, #160	; 0xa0
 80017bc:	d902      	bls.n	80017c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017be:	2302      	movs	r3, #2
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	e013      	b.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017c4:	2301      	movs	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	e010      	b.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b80      	cmp	r3, #128	; 0x80
 80017ce:	d902      	bls.n	80017d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017d0:	2303      	movs	r3, #3
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	e00a      	b.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b80      	cmp	r3, #128	; 0x80
 80017da:	d102      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017dc:	2302      	movs	r3, #2
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	e004      	b.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b70      	cmp	r3, #112	; 0x70
 80017e6:	d101      	bne.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017e8:	2301      	movs	r3, #1
 80017ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 0207 	bic.w	r2, r3, #7
 80017f4:	4909      	ldr	r1, [pc, #36]	; (800181c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	429a      	cmp	r2, r3
 8001808:	d001      	beq.n	800180e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	40022000 	.word	0x40022000

08001820 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e083      	b.n	800193c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d106      	bne.n	800184e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7fe fe95 	bl	8000578 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2202      	movs	r2, #2
 8001852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001864:	f023 0307 	bic.w	r3, r3, #7
 8001868:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3304      	adds	r3, #4
 8001872:	4619      	mov	r1, r3
 8001874:	4610      	mov	r0, r2
 8001876:	f000 fa27 	bl	8001cc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018a2:	f023 0303 	bic.w	r3, r3, #3
 80018a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	4313      	orrs	r3, r2
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80018c0:	f023 030c 	bic.w	r3, r3, #12
 80018c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80018cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	4313      	orrs	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	011a      	lsls	r2, r3, #4
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	031b      	lsls	r3, r3, #12
 80018f0:	4313      	orrs	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80018fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001906:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	4313      	orrs	r3, r2
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <HAL_TIM_Encoder_Start+0x16>
 8001954:	2b04      	cmp	r3, #4
 8001956:	d008      	beq.n	800196a <HAL_TIM_Encoder_Start+0x26>
 8001958:	e00f      	b.n	800197a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2201      	movs	r2, #1
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fa4a 	bl	8001dfc <TIM_CCxChannelCmd>
      break;
 8001968:	e016      	b.n	8001998 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2201      	movs	r2, #1
 8001970:	2104      	movs	r1, #4
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fa42 	bl	8001dfc <TIM_CCxChannelCmd>
      break;
 8001978:	e00e      	b.n	8001998 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2201      	movs	r2, #1
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fa3a 	bl	8001dfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	2104      	movs	r1, #4
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fa33 	bl	8001dfc <TIM_CCxChannelCmd>
      break;
 8001996:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d122      	bne.n	8001a0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d11b      	bne.n	8001a0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f06f 0202 	mvn.w	r2, #2
 80019de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7fe fbe7 	bl	80001c8 <HAL_TIM_IC_CaptureCallback>
 80019fa:	e005      	b.n	8001a08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f945 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f94c 	bl	8001ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d122      	bne.n	8001a62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d11b      	bne.n	8001a62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f06f 0204 	mvn.w	r2, #4
 8001a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7fe fbbd 	bl	80001c8 <HAL_TIM_IC_CaptureCallback>
 8001a4e:	e005      	b.n	8001a5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f91b 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f922 	bl	8001ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d122      	bne.n	8001ab6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d11b      	bne.n	8001ab6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f06f 0208 	mvn.w	r2, #8
 8001a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7fe fb93 	bl	80001c8 <HAL_TIM_IC_CaptureCallback>
 8001aa2:	e005      	b.n	8001ab0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8f1 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f8f8 	bl	8001ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b10      	cmp	r3, #16
 8001ac2:	d122      	bne.n	8001b0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b10      	cmp	r3, #16
 8001ad0:	d11b      	bne.n	8001b0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f06f 0210 	mvn.w	r2, #16
 8001ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2208      	movs	r2, #8
 8001ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7fe fb69 	bl	80001c8 <HAL_TIM_IC_CaptureCallback>
 8001af6:	e005      	b.n	8001b04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f8c7 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8ce 	bl	8001ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d10e      	bne.n	8001b36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d107      	bne.n	8001b36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f06f 0201 	mvn.w	r2, #1
 8001b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f8a1 	bl	8001c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b40:	2b80      	cmp	r3, #128	; 0x80
 8001b42:	d10e      	bne.n	8001b62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	2b80      	cmp	r3, #128	; 0x80
 8001b50:	d107      	bne.n	8001b62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f9d9 	bl	8001f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b70:	d10e      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7c:	2b80      	cmp	r3, #128	; 0x80
 8001b7e:	d107      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f9cc 	bl	8001f28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9a:	2b40      	cmp	r3, #64	; 0x40
 8001b9c:	d10e      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba8:	2b40      	cmp	r3, #64	; 0x40
 8001baa:	d107      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f87c 	bl	8001cb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	2b20      	cmp	r3, #32
 8001bc8:	d10e      	bne.n	8001be8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	d107      	bne.n	8001be8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0220 	mvn.w	r2, #32
 8001be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f98c 	bl	8001f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b0c      	cmp	r3, #12
 8001c02:	d831      	bhi.n	8001c68 <HAL_TIM_ReadCapturedValue+0x78>
 8001c04:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <HAL_TIM_ReadCapturedValue+0x1c>)
 8001c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0a:	bf00      	nop
 8001c0c:	08001c41 	.word	0x08001c41
 8001c10:	08001c69 	.word	0x08001c69
 8001c14:	08001c69 	.word	0x08001c69
 8001c18:	08001c69 	.word	0x08001c69
 8001c1c:	08001c4b 	.word	0x08001c4b
 8001c20:	08001c69 	.word	0x08001c69
 8001c24:	08001c69 	.word	0x08001c69
 8001c28:	08001c69 	.word	0x08001c69
 8001c2c:	08001c55 	.word	0x08001c55
 8001c30:	08001c69 	.word	0x08001c69
 8001c34:	08001c69 	.word	0x08001c69
 8001c38:	08001c69 	.word	0x08001c69
 8001c3c:	08001c5f 	.word	0x08001c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c46:	60fb      	str	r3, [r7, #12]

      break;
 8001c48:	e00f      	b.n	8001c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	60fb      	str	r3, [r7, #12]

      break;
 8001c52:	e00a      	b.n	8001c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5a:	60fb      	str	r3, [r7, #12]

      break;
 8001c5c:	e005      	b.n	8001c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	60fb      	str	r3, [r7, #12]

      break;
 8001c66:	e000      	b.n	8001c6a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001c68:	bf00      	nop
  }

  return tmpreg;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a40      	ldr	r2, [pc, #256]	; (8001ddc <TIM_Base_SetConfig+0x114>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d013      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce6:	d00f      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a3d      	ldr	r2, [pc, #244]	; (8001de0 <TIM_Base_SetConfig+0x118>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00b      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a3c      	ldr	r2, [pc, #240]	; (8001de4 <TIM_Base_SetConfig+0x11c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3b      	ldr	r2, [pc, #236]	; (8001de8 <TIM_Base_SetConfig+0x120>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d003      	beq.n	8001d08 <TIM_Base_SetConfig+0x40>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a3a      	ldr	r2, [pc, #232]	; (8001dec <TIM_Base_SetConfig+0x124>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d108      	bne.n	8001d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a2f      	ldr	r2, [pc, #188]	; (8001ddc <TIM_Base_SetConfig+0x114>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01f      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d28:	d01b      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a2c      	ldr	r2, [pc, #176]	; (8001de0 <TIM_Base_SetConfig+0x118>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d017      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a2b      	ldr	r2, [pc, #172]	; (8001de4 <TIM_Base_SetConfig+0x11c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a2a      	ldr	r2, [pc, #168]	; (8001de8 <TIM_Base_SetConfig+0x120>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00f      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a29      	ldr	r2, [pc, #164]	; (8001dec <TIM_Base_SetConfig+0x124>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00b      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a28      	ldr	r2, [pc, #160]	; (8001df0 <TIM_Base_SetConfig+0x128>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d007      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a27      	ldr	r2, [pc, #156]	; (8001df4 <TIM_Base_SetConfig+0x12c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d003      	beq.n	8001d62 <TIM_Base_SetConfig+0x9a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a26      	ldr	r2, [pc, #152]	; (8001df8 <TIM_Base_SetConfig+0x130>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d108      	bne.n	8001d74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <TIM_Base_SetConfig+0x114>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00f      	beq.n	8001dc0 <TIM_Base_SetConfig+0xf8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <TIM_Base_SetConfig+0x124>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00b      	beq.n	8001dc0 <TIM_Base_SetConfig+0xf8>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <TIM_Base_SetConfig+0x128>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d007      	beq.n	8001dc0 <TIM_Base_SetConfig+0xf8>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <TIM_Base_SetConfig+0x12c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d003      	beq.n	8001dc0 <TIM_Base_SetConfig+0xf8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a0f      	ldr	r2, [pc, #60]	; (8001df8 <TIM_Base_SetConfig+0x130>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d103      	bne.n	8001dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	615a      	str	r2, [r3, #20]
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40012c00 	.word	0x40012c00
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40000800 	.word	0x40000800
 8001de8:	40000c00 	.word	0x40000c00
 8001dec:	40013400 	.word	0x40013400
 8001df0:	40014000 	.word	0x40014000
 8001df4:	40014400 	.word	0x40014400
 8001df8:	40014800 	.word	0x40014800

08001dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	2201      	movs	r2, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a1a      	ldr	r2, [r3, #32]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	401a      	ands	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6a1a      	ldr	r2, [r3, #32]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	431a      	orrs	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	621a      	str	r2, [r3, #32]
}
 8001e3a:	bf00      	nop
 8001e3c:	371c      	adds	r7, #28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e045      	b.n	8001eec <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d004      	beq.n	8001e94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1b      	ldr	r2, [pc, #108]	; (8001efc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d108      	bne.n	8001ea6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001e9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ebe:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40012c00 	.word	0x40012c00
 8001efc:	40013400 	.word	0x40013400

08001f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <Init_Wheel_Speed_Provision>:
volatile uint32_t Enc1_value;
volatile uint32_t Enc1_value_old;
volatile uint32_t Enc1_diff;

void Init_Wheel_Speed_Provision(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af02      	add	r7, sp, #8
	TIM_ENC_Typedef TIM_handler = {0};
 8001f42:	463b      	mov	r3, r7
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
 8001f50:	615a      	str	r2, [r3, #20]

	#ifdef MOTOR1
		TIM_handler.TIMx = ENC_1A_TIM;
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <Init_Wheel_Speed_Provision+0x70>)
 8001f54:	603b      	str	r3, [r7, #0]
		TIM_handler.TIM_channelx = ENC_1A_TIM_CHANNEL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	80bb      	strh	r3, [r7, #4]
		TIM_handler.GPIOx_ch1 = ENC_1A_GPIO;
 8001f5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f5e:	60bb      	str	r3, [r7, #8]
		TIM_handler.GPIOx_ch2 = ENC_1B_GPIO;
 8001f60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f64:	60fb      	str	r3, [r7, #12]
		TIM_handler.GPIO_Pinx_ch1 = ENC_1A_GPIO_PIN;
 8001f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f6a:	823b      	strh	r3, [r7, #16]
		TIM_handler.GPIO_Pinx_ch2 = ENC_1B_GPIO_PIN;
 8001f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f70:	827b      	strh	r3, [r7, #18]
		TIM_handler.GPIO_AlternateFunctionx = ENC_1A_GPIO_AF;
 8001f72:	2301      	movs	r3, #1
 8001f74:	753b      	strb	r3, [r7, #20]

		TIMx_ENC_Init(TIM_handler);
 8001f76:	466a      	mov	r2, sp
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f80:	e882 0003 	stmia.w	r2, {r0, r1}
 8001f84:	463b      	mov	r3, r7
 8001f86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f88:	f7fe fa04 	bl	8000394 <TIMx_ENC_Init>
		TIMx_ENC_Start(TIM_handler);
 8001f8c:	466a      	mov	r2, sp
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f96:	e882 0003 	stmia.w	r2, {r0, r1}
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f9e:	f7fe fb31 	bl	8000604 <TIMx_ENC_Start>
		TIM_handler.GPIO_AlternateFunctionx = ENC_2A_GPIO_AF;

		TIMx_ENC_Init(TIM_handler);
		TIMx_ENC_Start(TIM_handler);
	#endif
}
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40012c00 	.word	0x40012c00

08001fb0 <Provide_Wheel_Speeds>:


void Provide_Wheel_Speeds(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
	WheelSpeed_Typedef Provided_wheel_speeds;
	uint32_t temp;
	Enc1_value_old = Enc1_value;
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <Provide_Wheel_Speeds+0x38>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <Provide_Wheel_Speeds+0x3c>)
 8001fbc:	6013      	str	r3, [r2, #0]
	Enc1_value = ENC_1A_TIM->CNT;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <Provide_Wheel_Speeds+0x40>)
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <Provide_Wheel_Speeds+0x38>)
 8001fc4:	6013      	str	r3, [r2, #0]
	temp= ENC_1A_TIM->CNT;
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <Provide_Wheel_Speeds+0x40>)
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	617b      	str	r3, [r7, #20]
	Enc1_diff = Enc1_value - Enc1_value_old;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <Provide_Wheel_Speeds+0x38>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <Provide_Wheel_Speeds+0x3c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <Provide_Wheel_Speeds+0x44>)
 8001fd8:	6013      	str	r3, [r2, #0]

}
 8001fda:	bf00      	nop
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000094 	.word	0x20000094
 8001fec:	20000090 	.word	0x20000090
 8001ff0:	40012c00 	.word	0x40012c00
 8001ff4:	2000008c 	.word	0x2000008c

08001ff8 <Write_IC_Channel1_Raw_data>:
{
	(* data) = Timer_IC_Channel1_Raw_data;
}

void Write_IC_Channel1_Raw_data(uint32_t * data)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel1_Raw_data = (* data);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a03      	ldr	r2, [pc, #12]	; (8002014 <Write_IC_Channel1_Raw_data+0x1c>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	2000009c 	.word	0x2000009c

08002018 <Write_IC_Channel2_Raw_data>:
{
	(* data) = Timer_IC_Channel2_Raw_data;
}

void Write_IC_Channel2_Raw_data(uint32_t * data)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel2_Raw_data = (* data);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a03      	ldr	r2, [pc, #12]	; (8002034 <Write_IC_Channel2_Raw_data+0x1c>)
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	200000a8 	.word	0x200000a8

08002038 <Write_IC_Channel3_Raw_data>:
{
	(* data) = Timer_IC_Channel3_Raw_data;
}

void Write_IC_Channel3_Raw_data(uint32_t * data)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel3_Raw_data = (* data);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a03      	ldr	r2, [pc, #12]	; (8002054 <Write_IC_Channel3_Raw_data+0x1c>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	200000a0 	.word	0x200000a0

08002058 <Init_System_Startup>:
#include "Initialize_System.h"

TIM_HandleTypeDef htim1;

void Init_System_Startup(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	//Remote_Control_init();
	Init_Wheel_Speed_Provision();
 800205c:	f7ff ff6e 	bl	8001f3c <Init_Wheel_Speed_Provision>
	//Motor_Init();
	//Motor_Start();
	//Calibrate_Remote_Control();
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800206a:	f7fe fae1 	bl	8000630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800206e:	f000 f80d 	bl	800208c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */
  Init_System_Startup();
 8002072:	f7ff fff1 	bl	8002058 <Init_System_Startup>
  while (1)
  {
	  //Provide_Robot_Speed();
	  //Calculate_Wheel_Speeds();
	  //Motorx_Set_Speed();
	  Provide_Wheel_Speeds();
 8002076:	f7ff ff9b 	bl	8001fb0 <Provide_Wheel_Speeds>
	  get_sys_count++;
 800207a:	4b03      	ldr	r3, [pc, #12]	; (8002088 <main+0x24>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a01      	ldr	r2, [pc, #4]	; (8002088 <main+0x24>)
 8002082:	6013      	str	r3, [r2, #0]
	  Provide_Wheel_Speeds();
 8002084:	e7f7      	b.n	8002076 <main+0x12>
 8002086:	bf00      	nop
 8002088:	2000002c 	.word	0x2000002c

0800208c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b096      	sub	sp, #88	; 0x58
 8002090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	2244      	movs	r2, #68	; 0x44
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f93c 	bl	8002318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a0:	463b      	mov	r3, r7
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020ae:	2302      	movs	r3, #2
 80020b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020b8:	2310      	movs	r3, #16
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020bc:	2302      	movs	r3, #2
 80020be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020c0:	2302      	movs	r3, #2
 80020c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80020c4:	2301      	movs	r3, #1
 80020c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80020c8:	2308      	movs	r3, #8
 80020ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80020cc:	2307      	movs	r3, #7
 80020ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020d0:	2302      	movs	r3, #2
 80020d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020d4:	2302      	movs	r3, #2
 80020d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fe23 	bl	8000d28 <HAL_RCC_OscConfig>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <SystemClock_Config+0x60>
  {
    Error_Handler();
 80020e8:	f000 f830 	bl	800214c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ec:	230f      	movs	r3, #15
 80020ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020f0:	2303      	movs	r3, #3
 80020f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002100:	463b      	mov	r3, r7
 8002102:	2103      	movs	r1, #3
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff f9bf 	bl	8001488 <HAL_RCC_ClockConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002110:	f000 f81c 	bl	800214c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002114:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002118:	f7fe fdb0 	bl	8000c7c <HAL_PWREx_ControlVoltageScaling>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002122:	f000 f813 	bl	800214c <Error_Handler>
  }
}
 8002126:	bf00      	nop
 8002128:	3758      	adds	r7, #88	; 0x58
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <SysTick_Handler>:

}

/* USER CODE BEGIN 4 */
void SysTick_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
    ++sys_count;
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <SysTick_Handler+0x18>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	4a03      	ldr	r2, [pc, #12]	; (8002148 <SysTick_Handler+0x18>)
 800213c:	6013      	str	r3, [r2, #0]
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20000028 	.word	0x20000028

0800214c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1);
 8002150:	e7fe      	b.n	8002150 <Error_Handler+0x4>
	...

08002154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_MspInit+0x44>)
 800215c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215e:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_MspInit+0x44>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6613      	str	r3, [r2, #96]	; 0x60
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_MspInit+0x44>)
 8002168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_MspInit+0x44>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <HAL_MspInit+0x44>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217c:	6593      	str	r3, [r2, #88]	; 0x58
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_MspInit+0x44>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000

0800219c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <HardFault_Handler+0x4>

080021b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <MemManage_Handler+0x4>

080021b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ba:	e7fe      	b.n	80021ba <BusFault_Handler+0x4>

080021bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <UsageFault_Handler+0x4>

080021c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <TIM1_CC_IRQHandler>:

/**
	 * @brief This function handles TIM1 capture compare interrupt.
	 */
void TIM1_CC_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <TIM1_CC_IRQHandler+0x10>)
 80021f2:	f7ff fbde 	bl	80019b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200000dc 	.word	0x200000dc

08002200 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002204:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002208:	f7fe fd06 	bl	8000c18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}

08002210 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <SystemInit+0x64>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	4a16      	ldr	r2, [pc, #88]	; (8002274 <SystemInit+0x64>)
 800221c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <SystemInit+0x68>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a13      	ldr	r2, [pc, #76]	; (8002278 <SystemInit+0x68>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <SystemInit+0x68>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <SystemInit+0x68>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <SystemInit+0x68>)
 800223c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002240:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002244:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <SystemInit+0x68>)
 8002248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800224c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <SystemInit+0x68>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <SystemInit+0x68>)
 8002254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <SystemInit+0x68>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SystemInit+0x64>)
 8002262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002266:	609a      	str	r2, [r3, #8]
#endif
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00
 8002278:	40021000 	.word	0x40021000

0800227c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800227c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002280:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002282:	e003      	b.n	800228c <LoopCopyDataInit>

08002284 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002286:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002288:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800228a:	3104      	adds	r1, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800228c:	480b      	ldr	r0, [pc, #44]	; (80022bc <LoopForever+0xa>)
	ldr	r3, =_edata
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002290:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002292:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002294:	d3f6      	bcc.n	8002284 <CopyDataInit>
	ldr	r2, =_sbss
 8002296:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002298:	e002      	b.n	80022a0 <LoopFillZerobss>

0800229a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800229a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800229c:	f842 3b04 	str.w	r3, [r2], #4

080022a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <LoopForever+0x16>)
	cmp	r2, r3
 80022a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022a4:	d3f9      	bcc.n	800229a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022a6:	f7ff ffb3 	bl	8002210 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022aa:	f000 f811 	bl	80022d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ae:	f7ff fed9 	bl	8002064 <main>

080022b2 <LoopForever>:

LoopForever:
    b LoopForever
 80022b2:	e7fe      	b.n	80022b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022b4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80022b8:	08002388 	.word	0x08002388
	ldr	r0, =_sdata
 80022bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80022c0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80022c4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80022c8:	2000011c 	.word	0x2000011c

080022cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022cc:	e7fe      	b.n	80022cc <ADC1_2_IRQHandler>
	...

080022d0 <__libc_init_array>:
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	4e0d      	ldr	r6, [pc, #52]	; (8002308 <__libc_init_array+0x38>)
 80022d4:	4c0d      	ldr	r4, [pc, #52]	; (800230c <__libc_init_array+0x3c>)
 80022d6:	1ba4      	subs	r4, r4, r6
 80022d8:	10a4      	asrs	r4, r4, #2
 80022da:	2500      	movs	r5, #0
 80022dc:	42a5      	cmp	r5, r4
 80022de:	d109      	bne.n	80022f4 <__libc_init_array+0x24>
 80022e0:	4e0b      	ldr	r6, [pc, #44]	; (8002310 <__libc_init_array+0x40>)
 80022e2:	4c0c      	ldr	r4, [pc, #48]	; (8002314 <__libc_init_array+0x44>)
 80022e4:	f000 f820 	bl	8002328 <_init>
 80022e8:	1ba4      	subs	r4, r4, r6
 80022ea:	10a4      	asrs	r4, r4, #2
 80022ec:	2500      	movs	r5, #0
 80022ee:	42a5      	cmp	r5, r4
 80022f0:	d105      	bne.n	80022fe <__libc_init_array+0x2e>
 80022f2:	bd70      	pop	{r4, r5, r6, pc}
 80022f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022f8:	4798      	blx	r3
 80022fa:	3501      	adds	r5, #1
 80022fc:	e7ee      	b.n	80022dc <__libc_init_array+0xc>
 80022fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002302:	4798      	blx	r3
 8002304:	3501      	adds	r5, #1
 8002306:	e7f2      	b.n	80022ee <__libc_init_array+0x1e>
 8002308:	08002380 	.word	0x08002380
 800230c:	08002380 	.word	0x08002380
 8002310:	08002380 	.word	0x08002380
 8002314:	08002384 	.word	0x08002384

08002318 <memset>:
 8002318:	4402      	add	r2, r0
 800231a:	4603      	mov	r3, r0
 800231c:	4293      	cmp	r3, r2
 800231e:	d100      	bne.n	8002322 <memset+0xa>
 8002320:	4770      	bx	lr
 8002322:	f803 1b01 	strb.w	r1, [r3], #1
 8002326:	e7f9      	b.n	800231c <memset+0x4>

08002328 <_init>:
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232a:	bf00      	nop
 800232c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232e:	bc08      	pop	{r3}
 8002330:	469e      	mov	lr, r3
 8002332:	4770      	bx	lr

08002334 <_fini>:
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	bf00      	nop
 8002338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233a:	bc08      	pop	{r3}
 800233c:	469e      	mov	lr, r3
 800233e:	4770      	bx	lr
