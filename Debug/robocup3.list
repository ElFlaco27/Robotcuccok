
robocup3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a2c  08003a2c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003a2c  08003a2c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a2c  08003a2c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a30  08003a30  00013a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e1c  20000010  08003a44  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e2c  08003a44  00020e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137d8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b6e  00000000  00000000  00033818  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001100  00000000  00000000  00036388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  00037488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027f5b  00000000  00000000  00038420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e787  00000000  00000000  0006037b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4bb1  00000000  00000000  0006eb02  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001636b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044e0  00000000  00000000  00163730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003958 	.word	0x08003958

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003958 	.word	0x08003958

080001d0 <HAL_TIM_IC_CaptureCallback>:
	TIM_handler.Instance = config.TIMx;
	HAL_TIM_IC_Stop_IT(&TIM_handler, config.TIM_channelx);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	uint32_t value2;
	uint32_t Diff_value;
	if((htim->Instance == IC_1_TIM) && (htim->Channel == IC_1_TIM_ACT_CHANNEL))
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a68      	ldr	r2, [pc, #416]	; (8000380 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d13f      	bne.n	8000262 <HAL_TIM_IC_CaptureCallback+0x92>
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	7f1b      	ldrb	r3, [r3, #28]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d13b      	bne.n	8000262 <HAL_TIM_IC_CaptureCallback+0x92>
	{
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 80001ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001ee:	691b      	ldr	r3, [r3, #16]
 80001f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00a      	beq.n	800020e <HAL_TIM_IC_CaptureCallback+0x3e>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_1_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_1_TIM_CHANNEL);
 80001f8:	2100      	movs	r1, #0
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f001 fd60 	bl	8001cc0 <HAL_TIM_ReadCapturedValue>
 8000200:	4602      	mov	r2, r0
 8000202:	4b60      	ldr	r3, [pc, #384]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000204:	601a      	str	r2, [r3, #0]
			TIM_IC_1_CaptureIndex = 1;
 8000206:	4b60      	ldr	r3, [pc, #384]	; (8000388 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000208:	2201      	movs	r2, #1
 800020a:	601a      	str	r2, [r3, #0]
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 800020c:	e0b1      	b.n	8000372 <HAL_TIM_IC_CaptureCallback+0x1a2>
		}
		else if(TIM_IC_1_CaptureIndex == 1)
 800020e:	4b5e      	ldr	r3, [pc, #376]	; (8000388 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	2b01      	cmp	r3, #1
 8000214:	f040 80ad 	bne.w	8000372 <HAL_TIM_IC_CaptureCallback+0x1a2>
		{
			 /* Get the 2nd Input Capture value */
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_1_TIM_CHANNEL);
 8000218:	2100      	movs	r1, #0
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f001 fd50 	bl	8001cc0 <HAL_TIM_ReadCapturedValue>
 8000220:	60f8      	str	r0, [r7, #12]

			 /* Capture computation */
			 if (value2 > TIM_IC_1_Value_1)
 8000222:	4b58      	ldr	r3, [pc, #352]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	68fa      	ldr	r2, [r7, #12]
 8000228:	429a      	cmp	r2, r3
 800022a:	d905      	bls.n	8000238 <HAL_TIM_IC_CaptureCallback+0x68>
			 {
				 Diff_value = (value2 - TIM_IC_1_Value_1);
 800022c:	4b55      	ldr	r3, [pc, #340]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	1ad3      	subs	r3, r2, r3
 8000234:	60bb      	str	r3, [r7, #8]
 8000236:	e00b      	b.n	8000250 <HAL_TIM_IC_CaptureCallback+0x80>
			 }
			 else if (value2 < TIM_IC_1_Value_1)
 8000238:	4b52      	ldr	r3, [pc, #328]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	429a      	cmp	r2, r3
 8000240:	d206      	bcs.n	8000250 <HAL_TIM_IC_CaptureCallback+0x80>
			 {
				 /* 0xFFFF is max TIM1_CCRx value */
				 Diff_value = ((65535 - TIM_IC_1_Value_1) + value2) + 1;
 8000242:	4b50      	ldr	r3, [pc, #320]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	68fa      	ldr	r2, [r7, #12]
 8000248:	1ad3      	subs	r3, r2, r3
 800024a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800024e:	60bb      	str	r3, [r7, #8]
			 }
			 Write_IC_Channel1_Raw_data(&Diff_value);
 8000250:	f107 0308 	add.w	r3, r7, #8
 8000254:	4618      	mov	r0, r3
 8000256:	f003 f923 	bl	80034a0 <Write_IC_Channel1_Raw_data>
			 TIM_IC_1_CaptureIndex = 0;
 800025a:	4b4b      	ldr	r3, [pc, #300]	; (8000388 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 8000260:	e087      	b.n	8000372 <HAL_TIM_IC_CaptureCallback+0x1a2>
		}
	}
#if (IC_IN_USE>1)
	else if((htim->Instance == IC_2_TIM) && (htim->Channel == IC_2_TIM_ACT_CHANNEL))
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a46      	ldr	r2, [pc, #280]	; (8000380 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d13e      	bne.n	80002ea <HAL_TIM_IC_CaptureCallback+0x11a>
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	7f1b      	ldrb	r3, [r3, #28]
 8000270:	2b02      	cmp	r3, #2
 8000272:	d13a      	bne.n	80002ea <HAL_TIM_IC_CaptureCallback+0x11a>
	{
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 8000274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000278:	691b      	ldr	r3, [r3, #16]
 800027a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800027e:	2b00      	cmp	r3, #0
 8000280:	d00a      	beq.n	8000298 <HAL_TIM_IC_CaptureCallback+0xc8>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_2_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_2_TIM_CHANNEL);
 8000282:	2104      	movs	r1, #4
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	f001 fd1b 	bl	8001cc0 <HAL_TIM_ReadCapturedValue>
 800028a:	4602      	mov	r2, r0
 800028c:	4b3f      	ldr	r3, [pc, #252]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1bc>)
 800028e:	601a      	str	r2, [r3, #0]
			TIM_IC_2_CaptureIndex = 1;
 8000290:	4b3f      	ldr	r3, [pc, #252]	; (8000390 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8000292:	2201      	movs	r2, #1
 8000294:	601a      	str	r2, [r3, #0]
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 8000296:	e06e      	b.n	8000376 <HAL_TIM_IC_CaptureCallback+0x1a6>
		}
		else if(TIM_IC_2_CaptureIndex == 1)
 8000298:	4b3d      	ldr	r3, [pc, #244]	; (8000390 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d16a      	bne.n	8000376 <HAL_TIM_IC_CaptureCallback+0x1a6>
		{
			 /* Get the 2nd Input Capture value */
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_2_TIM_CHANNEL);
 80002a0:	2104      	movs	r1, #4
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f001 fd0c 	bl	8001cc0 <HAL_TIM_ReadCapturedValue>
 80002a8:	60f8      	str	r0, [r7, #12]

			 /* Capture computation */
			 if (value2 > TIM_IC_2_Value_1)
 80002aa:	4b38      	ldr	r3, [pc, #224]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	68fa      	ldr	r2, [r7, #12]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d905      	bls.n	80002c0 <HAL_TIM_IC_CaptureCallback+0xf0>
			 {
				 Diff_value = (value2 - TIM_IC_2_Value_1);
 80002b4:	4b35      	ldr	r3, [pc, #212]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	68fa      	ldr	r2, [r7, #12]
 80002ba:	1ad3      	subs	r3, r2, r3
 80002bc:	60bb      	str	r3, [r7, #8]
 80002be:	e00b      	b.n	80002d8 <HAL_TIM_IC_CaptureCallback+0x108>
			 }
			 else if (value2 < TIM_IC_2_Value_1)
 80002c0:	4b32      	ldr	r3, [pc, #200]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	68fa      	ldr	r2, [r7, #12]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d206      	bcs.n	80002d8 <HAL_TIM_IC_CaptureCallback+0x108>
			 {
				 /* 0xFFFF is max TIM1_CCRx value */
				 Diff_value = ((65535 - TIM_IC_2_Value_1) + value2) + 1;
 80002ca:	4b30      	ldr	r3, [pc, #192]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	68fa      	ldr	r2, [r7, #12]
 80002d0:	1ad3      	subs	r3, r2, r3
 80002d2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80002d6:	60bb      	str	r3, [r7, #8]
			 }
			 Write_IC_Channel2_Raw_data(&Diff_value);
 80002d8:	f107 0308 	add.w	r3, r7, #8
 80002dc:	4618      	mov	r0, r3
 80002de:	f003 f8ef 	bl	80034c0 <Write_IC_Channel2_Raw_data>
			 TIM_IC_2_CaptureIndex = 0;
 80002e2:	4b2b      	ldr	r3, [pc, #172]	; (8000390 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 80002e8:	e045      	b.n	8000376 <HAL_TIM_IC_CaptureCallback+0x1a6>
		}
	}
#endif
#if (IC_IN_USE>2)
	else if((htim->Instance == IC_3_TIM) && (htim->Channel == IC_3_TIM_ACT_CHANNEL))
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a24      	ldr	r2, [pc, #144]	; (8000380 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d141      	bne.n	8000378 <HAL_TIM_IC_CaptureCallback+0x1a8>
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	7f1b      	ldrb	r3, [r3, #28]
 80002f8:	2b08      	cmp	r3, #8
 80002fa:	d13d      	bne.n	8000378 <HAL_TIM_IC_CaptureCallback+0x1a8>
	{
		if(IC_3_GPIO->IDR & IC_3_GPIO_PIN)
 80002fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000300:	691b      	ldr	r3, [r3, #16]
 8000302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000306:	2b00      	cmp	r3, #0
 8000308:	d00a      	beq.n	8000320 <HAL_TIM_IC_CaptureCallback+0x150>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_3_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_3_TIM_CHANNEL);
 800030a:	210c      	movs	r1, #12
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f001 fcd7 	bl	8001cc0 <HAL_TIM_ReadCapturedValue>
 8000312:	4602      	mov	r2, r0
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8000316:	601a      	str	r2, [r3, #0]
			TIM_IC_3_CaptureIndex = 1;
 8000318:	4b1f      	ldr	r3, [pc, #124]	; (8000398 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800031a:	2201      	movs	r2, #1
 800031c:	601a      	str	r2, [r3, #0]
		}
	}
#endif


}
 800031e:	e02b      	b.n	8000378 <HAL_TIM_IC_CaptureCallback+0x1a8>
		else if(TIM_IC_3_CaptureIndex == 1)
 8000320:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d127      	bne.n	8000378 <HAL_TIM_IC_CaptureCallback+0x1a8>
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_3_TIM_CHANNEL);
 8000328:	210c      	movs	r1, #12
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f001 fcc8 	bl	8001cc0 <HAL_TIM_ReadCapturedValue>
 8000330:	60f8      	str	r0, [r7, #12]
			 if (value2 > TIM_IC_3_Value_1)
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	429a      	cmp	r2, r3
 800033a:	d905      	bls.n	8000348 <HAL_TIM_IC_CaptureCallback+0x178>
				 Diff_value = (value2 - TIM_IC_3_Value_1);
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	1ad3      	subs	r3, r2, r3
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	e00b      	b.n	8000360 <HAL_TIM_IC_CaptureCallback+0x190>
			 else if (value2 < TIM_IC_3_Value_1)
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	429a      	cmp	r2, r3
 8000350:	d206      	bcs.n	8000360 <HAL_TIM_IC_CaptureCallback+0x190>
				 Diff_value = ((65535 - TIM_IC_3_Value_1) + value2) + 1;
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	68fa      	ldr	r2, [r7, #12]
 8000358:	1ad3      	subs	r3, r2, r3
 800035a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800035e:	60bb      	str	r3, [r7, #8]
			 Write_IC_Channel3_Raw_data(&Diff_value);
 8000360:	f107 0308 	add.w	r3, r7, #8
 8000364:	4618      	mov	r0, r3
 8000366:	f003 f8bb 	bl	80034e0 <Write_IC_Channel3_Raw_data>
			 TIM_IC_3_CaptureIndex = 0;
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
}
 8000370:	e002      	b.n	8000378 <HAL_TIM_IC_CaptureCallback+0x1a8>
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 8000372:	bf00      	nop
 8000374:	e000      	b.n	8000378 <HAL_TIM_IC_CaptureCallback+0x1a8>
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 8000376:	bf00      	nop
}
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40012c00 	.word	0x40012c00
 8000384:	20000d34 	.word	0x20000d34
 8000388:	20000d3c 	.word	0x20000d3c
 800038c:	20000d84 	.word	0x20000d84
 8000390:	20000d40 	.word	0x20000d40
 8000394:	20000d38 	.word	0x20000d38
 8000398:	20000d88 	.word	0x20000d88

0800039c <TIMx_ENC_Init>:
uint32_t TIM_ENC_4_CaptureIndex;
#endif


void TIMx_ENC_Init(TIM_ENC_Typedef config)
{
 800039c:	b084      	sub	sp, #16
 800039e:	b580      	push	{r7, lr}
 80003a0:	b098      	sub	sp, #96	; 0x60
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	f107 0c68 	add.w	ip, r7, #104	; 0x68
 80003a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
	TIM_Encoder_InitTypeDef sConfigENC = {0};
 80003b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003bc:	2224      	movs	r2, #36	; 0x24
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f003 fac1 	bl	8003948 <memset>
	GPIO_InitTypeDef  GPIO_InitStruct;

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	TIM_handler.Instance = config.TIMx;
 80003c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80003c8:	4a69      	ldr	r2, [pc, #420]	; (8000570 <TIMx_ENC_Init+0x1d4>)
 80003ca:	6013      	str	r3, [r2, #0]
	TIM_handler.Init.Prescaler = 0;
 80003cc:	4b68      	ldr	r3, [pc, #416]	; (8000570 <TIMx_ENC_Init+0x1d4>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	605a      	str	r2, [r3, #4]
	TIM_handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d2:	4b67      	ldr	r3, [pc, #412]	; (8000570 <TIMx_ENC_Init+0x1d4>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
	TIM_handler.Init.Period = 65535;
 80003d8:	4b65      	ldr	r3, [pc, #404]	; (8000570 <TIMx_ENC_Init+0x1d4>)
 80003da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003de:	60da      	str	r2, [r3, #12]
	TIM_handler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e0:	4b63      	ldr	r3, [pc, #396]	; (8000570 <TIMx_ENC_Init+0x1d4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
	TIM_handler.Init.RepetitionCounter = 0;
 80003e6:	4b62      	ldr	r3, [pc, #392]	; (8000570 <TIMx_ENC_Init+0x1d4>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	615a      	str	r2, [r3, #20]
	TIM_handler.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ec:	4b60      	ldr	r3, [pc, #384]	; (8000570 <TIMx_ENC_Init+0x1d4>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	619a      	str	r2, [r3, #24]
	sConfigENC.EncoderMode = TIM_ENCODERMODE_TI12;
 80003f2:	2303      	movs	r3, #3
 80003f4:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigENC.IC1Polarity = TIM_ICPOLARITY_RISING;
 80003f6:	2300      	movs	r3, #0
 80003f8:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigENC.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003fa:	2301      	movs	r3, #1
 80003fc:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigENC.IC1Prescaler = TIM_ICPSC_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigENC.IC1Filter = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigENC.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000406:	2300      	movs	r3, #0
 8000408:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigENC.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800040a:	2301      	movs	r3, #1
 800040c:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigENC.IC2Prescaler = TIM_ICPSC_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigENC.IC2Filter = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_Encoder_Init(&TIM_handler, &sConfigENC) != HAL_OK)
 8000416:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800041a:	4619      	mov	r1, r3
 800041c:	4854      	ldr	r0, [pc, #336]	; (8000570 <TIMx_ENC_Init+0x1d4>)
 800041e:	f001 fa67 	bl	80018f0 <HAL_TIM_Encoder_Init>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <TIMx_ENC_Init+0x90>
	{
		Error_Handler();
 8000428:	f003 f964 	bl	80036f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042c:	2300      	movs	r3, #0
 800042e:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&TIM_handler, &sMasterConfig) != HAL_OK)
 8000438:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800043c:	4619      	mov	r1, r3
 800043e:	484c      	ldr	r0, [pc, #304]	; (8000570 <TIMx_ENC_Init+0x1d4>)
 8000440:	f001 fd60 	bl	8001f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <TIMx_ENC_Init+0xb2>
	{
		Error_Handler();
 800044a:	f003 f953 	bl	80036f4 <Error_Handler>
	}


	if(config.GPIOx_ch1 == GPIOA)
 800044e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000450:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000454:	d10c      	bne.n	8000470 <TIMx_ENC_Init+0xd4>
	{

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	4b47      	ldr	r3, [pc, #284]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	4a46      	ldr	r2, [pc, #280]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000462:	4b44      	ldr	r3, [pc, #272]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	61bb      	str	r3, [r7, #24]
 800046c:	69bb      	ldr	r3, [r7, #24]
 800046e:	e020      	b.n	80004b2 <TIMx_ENC_Init+0x116>
	}
	else if(config.GPIOx_ch1 == GPIOB)
 8000470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000472:	4a41      	ldr	r2, [pc, #260]	; (8000578 <TIMx_ENC_Init+0x1dc>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d10c      	bne.n	8000492 <TIMx_ENC_Init+0xf6>
	{

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b3e      	ldr	r3, [pc, #248]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 800047a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047c:	4a3d      	ldr	r2, [pc, #244]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 800047e:	f043 0302 	orr.w	r3, r3, #2
 8000482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000484:	4b3b      	ldr	r3, [pc, #236]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 8000486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000488:	f003 0302 	and.w	r3, r3, #2
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	e00f      	b.n	80004b2 <TIMx_ENC_Init+0x116>
	}
	else if(config.GPIOx_ch1 == GPIOC)
 8000492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000494:	4a39      	ldr	r2, [pc, #228]	; (800057c <TIMx_ENC_Init+0x1e0>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d10b      	bne.n	80004b2 <TIMx_ENC_Init+0x116>
	{

		__HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b36      	ldr	r3, [pc, #216]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	4a35      	ldr	r2, [pc, #212]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004a6:	4b33      	ldr	r3, [pc, #204]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	f003 0304 	and.w	r3, r3, #4
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
	}

	if(config.GPIOx_ch2 == GPIOA)
 80004b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80004b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80004b8:	d10c      	bne.n	80004d4 <TIMx_ENC_Init+0x138>
	{

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	4a2d      	ldr	r2, [pc, #180]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c6:	4b2b      	ldr	r3, [pc, #172]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	e020      	b.n	8000516 <TIMx_ENC_Init+0x17a>
	}
	else if(config.GPIOx_ch2 == GPIOB)
 80004d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80004d6:	4a28      	ldr	r2, [pc, #160]	; (8000578 <TIMx_ENC_Init+0x1dc>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d10c      	bne.n	80004f6 <TIMx_ENC_Init+0x15a>
	{

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80004dc:	4b25      	ldr	r3, [pc, #148]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 80004de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e0:	4a24      	ldr	r2, [pc, #144]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 80004e2:	f043 0302 	orr.w	r3, r3, #2
 80004e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e8:	4b22      	ldr	r3, [pc, #136]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 80004ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ec:	f003 0302 	and.w	r3, r3, #2
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	e00f      	b.n	8000516 <TIMx_ENC_Init+0x17a>
	}
	else if(config.GPIOx_ch2 == GPIOC)
 80004f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80004f8:	4a20      	ldr	r2, [pc, #128]	; (800057c <TIMx_ENC_Init+0x1e0>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d10b      	bne.n	8000516 <TIMx_ENC_Init+0x17a>
	{

		__HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a1c      	ldr	r2, [pc, #112]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <TIMx_ENC_Init+0x1d8>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
	}


	GPIO_InitStruct.Pin = config.GPIO_Pinx_ch1;
 8000516:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800051a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051c:	2302      	movs	r3, #2
 800051e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2300      	movs	r3, #0
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = config.GPIO_AlternateFunctionx;
 8000528:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800052c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(config.GPIOx_ch1, &GPIO_InitStruct);
 800052e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000530:	f107 021c 	add.w	r2, r7, #28
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f99e 	bl	8000878 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = config.GPIO_Pinx_ch2;
 800053c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000540:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000542:	2302      	movs	r3, #2
 8000544:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = config.GPIO_AlternateFunctionx;
 800054e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000552:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(config.GPIOx_ch2, &GPIO_InitStruct);
 8000554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000556:	f107 021c 	add.w	r2, r7, #28
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f000 f98b 	bl	8000878 <HAL_GPIO_Init>

	//HAL_NVENC_SetPriority(config.TIMx_IRQ, 0, 0);
	//HAL_NVENC_EnableIRQ(config.TIMx_IRQ);
}
 8000562:	bf00      	nop
 8000564:	3760      	adds	r7, #96	; 0x60
 8000566:	46bd      	mov	sp, r7
 8000568:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800056c:	b004      	add	sp, #16
 800056e:	4770      	bx	lr
 8000570:	20000d44 	.word	0x20000d44
 8000574:	40021000 	.word	0x40021000
 8000578:	48000400 	.word	0x48000400
 800057c:	48000800 	.word	0x48000800

08000580 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_ENC)
{
 8000580:	b480      	push	{r7}
 8000582:	b087      	sub	sp, #28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

	if ((htim_ENC->Instance == TIM1))
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <HAL_TIM_Encoder_MspInit+0x80>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d10c      	bne.n	80005ac <HAL_TIM_Encoder_MspInit+0x2c>
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM1_CLK_ENABLE();
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <HAL_TIM_Encoder_MspInit+0x84>)
 8000594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000596:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <HAL_TIM_Encoder_MspInit+0x84>)
 8000598:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800059c:	6613      	str	r3, [r2, #96]	; 0x60
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <HAL_TIM_Encoder_MspInit+0x84>)
 80005a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697b      	ldr	r3, [r7, #20]
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM3_CLK_ENABLE();
	}

}
 80005aa:	e022      	b.n	80005f2 <HAL_TIM_Encoder_MspInit+0x72>
	else if ((htim_ENC->Instance == TIM2))
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005b4:	d10c      	bne.n	80005d0 <HAL_TIM_Encoder_MspInit+0x50>
	    __HAL_RCC_TIM2_CLK_ENABLE();
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <HAL_TIM_Encoder_MspInit+0x84>)
 80005b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <HAL_TIM_Encoder_MspInit+0x84>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6593      	str	r3, [r2, #88]	; 0x58
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <HAL_TIM_Encoder_MspInit+0x84>)
 80005c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]
}
 80005ce:	e010      	b.n	80005f2 <HAL_TIM_Encoder_MspInit+0x72>
	else if ((htim_ENC->Instance == TIM3))
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <HAL_TIM_Encoder_MspInit+0x88>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d10b      	bne.n	80005f2 <HAL_TIM_Encoder_MspInit+0x72>
	    __HAL_RCC_TIM3_CLK_ENABLE();
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_TIM_Encoder_MspInit+0x84>)
 80005dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005de:	4a09      	ldr	r2, [pc, #36]	; (8000604 <HAL_TIM_Encoder_MspInit+0x84>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6593      	str	r3, [r2, #88]	; 0x58
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <HAL_TIM_Encoder_MspInit+0x84>)
 80005e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
}
 80005f2:	bf00      	nop
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40012c00 	.word	0x40012c00
 8000604:	40021000 	.word	0x40021000
 8000608:	40000400 	.word	0x40000400

0800060c <TIMx_ENC_Start>:

void TIMx_ENC_Start(TIM_ENC_Typedef config)
{
 800060c:	b084      	sub	sp, #16
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
 8000612:	f107 0c08 	add.w	ip, r7, #8
 8000616:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_handler.Instance = config.TIMx;
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <TIMx_ENC_Start+0x28>)
 800061e:	6013      	str	r3, [r2, #0]
	HAL_TIM_Encoder_Start(&TIM_handler, TIM_CHANNEL_ALL);
 8000620:	213c      	movs	r1, #60	; 0x3c
 8000622:	4804      	ldr	r0, [pc, #16]	; (8000634 <TIMx_ENC_Start+0x28>)
 8000624:	f001 f9f6 	bl	8001a14 <HAL_TIM_Encoder_Start>
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000630:	b004      	add	sp, #16
 8000632:	4770      	bx	lr
 8000634:	20000d44 	.word	0x20000d44

08000638 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800063e:	2300      	movs	r3, #0
 8000640:	71fb      	strb	r3, [r7, #7]
#if (INSTRUCTION_CACHE_ENABLE == 0)
   __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_Init+0x3c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <HAL_Init+0x3c>)
 8000648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800064c:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f8dd 	bl	800080e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000654:	2000      	movs	r0, #0
 8000656:	f003 f879 	bl	800374c <HAL_InitTick>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	e001      	b.n	800066a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000666:	f003 f849 	bl	80036fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800066a:	79fb      	ldrb	r3, [r7, #7]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40022000 	.word	0x40022000

08000678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_IncTick+0x1c>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_IncTick+0x20>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4413      	add	r3, r2
 8000686:	4a03      	ldr	r2, [pc, #12]	; (8000694 <HAL_IncTick+0x1c>)
 8000688:	6013      	str	r3, [r2, #0]
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	20000d8c 	.word	0x20000d8c
 8000698:	20000004 	.word	0x20000004

0800069c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return uwTick;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <HAL_GetTick+0x14>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000d8c 	.word	0x20000d8c

080006b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	60d3      	str	r3, [r2, #12]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <__NVIC_GetPriorityGrouping+0x18>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	f003 0307 	and.w	r3, r3, #7
}
 800070a:	4618      	mov	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	2b00      	cmp	r3, #0
 8000728:	db0b      	blt.n	8000742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f003 021f 	and.w	r2, r3, #31
 8000730:	4907      	ldr	r1, [pc, #28]	; (8000750 <__NVIC_EnableIRQ+0x38>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	095b      	lsrs	r3, r3, #5
 8000738:	2001      	movs	r0, #1
 800073a:	fa00 f202 	lsl.w	r2, r0, r2
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e100 	.word	0xe000e100

08000754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000764:	2b00      	cmp	r3, #0
 8000766:	db0a      	blt.n	800077e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	b2da      	uxtb	r2, r3
 800076c:	490c      	ldr	r1, [pc, #48]	; (80007a0 <__NVIC_SetPriority+0x4c>)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	0112      	lsls	r2, r2, #4
 8000774:	b2d2      	uxtb	r2, r2
 8000776:	440b      	add	r3, r1
 8000778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800077c:	e00a      	b.n	8000794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4908      	ldr	r1, [pc, #32]	; (80007a4 <__NVIC_SetPriority+0x50>)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 030f 	and.w	r3, r3, #15
 800078a:	3b04      	subs	r3, #4
 800078c:	0112      	lsls	r2, r2, #4
 800078e:	b2d2      	uxtb	r2, r2
 8000790:	440b      	add	r3, r1
 8000792:	761a      	strb	r2, [r3, #24]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000e100 	.word	0xe000e100
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b089      	sub	sp, #36	; 0x24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	f1c3 0307 	rsb	r3, r3, #7
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	bf28      	it	cs
 80007c6:	2304      	movcs	r3, #4
 80007c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3304      	adds	r3, #4
 80007ce:	2b06      	cmp	r3, #6
 80007d0:	d902      	bls.n	80007d8 <NVIC_EncodePriority+0x30>
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3b03      	subs	r3, #3
 80007d6:	e000      	b.n	80007da <NVIC_EncodePriority+0x32>
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	43da      	mvns	r2, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	401a      	ands	r2, r3
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	43d9      	mvns	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	4313      	orrs	r3, r2
         );
}
 8000802:	4618      	mov	r0, r3
 8000804:	3724      	adds	r7, #36	; 0x24
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff ff4c 	bl	80006b4 <__NVIC_SetPriorityGrouping>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
 8000830:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000836:	f7ff ff61 	bl	80006fc <__NVIC_GetPriorityGrouping>
 800083a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	68b9      	ldr	r1, [r7, #8]
 8000840:	6978      	ldr	r0, [r7, #20]
 8000842:	f7ff ffb1 	bl	80007a8 <NVIC_EncodePriority>
 8000846:	4602      	mov	r2, r0
 8000848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff80 	bl	8000754 <__NVIC_SetPriority>
}
 8000854:	bf00      	nop
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff54 	bl	8000718 <__NVIC_EnableIRQ>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000886:	e17f      	b.n	8000b88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	2101      	movs	r1, #1
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	4013      	ands	r3, r2
 8000896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b00      	cmp	r3, #0
 800089c:	f000 8171 	beq.w	8000b82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d003      	beq.n	80008b0 <HAL_GPIO_Init+0x38>
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b12      	cmp	r3, #18
 80008ae:	d123      	bne.n	80008f8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	08da      	lsrs	r2, r3, #3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3208      	adds	r2, #8
 80008b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	f003 0307 	and.w	r3, r3, #7
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	220f      	movs	r2, #15
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	691a      	ldr	r2, [r3, #16]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	08da      	lsrs	r2, r3, #3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3208      	adds	r2, #8
 80008f2:	6939      	ldr	r1, [r7, #16]
 80008f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	2203      	movs	r2, #3
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f003 0203 	and.w	r2, r3, #3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4313      	orrs	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d00b      	beq.n	800094c <HAL_GPIO_Init+0xd4>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d007      	beq.n	800094c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000940:	2b11      	cmp	r3, #17
 8000942:	d003      	beq.n	800094c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b12      	cmp	r3, #18
 800094a:	d130      	bne.n	80009ae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68da      	ldr	r2, [r3, #12]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000982:	2201      	movs	r2, #1
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	f003 0201 	and.w	r2, r3, #1
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f003 0303 	and.w	r3, r3, #3
 80009b6:	2b03      	cmp	r3, #3
 80009b8:	d118      	bne.n	80009ec <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009c0:	2201      	movs	r2, #1
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	08db      	lsrs	r3, r3, #3
 80009d6:	f003 0201 	and.w	r2, r3, #1
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2203      	movs	r2, #3
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 80ac 	beq.w	8000b82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b5e      	ldr	r3, [pc, #376]	; (8000ba4 <HAL_GPIO_Init+0x32c>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	4a5d      	ldr	r2, [pc, #372]	; (8000ba4 <HAL_GPIO_Init+0x32c>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6613      	str	r3, [r2, #96]	; 0x60
 8000a36:	4b5b      	ldr	r3, [pc, #364]	; (8000ba4 <HAL_GPIO_Init+0x32c>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a42:	4a59      	ldr	r2, [pc, #356]	; (8000ba8 <HAL_GPIO_Init+0x330>)
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	3302      	adds	r3, #2
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	f003 0303 	and.w	r3, r3, #3
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	220f      	movs	r2, #15
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a6c:	d025      	beq.n	8000aba <HAL_GPIO_Init+0x242>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a4e      	ldr	r2, [pc, #312]	; (8000bac <HAL_GPIO_Init+0x334>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d01f      	beq.n	8000ab6 <HAL_GPIO_Init+0x23e>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a4d      	ldr	r2, [pc, #308]	; (8000bb0 <HAL_GPIO_Init+0x338>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d019      	beq.n	8000ab2 <HAL_GPIO_Init+0x23a>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a4c      	ldr	r2, [pc, #304]	; (8000bb4 <HAL_GPIO_Init+0x33c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d013      	beq.n	8000aae <HAL_GPIO_Init+0x236>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a4b      	ldr	r2, [pc, #300]	; (8000bb8 <HAL_GPIO_Init+0x340>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d00d      	beq.n	8000aaa <HAL_GPIO_Init+0x232>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a4a      	ldr	r2, [pc, #296]	; (8000bbc <HAL_GPIO_Init+0x344>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d007      	beq.n	8000aa6 <HAL_GPIO_Init+0x22e>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a49      	ldr	r2, [pc, #292]	; (8000bc0 <HAL_GPIO_Init+0x348>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d101      	bne.n	8000aa2 <HAL_GPIO_Init+0x22a>
 8000a9e:	2306      	movs	r3, #6
 8000aa0:	e00c      	b.n	8000abc <HAL_GPIO_Init+0x244>
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	e00a      	b.n	8000abc <HAL_GPIO_Init+0x244>
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	e008      	b.n	8000abc <HAL_GPIO_Init+0x244>
 8000aaa:	2304      	movs	r3, #4
 8000aac:	e006      	b.n	8000abc <HAL_GPIO_Init+0x244>
 8000aae:	2303      	movs	r3, #3
 8000ab0:	e004      	b.n	8000abc <HAL_GPIO_Init+0x244>
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	e002      	b.n	8000abc <HAL_GPIO_Init+0x244>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <HAL_GPIO_Init+0x244>
 8000aba:	2300      	movs	r3, #0
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	f002 0203 	and.w	r2, r2, #3
 8000ac2:	0092      	lsls	r2, r2, #2
 8000ac4:	4093      	lsls	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000acc:	4936      	ldr	r1, [pc, #216]	; (8000ba8 <HAL_GPIO_Init+0x330>)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	089b      	lsrs	r3, r3, #2
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ada:	4b3a      	ldr	r3, [pc, #232]	; (8000bc4 <HAL_GPIO_Init+0x34c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000afe:	4a31      	ldr	r2, [pc, #196]	; (8000bc4 <HAL_GPIO_Init+0x34c>)
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b04:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <HAL_GPIO_Init+0x34c>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b28:	4a26      	ldr	r2, [pc, #152]	; (8000bc4 <HAL_GPIO_Init+0x34c>)
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <HAL_GPIO_Init+0x34c>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <HAL_GPIO_Init+0x34c>)
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_GPIO_Init+0x34c>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b7c:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <HAL_GPIO_Init+0x34c>)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f47f ae78 	bne.w	8000888 <HAL_GPIO_Init+0x10>
  }
}
 8000b98:	bf00      	nop
 8000b9a:	371c      	adds	r7, #28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010000 	.word	0x40010000
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	48000800 	.word	0x48000800
 8000bb4:	48000c00 	.word	0x48000c00
 8000bb8:	48001000 	.word	0x48001000
 8000bbc:	48001400 	.word	0x48001400
 8000bc0:	48001800 	.word	0x48001800
 8000bc4:	40010400 	.word	0x40010400

08000bc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40007000 	.word	0x40007000

08000be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bf2:	d130      	bne.n	8000c56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c00:	d038      	beq.n	8000c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2232      	movs	r2, #50	; 0x32
 8000c18:	fb02 f303 	mul.w	r3, r2, r3
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	0c9b      	lsrs	r3, r3, #18
 8000c24:	3301      	adds	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c28:	e002      	b.n	8000c30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c3c:	d102      	bne.n	8000c44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1f2      	bne.n	8000c2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c50:	d110      	bne.n	8000c74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e00f      	b.n	8000c76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c62:	d007      	beq.n	8000c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c6c:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40007000 	.word	0x40007000
 8000c88:	2000000c 	.word	0x2000000c
 8000c8c:	431bde83 	.word	0x431bde83

08000c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e39d      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca2:	4ba4      	ldr	r3, [pc, #656]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cac:	4ba1      	ldr	r3, [pc, #644]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 80e1 	beq.w	8000e86 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d007      	beq.n	8000cda <HAL_RCC_OscConfig+0x4a>
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	2b0c      	cmp	r3, #12
 8000cce:	f040 8088 	bne.w	8000de2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	f040 8084 	bne.w	8000de2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cda:	4b96      	ldr	r3, [pc, #600]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d005      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x62>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e375      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a1a      	ldr	r2, [r3, #32]
 8000cf6:	4b8f      	ldr	r3, [pc, #572]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d004      	beq.n	8000d0c <HAL_RCC_OscConfig+0x7c>
 8000d02:	4b8c      	ldr	r3, [pc, #560]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d0a:	e005      	b.n	8000d18 <HAL_RCC_OscConfig+0x88>
 8000d0c:	4b89      	ldr	r3, [pc, #548]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d223      	bcs.n	8000d64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fd25 	bl	8001770 <RCC_SetFlashLatencyFromMSIRange>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e356      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d30:	4b80      	ldr	r3, [pc, #512]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a7f      	ldr	r2, [pc, #508]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b7d      	ldr	r3, [pc, #500]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	497a      	ldr	r1, [pc, #488]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d4e:	4b79      	ldr	r3, [pc, #484]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	4975      	ldr	r1, [pc, #468]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	604b      	str	r3, [r1, #4]
 8000d62:	e022      	b.n	8000daa <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d64:	4b73      	ldr	r3, [pc, #460]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a72      	ldr	r2, [pc, #456]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d6a:	f043 0308 	orr.w	r3, r3, #8
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b70      	ldr	r3, [pc, #448]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a1b      	ldr	r3, [r3, #32]
 8000d7c:	496d      	ldr	r1, [pc, #436]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d82:	4b6c      	ldr	r3, [pc, #432]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	4968      	ldr	r1, [pc, #416]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a1b      	ldr	r3, [r3, #32]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 fce8 	bl	8001770 <RCC_SetFlashLatencyFromMSIRange>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e319      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000daa:	f000 fc03 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 8000dae:	4601      	mov	r1, r0
 8000db0:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	4a5f      	ldr	r2, [pc, #380]	; (8000f38 <HAL_RCC_OscConfig+0x2a8>)
 8000dbc:	5cd3      	ldrb	r3, [r2, r3]
 8000dbe:	f003 031f 	and.w	r3, r3, #31
 8000dc2:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc6:	4a5d      	ldr	r2, [pc, #372]	; (8000f3c <HAL_RCC_OscConfig+0x2ac>)
 8000dc8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dca:	4b5d      	ldr	r3, [pc, #372]	; (8000f40 <HAL_RCC_OscConfig+0x2b0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 fcbc 	bl	800374c <HAL_InitTick>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d052      	beq.n	8000e84 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	e2fd      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d032      	beq.n	8000e50 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dea:	4b52      	ldr	r3, [pc, #328]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a51      	ldr	r2, [pc, #324]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000df6:	f7ff fc51 	bl	800069c <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dfc:	e008      	b.n	8000e10 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dfe:	f7ff fc4d 	bl	800069c <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d901      	bls.n	8000e10 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e2e6      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e10:	4b48      	ldr	r3, [pc, #288]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0f0      	beq.n	8000dfe <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e1c:	4b45      	ldr	r3, [pc, #276]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a44      	ldr	r2, [pc, #272]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b42      	ldr	r3, [pc, #264]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	493f      	ldr	r1, [pc, #252]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	493a      	ldr	r1, [pc, #232]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
 8000e4e:	e01a      	b.n	8000e86 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e50:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a37      	ldr	r2, [pc, #220]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000e56:	f023 0301 	bic.w	r3, r3, #1
 8000e5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fc1e 	bl	800069c <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e64:	f7ff fc1a 	bl	800069c <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e2b3      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e76:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0x1d4>
 8000e82:	e000      	b.n	8000e86 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d074      	beq.n	8000f7c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d005      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x214>
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	2b0c      	cmp	r3, #12
 8000e9c:	d10e      	bne.n	8000ebc <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d10b      	bne.n	8000ebc <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d064      	beq.n	8000f7a <HAL_RCC_OscConfig+0x2ea>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d160      	bne.n	8000f7a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e290      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec4:	d106      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x244>
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a1a      	ldr	r2, [pc, #104]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e01d      	b.n	8000f10 <HAL_RCC_OscConfig+0x280>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x268>
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e00b      	b.n	8000f10 <HAL_RCC_OscConfig+0x280>
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_RCC_OscConfig+0x2a4>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d01c      	beq.n	8000f52 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f18:	f7ff fbc0 	bl	800069c <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f1e:	e011      	b.n	8000f44 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff fbbc 	bl	800069c <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	; 0x64
 8000f2c:	d90a      	bls.n	8000f44 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e255      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	080039e4 	.word	0x080039e4
 8000f3c:	2000000c 	.word	0x2000000c
 8000f40:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f44:	4bae      	ldr	r3, [pc, #696]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0e7      	beq.n	8000f20 <HAL_RCC_OscConfig+0x290>
 8000f50:	e014      	b.n	8000f7c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f52:	f7ff fba3 	bl	800069c <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5a:	f7ff fb9f 	bl	800069c <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b64      	cmp	r3, #100	; 0x64
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e238      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f6c:	4ba4      	ldr	r3, [pc, #656]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f0      	bne.n	8000f5a <HAL_RCC_OscConfig+0x2ca>
 8000f78:	e000      	b.n	8000f7c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d060      	beq.n	800104a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d005      	beq.n	8000f9a <HAL_RCC_OscConfig+0x30a>
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b0c      	cmp	r3, #12
 8000f92:	d119      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d116      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f9a:	4b99      	ldr	r3, [pc, #612]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x322>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e215      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb2:	4b93      	ldr	r3, [pc, #588]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	061b      	lsls	r3, r3, #24
 8000fc0:	498f      	ldr	r1, [pc, #572]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fc6:	e040      	b.n	800104a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d023      	beq.n	8001018 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd0:	4b8b      	ldr	r3, [pc, #556]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a8a      	ldr	r2, [pc, #552]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8000fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fb5e 	bl	800069c <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fb5a 	bl	800069c <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e1f3      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ff6:	4b82      	ldr	r3, [pc, #520]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f0      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001002:	4b7f      	ldr	r3, [pc, #508]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	061b      	lsls	r3, r3, #24
 8001010:	497b      	ldr	r1, [pc, #492]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8001012:	4313      	orrs	r3, r2
 8001014:	604b      	str	r3, [r1, #4]
 8001016:	e018      	b.n	800104a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001018:	4b79      	ldr	r3, [pc, #484]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a78      	ldr	r2, [pc, #480]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 800101e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001024:	f7ff fb3a 	bl	800069c <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102c:	f7ff fb36 	bl	800069c <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e1cf      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800103e:	4b70      	ldr	r3, [pc, #448]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	2b00      	cmp	r3, #0
 8001054:	d03c      	beq.n	80010d0 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d01c      	beq.n	8001098 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800105e:	4b68      	ldr	r3, [pc, #416]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8001060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001064:	4a66      	ldr	r2, [pc, #408]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800106e:	f7ff fb15 	bl	800069c <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001076:	f7ff fb11 	bl	800069c <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e1aa      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001088:	4b5d      	ldr	r3, [pc, #372]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 800108a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0ef      	beq.n	8001076 <HAL_RCC_OscConfig+0x3e6>
 8001096:	e01b      	b.n	80010d0 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001098:	4b59      	ldr	r3, [pc, #356]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 800109a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800109e:	4a58      	ldr	r2, [pc, #352]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 80010a0:	f023 0301 	bic.w	r3, r3, #1
 80010a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a8:	f7ff faf8 	bl	800069c <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b0:	f7ff faf4 	bl	800069c <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e18d      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010c2:	4b4f      	ldr	r3, [pc, #316]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 80010c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1ef      	bne.n	80010b0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80a5 	beq.w	8001228 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010e2:	4b47      	ldr	r3, [pc, #284]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10d      	bne.n	800110a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	4b44      	ldr	r3, [pc, #272]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	4a43      	ldr	r2, [pc, #268]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	6593      	str	r3, [r2, #88]	; 0x58
 80010fa:	4b41      	ldr	r3, [pc, #260]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001106:	2301      	movs	r3, #1
 8001108:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <HAL_RCC_OscConfig+0x574>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001112:	2b00      	cmp	r3, #0
 8001114:	d118      	bne.n	8001148 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_RCC_OscConfig+0x574>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a3a      	ldr	r2, [pc, #232]	; (8001204 <HAL_RCC_OscConfig+0x574>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001122:	f7ff fabb 	bl	800069c <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112a:	f7ff fab7 	bl	800069c <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e150      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <HAL_RCC_OscConfig+0x574>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d108      	bne.n	8001162 <HAL_RCC_OscConfig+0x4d2>
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8001152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001156:	4a2a      	ldr	r2, [pc, #168]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001160:	e024      	b.n	80011ac <HAL_RCC_OscConfig+0x51c>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d110      	bne.n	800118c <HAL_RCC_OscConfig+0x4fc>
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 800116c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001170:	4a23      	ldr	r2, [pc, #140]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 800117c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001180:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800118a:	e00f      	b.n	80011ac <HAL_RCC_OscConfig+0x51c>
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 800118e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001192:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 800119e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a2:	4a17      	ldr	r2, [pc, #92]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d016      	beq.n	80011e2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b4:	f7ff fa72 	bl	800069c <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011bc:	f7ff fa6e 	bl	800069c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e105      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_RCC_OscConfig+0x570>)
 80011d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0ed      	beq.n	80011bc <HAL_RCC_OscConfig+0x52c>
 80011e0:	e019      	b.n	8001216 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e2:	f7ff fa5b 	bl	800069c <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011e8:	e00e      	b.n	8001208 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ea:	f7ff fa57 	bl	800069c <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d905      	bls.n	8001208 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e0ee      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
 8001200:	40021000 	.word	0x40021000
 8001204:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001208:	4b77      	ldr	r3, [pc, #476]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 800120a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1e9      	bne.n	80011ea <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001216:	7ffb      	ldrb	r3, [r7, #31]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d105      	bne.n	8001228 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800121c:	4b72      	ldr	r3, [pc, #456]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 800121e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001220:	4a71      	ldr	r2, [pc, #452]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 8001222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001226:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80d5 	beq.w	80013dc <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2b0c      	cmp	r3, #12
 8001236:	f000 808e 	beq.w	8001356 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123e:	2b02      	cmp	r3, #2
 8001240:	d15b      	bne.n	80012fa <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001242:	4b69      	ldr	r3, [pc, #420]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a68      	ldr	r2, [pc, #416]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 8001248:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800124c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124e:	f7ff fa25 	bl	800069c <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001256:	f7ff fa21 	bl	800069c <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e0ba      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001268:	4b5f      	ldr	r3, [pc, #380]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f0      	bne.n	8001256 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001274:	4b5c      	ldr	r3, [pc, #368]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_RCC_OscConfig+0x75c>)
 800127a:	4013      	ands	r3, r2
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001284:	3a01      	subs	r2, #1
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	4311      	orrs	r1, r2
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800128e:	0212      	lsls	r2, r2, #8
 8001290:	4311      	orrs	r1, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001296:	0852      	lsrs	r2, r2, #1
 8001298:	3a01      	subs	r2, #1
 800129a:	0552      	lsls	r2, r2, #21
 800129c:	4311      	orrs	r1, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012a2:	0852      	lsrs	r2, r2, #1
 80012a4:	3a01      	subs	r2, #1
 80012a6:	0652      	lsls	r2, r2, #25
 80012a8:	4311      	orrs	r1, r2
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012ae:	0912      	lsrs	r2, r2, #4
 80012b0:	0452      	lsls	r2, r2, #17
 80012b2:	430a      	orrs	r2, r1
 80012b4:	494c      	ldr	r1, [pc, #304]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ba:	4b4b      	ldr	r3, [pc, #300]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a4a      	ldr	r2, [pc, #296]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 80012c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012c4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012c6:	4b48      	ldr	r3, [pc, #288]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	4a47      	ldr	r2, [pc, #284]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 80012cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d2:	f7ff f9e3 	bl	800069c <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff f9df 	bl	800069c <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e078      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ec:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x64a>
 80012f8:	e070      	b.n	80013dc <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a3a      	ldr	r2, [pc, #232]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 8001300:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001304:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d105      	bne.n	800131e <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001312:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	4a34      	ldr	r2, [pc, #208]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 8001318:	f023 0303 	bic.w	r3, r3, #3
 800131c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800131e:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	4a31      	ldr	r2, [pc, #196]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 8001324:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132e:	f7ff f9b5 	bl	800069c <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001336:	f7ff f9b1 	bl	800069c <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e04a      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f0      	bne.n	8001336 <HAL_RCC_OscConfig+0x6a6>
 8001354:	e042      	b.n	80013dc <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e03d      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <HAL_RCC_OscConfig+0x758>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f003 0203 	and.w	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	429a      	cmp	r2, r3
 8001374:	d130      	bne.n	80013d8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	3b01      	subs	r3, #1
 8001382:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d127      	bne.n	80013d8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001392:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001394:	429a      	cmp	r2, r3
 8001396:	d11f      	bne.n	80013d8 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013a2:	2a07      	cmp	r2, #7
 80013a4:	bf14      	ite	ne
 80013a6:	2201      	movne	r2, #1
 80013a8:	2200      	moveq	r2, #0
 80013aa:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d113      	bne.n	80013d8 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ba:	085b      	lsrs	r3, r3, #1
 80013bc:	3b01      	subs	r3, #1
 80013be:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d109      	bne.n	80013d8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	085b      	lsrs	r3, r3, #1
 80013d0:	3b01      	subs	r3, #1
 80013d2:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	f99d808c 	.word	0xf99d808c

080013f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0c8      	b.n	8001596 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001404:	4b66      	ldr	r3, [pc, #408]	; (80015a0 <HAL_RCC_ClockConfig+0x1b0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d910      	bls.n	8001434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001412:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <HAL_RCC_ClockConfig+0x1b0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 0207 	bic.w	r2, r3, #7
 800141a:	4961      	ldr	r1, [pc, #388]	; (80015a0 <HAL_RCC_ClockConfig+0x1b0>)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001422:	4b5f      	ldr	r3, [pc, #380]	; (80015a0 <HAL_RCC_ClockConfig+0x1b0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d001      	beq.n	8001434 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0b0      	b.n	8001596 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d04c      	beq.n	80014da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d107      	bne.n	8001458 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001448:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d121      	bne.n	8001498 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e09e      	b.n	8001596 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d107      	bne.n	8001470 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001460:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d115      	bne.n	8001498 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e092      	b.n	8001596 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d107      	bne.n	8001488 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001478:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d109      	bne.n	8001498 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e086      	b.n	8001596 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001488:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e07e      	b.n	8001596 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001498:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 0203 	bic.w	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	493f      	ldr	r1, [pc, #252]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014aa:	f7ff f8f7 	bl	800069c <HAL_GetTick>
 80014ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b0:	e00a      	b.n	80014c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b2:	f7ff f8f3 	bl	800069c <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e066      	b.n	8001596 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 020c 	and.w	r2, r3, #12
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d1eb      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	492c      	ldr	r1, [pc, #176]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <HAL_RCC_ClockConfig+0x1b0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d210      	bcs.n	8001528 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_RCC_ClockConfig+0x1b0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 0207 	bic.w	r2, r3, #7
 800150e:	4924      	ldr	r1, [pc, #144]	; (80015a0 <HAL_RCC_ClockConfig+0x1b0>)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <HAL_RCC_ClockConfig+0x1b0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d001      	beq.n	8001528 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e036      	b.n	8001596 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4918      	ldr	r1, [pc, #96]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001542:	4313      	orrs	r3, r2
 8001544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d009      	beq.n	8001566 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4910      	ldr	r1, [pc, #64]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001566:	f000 f825 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 800156a:	4601      	mov	r1, r0
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_RCC_ClockConfig+0x1b4>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	fa21 f303 	lsr.w	r3, r1, r3
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f002 f8de 	bl	800374c <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	72fb      	strb	r3, [r7, #11]

  return status;
 8001594:	7afb      	ldrb	r3, [r7, #11]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40022000 	.word	0x40022000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	080039e4 	.word	0x080039e4
 80015ac:	2000000c 	.word	0x2000000c
 80015b0:	20000000 	.word	0x20000000

080015b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015cc:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_GetSysClockFreq+0x34>
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	2b0c      	cmp	r3, #12
 80015e0:	d121      	bne.n	8001626 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d11e      	bne.n	8001626 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015e8:	4b33      	ldr	r3, [pc, #204]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80015f4:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80015f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	e005      	b.n	8001610 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001604:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001610:	4a2a      	ldr	r2, [pc, #168]	; (80016bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001618:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10d      	bne.n	800163c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001624:	e00a      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	2b04      	cmp	r3, #4
 800162a:	d102      	bne.n	8001632 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800162e:	61bb      	str	r3, [r7, #24]
 8001630:	e004      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2b08      	cmp	r3, #8
 8001636:	d101      	bne.n	800163c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800163a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2b0c      	cmp	r3, #12
 8001640:	d133      	bne.n	80016aa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d002      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0xa4>
 8001652:	2b03      	cmp	r3, #3
 8001654:	d003      	beq.n	800165e <HAL_RCC_GetSysClockFreq+0xaa>
 8001656:	e005      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800165a:	617b      	str	r3, [r7, #20]
      break;
 800165c:	e005      	b.n	800166a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001660:	617b      	str	r3, [r7, #20]
      break;
 8001662:	e002      	b.n	800166a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	617b      	str	r3, [r7, #20]
      break;
 8001668:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x104>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	091b      	lsrs	r3, r3, #4
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	3301      	adds	r3, #1
 8001676:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x104>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	fb02 f203 	mul.w	r2, r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0e5b      	lsrs	r3, r3, #25
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	3301      	adds	r3, #1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016aa:	69bb      	ldr	r3, [r7, #24]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3724      	adds	r7, #36	; 0x24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	40021000 	.word	0x40021000
 80016bc:	080039fc 	.word	0x080039fc
 80016c0:	00f42400 	.word	0x00f42400
 80016c4:	007a1200 	.word	0x007a1200

080016c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_RCC_GetHCLKFreq+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	2000000c 	.word	0x2000000c

080016e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80016e4:	f7ff fff0 	bl	80016c8 <HAL_RCC_GetHCLKFreq>
 80016e8:	4601      	mov	r1, r0
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016f6:	5cd3      	ldrb	r3, [r2, r3]
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001700:	4618      	mov	r0, r3
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000
 8001708:	080039f4 	.word	0x080039f4

0800170c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	220f      	movs	r2, #15
 800171a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_RCC_GetClockConfig+0x5c>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_RCC_GetClockConfig+0x5c>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_RCC_GetClockConfig+0x5c>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_RCC_GetClockConfig+0x5c>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <HAL_RCC_GetClockConfig+0x60>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0207 	and.w	r2, r3, #7
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	601a      	str	r2, [r3, #0]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	40022000 	.word	0x40022000

08001770 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800177e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001788:	f7ff fa1e 	bl	8000bc8 <HAL_PWREx_GetVoltageRange>
 800178c:	6178      	str	r0, [r7, #20]
 800178e:	e014      	b.n	80017ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001794:	4a24      	ldr	r2, [pc, #144]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179a:	6593      	str	r3, [r2, #88]	; 0x58
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017a8:	f7ff fa0e 	bl	8000bc8 <HAL_PWREx_GetVoltageRange>
 80017ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c0:	d10b      	bne.n	80017da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b80      	cmp	r3, #128	; 0x80
 80017c6:	d919      	bls.n	80017fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2ba0      	cmp	r3, #160	; 0xa0
 80017cc:	d902      	bls.n	80017d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017ce:	2302      	movs	r3, #2
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	e013      	b.n	80017fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017d4:	2301      	movs	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	e010      	b.n	80017fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b80      	cmp	r3, #128	; 0x80
 80017de:	d902      	bls.n	80017e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017e0:	2303      	movs	r3, #3
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	e00a      	b.n	80017fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b80      	cmp	r3, #128	; 0x80
 80017ea:	d102      	bne.n	80017f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017ec:	2302      	movs	r3, #2
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	e004      	b.n	80017fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b70      	cmp	r3, #112	; 0x70
 80017f6:	d101      	bne.n	80017fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017f8:	2301      	movs	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 0207 	bic.w	r2, r3, #7
 8001804:	4909      	ldr	r1, [pc, #36]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	429a      	cmp	r2, r3
 8001818:	d001      	beq.n	800181e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	40022000 	.word	0x40022000

08001830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e01d      	b.n	800187e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f815 	bl	8001886 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3304      	adds	r3, #4
 800186c:	4619      	mov	r1, r3
 800186e:	4610      	mov	r0, r2
 8001870:	f000 fa88 	bl	8001d84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_TIM_Base_Start_IT+0x50>)
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d00b      	beq.n	80018de <HAL_TIM_Base_Start_IT+0x42>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d007      	beq.n	80018de <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0201 	orr.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	00010007 	.word	0x00010007

080018f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e083      	b.n	8001a0c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d106      	bne.n	800191e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7fe fe31 	bl	8000580 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2202      	movs	r2, #2
 8001922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001934:	f023 0307 	bic.w	r3, r3, #7
 8001938:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3304      	adds	r3, #4
 8001942:	4619      	mov	r1, r3
 8001944:	4610      	mov	r0, r2
 8001946:	f000 fa1d 	bl	8001d84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001972:	f023 0303 	bic.w	r3, r3, #3
 8001976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	4313      	orrs	r3, r2
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001990:	f023 030c 	bic.w	r3, r3, #12
 8001994:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800199c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	4313      	orrs	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	011a      	lsls	r2, r3, #4
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	031b      	lsls	r3, r3, #12
 80019c0:	4313      	orrs	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80019ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80019d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	4313      	orrs	r3, r2
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_TIM_Encoder_Start+0x16>
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d008      	beq.n	8001a3a <HAL_TIM_Encoder_Start+0x26>
 8001a28:	e00f      	b.n	8001a4a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fa40 	bl	8001eb8 <TIM_CCxChannelCmd>
      break;
 8001a38:	e016      	b.n	8001a68 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2104      	movs	r1, #4
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fa38 	bl	8001eb8 <TIM_CCxChannelCmd>
      break;
 8001a48:	e00e      	b.n	8001a68 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fa30 	bl	8001eb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2104      	movs	r1, #4
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fa29 	bl	8001eb8 <TIM_CCxChannelCmd>
      break;
 8001a66:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d122      	bne.n	8001ade <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d11b      	bne.n	8001ade <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f06f 0202 	mvn.w	r2, #2
 8001aae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7fe fb83 	bl	80001d0 <HAL_TIM_IC_CaptureCallback>
 8001aca:	e005      	b.n	8001ad8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f93b 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f942 	bl	8001d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d122      	bne.n	8001b32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d11b      	bne.n	8001b32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f06f 0204 	mvn.w	r2, #4
 8001b02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7fe fb59 	bl	80001d0 <HAL_TIM_IC_CaptureCallback>
 8001b1e:	e005      	b.n	8001b2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f911 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f918 	bl	8001d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d122      	bne.n	8001b86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d11b      	bne.n	8001b86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f06f 0208 	mvn.w	r2, #8
 8001b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7fe fb2f 	bl	80001d0 <HAL_TIM_IC_CaptureCallback>
 8001b72:	e005      	b.n	8001b80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f8e7 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f8ee 	bl	8001d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b10      	cmp	r3, #16
 8001b92:	d122      	bne.n	8001bda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b10      	cmp	r3, #16
 8001ba0:	d11b      	bne.n	8001bda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f06f 0210 	mvn.w	r2, #16
 8001baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2208      	movs	r2, #8
 8001bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7fe fb05 	bl	80001d0 <HAL_TIM_IC_CaptureCallback>
 8001bc6:	e005      	b.n	8001bd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f8bd 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f8c4 	bl	8001d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d10e      	bne.n	8001c06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f06f 0201 	mvn.w	r2, #1
 8001bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f001 fd65 	bl	80036d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c10:	2b80      	cmp	r3, #128	; 0x80
 8001c12:	d10e      	bne.n	8001c32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1e:	2b80      	cmp	r3, #128	; 0x80
 8001c20:	d107      	bne.n	8001c32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f9cf 	bl	8001fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c40:	d10e      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4c:	2b80      	cmp	r3, #128	; 0x80
 8001c4e:	d107      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f9c2 	bl	8001fe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6a:	2b40      	cmp	r3, #64	; 0x40
 8001c6c:	d10e      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c78:	2b40      	cmp	r3, #64	; 0x40
 8001c7a:	d107      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f872 	bl	8001d70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d10e      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d107      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0220 	mvn.w	r2, #32
 8001cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f982 	bl	8001fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b0c      	cmp	r3, #12
 8001cd2:	d831      	bhi.n	8001d38 <HAL_TIM_ReadCapturedValue+0x78>
 8001cd4:	a201      	add	r2, pc, #4	; (adr r2, 8001cdc <HAL_TIM_ReadCapturedValue+0x1c>)
 8001cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cda:	bf00      	nop
 8001cdc:	08001d11 	.word	0x08001d11
 8001ce0:	08001d39 	.word	0x08001d39
 8001ce4:	08001d39 	.word	0x08001d39
 8001ce8:	08001d39 	.word	0x08001d39
 8001cec:	08001d1b 	.word	0x08001d1b
 8001cf0:	08001d39 	.word	0x08001d39
 8001cf4:	08001d39 	.word	0x08001d39
 8001cf8:	08001d39 	.word	0x08001d39
 8001cfc:	08001d25 	.word	0x08001d25
 8001d00:	08001d39 	.word	0x08001d39
 8001d04:	08001d39 	.word	0x08001d39
 8001d08:	08001d39 	.word	0x08001d39
 8001d0c:	08001d2f 	.word	0x08001d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d16:	60fb      	str	r3, [r7, #12]

      break;
 8001d18:	e00f      	b.n	8001d3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d20:	60fb      	str	r3, [r7, #12]

      break;
 8001d22:	e00a      	b.n	8001d3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2a:	60fb      	str	r3, [r7, #12]

      break;
 8001d2c:	e005      	b.n	8001d3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	60fb      	str	r3, [r7, #12]

      break;
 8001d36:	e000      	b.n	8001d3a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001d38:	bf00      	nop
  }

  return tmpreg;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a40      	ldr	r2, [pc, #256]	; (8001e98 <TIM_Base_SetConfig+0x114>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d013      	beq.n	8001dc4 <TIM_Base_SetConfig+0x40>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da2:	d00f      	beq.n	8001dc4 <TIM_Base_SetConfig+0x40>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a3d      	ldr	r2, [pc, #244]	; (8001e9c <TIM_Base_SetConfig+0x118>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00b      	beq.n	8001dc4 <TIM_Base_SetConfig+0x40>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a3c      	ldr	r2, [pc, #240]	; (8001ea0 <TIM_Base_SetConfig+0x11c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d007      	beq.n	8001dc4 <TIM_Base_SetConfig+0x40>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a3b      	ldr	r2, [pc, #236]	; (8001ea4 <TIM_Base_SetConfig+0x120>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <TIM_Base_SetConfig+0x40>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ea8 <TIM_Base_SetConfig+0x124>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d108      	bne.n	8001dd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a2f      	ldr	r2, [pc, #188]	; (8001e98 <TIM_Base_SetConfig+0x114>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01f      	beq.n	8001e1e <TIM_Base_SetConfig+0x9a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de4:	d01b      	beq.n	8001e1e <TIM_Base_SetConfig+0x9a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a2c      	ldr	r2, [pc, #176]	; (8001e9c <TIM_Base_SetConfig+0x118>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d017      	beq.n	8001e1e <TIM_Base_SetConfig+0x9a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a2b      	ldr	r2, [pc, #172]	; (8001ea0 <TIM_Base_SetConfig+0x11c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <TIM_Base_SetConfig+0x9a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a2a      	ldr	r2, [pc, #168]	; (8001ea4 <TIM_Base_SetConfig+0x120>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00f      	beq.n	8001e1e <TIM_Base_SetConfig+0x9a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a29      	ldr	r2, [pc, #164]	; (8001ea8 <TIM_Base_SetConfig+0x124>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00b      	beq.n	8001e1e <TIM_Base_SetConfig+0x9a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a28      	ldr	r2, [pc, #160]	; (8001eac <TIM_Base_SetConfig+0x128>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <TIM_Base_SetConfig+0x9a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a27      	ldr	r2, [pc, #156]	; (8001eb0 <TIM_Base_SetConfig+0x12c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d003      	beq.n	8001e1e <TIM_Base_SetConfig+0x9a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <TIM_Base_SetConfig+0x130>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d108      	bne.n	8001e30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a10      	ldr	r2, [pc, #64]	; (8001e98 <TIM_Base_SetConfig+0x114>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00f      	beq.n	8001e7c <TIM_Base_SetConfig+0xf8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <TIM_Base_SetConfig+0x124>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00b      	beq.n	8001e7c <TIM_Base_SetConfig+0xf8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a11      	ldr	r2, [pc, #68]	; (8001eac <TIM_Base_SetConfig+0x128>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d007      	beq.n	8001e7c <TIM_Base_SetConfig+0xf8>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a10      	ldr	r2, [pc, #64]	; (8001eb0 <TIM_Base_SetConfig+0x12c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d003      	beq.n	8001e7c <TIM_Base_SetConfig+0xf8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <TIM_Base_SetConfig+0x130>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d103      	bne.n	8001e84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	615a      	str	r2, [r3, #20]
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40012c00 	.word	0x40012c00
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	40000800 	.word	0x40000800
 8001ea4:	40000c00 	.word	0x40000c00
 8001ea8:	40013400 	.word	0x40013400
 8001eac:	40014000 	.word	0x40014000
 8001eb0:	40014400 	.word	0x40014400
 8001eb4:	40014800 	.word	0x40014800

08001eb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	2201      	movs	r2, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a1a      	ldr	r2, [r3, #32]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	401a      	ands	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a1a      	ldr	r2, [r3, #32]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	621a      	str	r2, [r3, #32]
}
 8001ef6:	bf00      	nop
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e045      	b.n	8001fa8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d004      	beq.n	8001f50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1b      	ldr	r2, [pc, #108]	; (8001fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d108      	bne.n	8001f62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001f56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f7a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40012c00 	.word	0x40012c00
 8001fb8:	40013400 	.word	0x40013400

08001fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <Init_Wheel_Speed_Provision>:
volatile uint32_t Enc1_value;
volatile uint32_t Enc1_value_old;
volatile uint32_t Enc1_diff;

void Init_Wheel_Speed_Provision(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af02      	add	r7, sp, #8
	TIM_ENC_Typedef TIM_handler = {0};
 8001ffe:	463b      	mov	r3, r7
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
 800200c:	615a      	str	r2, [r3, #20]

	#ifdef MOTOR1
		TIM_handler.TIMx = ENC_1A_TIM;
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <Init_Wheel_Speed_Provision+0x70>)
 8002010:	603b      	str	r3, [r7, #0]
		TIM_handler.TIM_channelx = ENC_1A_TIM_CHANNEL;
 8002012:	2300      	movs	r3, #0
 8002014:	80bb      	strh	r3, [r7, #4]
		TIM_handler.GPIOx_ch1 = ENC_1A_GPIO;
 8002016:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800201a:	60bb      	str	r3, [r7, #8]
		TIM_handler.GPIOx_ch2 = ENC_1B_GPIO;
 800201c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002020:	60fb      	str	r3, [r7, #12]
		TIM_handler.GPIO_Pinx_ch1 = ENC_1A_GPIO_PIN;
 8002022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002026:	823b      	strh	r3, [r7, #16]
		TIM_handler.GPIO_Pinx_ch2 = ENC_1B_GPIO_PIN;
 8002028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800202c:	827b      	strh	r3, [r7, #18]
		TIM_handler.GPIO_AlternateFunctionx = ENC_1A_GPIO_AF;
 800202e:	2301      	movs	r3, #1
 8002030:	753b      	strb	r3, [r7, #20]

		TIMx_ENC_Init(TIM_handler);
 8002032:	466a      	mov	r2, sp
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	e893 0003 	ldmia.w	r3, {r0, r1}
 800203c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002040:	463b      	mov	r3, r7
 8002042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002044:	f7fe f9aa 	bl	800039c <TIMx_ENC_Init>
		TIMx_ENC_Start(TIM_handler);
 8002048:	466a      	mov	r2, sp
 800204a:	f107 0310 	add.w	r3, r7, #16
 800204e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002052:	e882 0003 	stmia.w	r2, {r0, r1}
 8002056:	463b      	mov	r3, r7
 8002058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800205a:	f7fe fad7 	bl	800060c <TIMx_ENC_Start>
		TIM_handler.GPIO_AlternateFunctionx = ENC_2A_GPIO_AF;

		TIMx_ENC_Init(TIM_handler);
		TIMx_ENC_Start(TIM_handler);
	#endif
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40012c00 	.word	0x40012c00

0800206c <Provide_Wheel_Speeds>:


void Provide_Wheel_Speeds(void)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
	WheelSpeed_Typedef Provided_wheel_speeds;
	uint32_t temp;
	Enc1_value_old = Enc1_value;
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <Provide_Wheel_Speeds+0x38>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <Provide_Wheel_Speeds+0x3c>)
 8002078:	6013      	str	r3, [r2, #0]
	Enc1_value = ENC_1A_TIM->CNT;
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <Provide_Wheel_Speeds+0x40>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <Provide_Wheel_Speeds+0x38>)
 8002080:	6013      	str	r3, [r2, #0]
	temp= ENC_1A_TIM->CNT;
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <Provide_Wheel_Speeds+0x40>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	617b      	str	r3, [r7, #20]
	Enc1_diff = Enc1_value - Enc1_value_old;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <Provide_Wheel_Speeds+0x38>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <Provide_Wheel_Speeds+0x3c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <Provide_Wheel_Speeds+0x44>)
 8002094:	6013      	str	r3, [r2, #0]

}
 8002096:	bf00      	nop
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000d98 	.word	0x20000d98
 80020a8:	20000d94 	.word	0x20000d94
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	20000d90 	.word	0x20000d90

080020b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80020c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c6:	2b84      	cmp	r3, #132	; 0x84
 80020c8:	d005      	beq.n	80020d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80020ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4413      	add	r3, r2
 80020d2:	3303      	adds	r3, #3
 80020d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80020d6:	68fb      	ldr	r3, [r7, #12]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80020e8:	f000 faca 	bl	8002680 <vTaskStartScheduler>
  
  return osOK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80020f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f4:	b087      	sub	sp, #28
 80020f6:	af02      	add	r7, sp, #8
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685c      	ldr	r4, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002108:	b29e      	uxth	r6, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ffcf 	bl	80020b4 <makeFreeRtosPriority>
 8002116:	4602      	mov	r2, r0
 8002118:	f107 030c 	add.w	r3, r7, #12
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	9200      	str	r2, [sp, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4632      	mov	r2, r6
 8002124:	4629      	mov	r1, r5
 8002126:	4620      	mov	r0, r4
 8002128:	f000 f8d2 	bl	80022d0 <xTaskCreate>
 800212c:	4603      	mov	r3, r0
 800212e:	2b01      	cmp	r3, #1
 8002130:	d001      	beq.n	8002136 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002140 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <osDelay+0x16>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	e000      	b.n	8002158 <osDelay+0x18>
 8002156:	2301      	movs	r3, #1
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fa5d 	bl	8002618 <vTaskDelay>
  
  return osOK;
 800215e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f103 0208 	add.w	r2, r3, #8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002180:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f103 0208 	add.w	r2, r3, #8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f103 0208 	add.w	r2, r3, #8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	601a      	str	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800220a:	b480      	push	{r7}
 800220c:	b085      	sub	sp, #20
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002220:	d103      	bne.n	800222a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e00c      	b.n	8002244 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3308      	adds	r3, #8
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e002      	b.n	8002238 <vListInsert+0x2e>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	429a      	cmp	r2, r3
 8002242:	d2f6      	bcs.n	8002232 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	601a      	str	r2, [r3, #0]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6892      	ldr	r2, [r2, #8]
 8002292:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6852      	ldr	r2, [r2, #4]
 800229c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d103      	bne.n	80022b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	1e5a      	subs	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08c      	sub	sp, #48	; 0x30
 80022d4:	af04      	add	r7, sp, #16
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	4613      	mov	r3, r2
 80022de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 ff05 	bl	80030f4 <pvPortMalloc>
 80022ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00e      	beq.n	8002310 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80022f2:	2054      	movs	r0, #84	; 0x54
 80022f4:	f000 fefe 	bl	80030f4 <pvPortMalloc>
 80022f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
 8002306:	e005      	b.n	8002314 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002308:	6978      	ldr	r0, [r7, #20]
 800230a:	f000 ffb5 	bl	8003278 <vPortFree>
 800230e:	e001      	b.n	8002314 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d013      	beq.n	8002342 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	2300      	movs	r3, #0
 800231e:	9303      	str	r3, [sp, #12]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	9302      	str	r3, [sp, #8]
 8002324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f80e 	bl	8002352 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002336:	69f8      	ldr	r0, [r7, #28]
 8002338:	f000 f88a 	bl	8002450 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800233c:	2301      	movs	r3, #1
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	e002      	b.n	8002348 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002346:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002348:	69bb      	ldr	r3, [r7, #24]
	}
 800234a:	4618      	mov	r0, r3
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b088      	sub	sp, #32
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800236a:	3b01      	subs	r3, #1
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f023 0307 	bic.w	r3, r3, #7
 8002378:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e7fe      	b.n	8002396 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	e012      	b.n	80023c4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	4413      	add	r3, r2
 80023a4:	7819      	ldrb	r1, [r3, #0]
 80023a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	4413      	add	r3, r2
 80023ac:	3334      	adds	r3, #52	; 0x34
 80023ae:	460a      	mov	r2, r1
 80023b0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	4413      	add	r3, r2
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d006      	beq.n	80023cc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3301      	adds	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	d9e9      	bls.n	800239e <prvInitialiseNewTask+0x4c>
 80023ca:	e000      	b.n	80023ce <prvInitialiseNewTask+0x7c>
		{
			break;
 80023cc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	2b06      	cmp	r3, #6
 80023da:	d901      	bls.n	80023e0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023dc:	2306      	movs	r3, #6
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ee:	2200      	movs	r2, #0
 80023f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	3304      	adds	r3, #4
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fed6 	bl	80021a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fe:	3318      	adds	r3, #24
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fed1 	bl	80021a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800240a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	f1c3 0207 	rsb	r2, r3, #7
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002414:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800241a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241e:	2200      	movs	r2, #0
 8002420:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	68f9      	ldr	r1, [r7, #12]
 800242e:	69b8      	ldr	r0, [r7, #24]
 8002430:	f000 fc5c 	bl	8002cec <pxPortInitialiseStack>
 8002434:	4602      	mov	r2, r0
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002446:	bf00      	nop
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002458:	f000 fd70 	bl	8002f3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800245c:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <prvAddNewTaskToReadyList+0xb8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	4a29      	ldr	r2, [pc, #164]	; (8002508 <prvAddNewTaskToReadyList+0xb8>)
 8002464:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002466:	4b29      	ldr	r3, [pc, #164]	; (800250c <prvAddNewTaskToReadyList+0xbc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800246e:	4a27      	ldr	r2, [pc, #156]	; (800250c <prvAddNewTaskToReadyList+0xbc>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <prvAddNewTaskToReadyList+0xb8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d110      	bne.n	800249e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800247c:	f000 fb2e 	bl	8002adc <prvInitialiseTaskLists>
 8002480:	e00d      	b.n	800249e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002482:	4b23      	ldr	r3, [pc, #140]	; (8002510 <prvAddNewTaskToReadyList+0xc0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <prvAddNewTaskToReadyList+0xbc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	429a      	cmp	r2, r3
 8002496:	d802      	bhi.n	800249e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002498:	4a1c      	ldr	r2, [pc, #112]	; (800250c <prvAddNewTaskToReadyList+0xbc>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <prvAddNewTaskToReadyList+0xc4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <prvAddNewTaskToReadyList+0xc4>)
 80024a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	2201      	movs	r2, #1
 80024ae:	409a      	lsls	r2, r3
 80024b0:	4b19      	ldr	r3, [pc, #100]	; (8002518 <prvAddNewTaskToReadyList+0xc8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	4a18      	ldr	r2, [pc, #96]	; (8002518 <prvAddNewTaskToReadyList+0xc8>)
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4a15      	ldr	r2, [pc, #84]	; (800251c <prvAddNewTaskToReadyList+0xcc>)
 80024c8:	441a      	add	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	4619      	mov	r1, r3
 80024d0:	4610      	mov	r0, r2
 80024d2:	f7ff fe76 	bl	80021c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80024d6:	f000 fd5f 	bl	8002f98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <prvAddNewTaskToReadyList+0xc0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00e      	beq.n	8002500 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <prvAddNewTaskToReadyList+0xbc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d207      	bcs.n	8002500 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <prvAddNewTaskToReadyList+0xd0>)
 80024f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2000012c 	.word	0x2000012c
 800250c:	2000002c 	.word	0x2000002c
 8002510:	20000138 	.word	0x20000138
 8002514:	20000148 	.word	0x20000148
 8002518:	20000134 	.word	0x20000134
 800251c:	20000030 	.word	0x20000030
 8002520:	e000ed04 	.word	0xe000ed04

08002524 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800252e:	2300      	movs	r3, #0
 8002530:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d109      	bne.n	800254c <vTaskDelayUntil+0x28>
 8002538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e7fe      	b.n	800254a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <vTaskDelayUntil+0x42>
 8002552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	e7fe      	b.n	8002564 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8002566:	4b29      	ldr	r3, [pc, #164]	; (800260c <vTaskDelayUntil+0xe8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <vTaskDelayUntil+0x5e>
 800256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e7fe      	b.n	8002580 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8002582:	f000 f8c3 	bl	800270c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <vTaskDelayUntil+0xec>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	4413      	add	r3, r2
 8002594:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6a3a      	ldr	r2, [r7, #32]
 800259c:	429a      	cmp	r2, r3
 800259e:	d20b      	bcs.n	80025b8 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d211      	bcs.n	80025ce <vTaskDelayUntil+0xaa>
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d90d      	bls.n	80025ce <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80025b2:	2301      	movs	r3, #1
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
 80025b6:	e00a      	b.n	80025ce <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d303      	bcc.n	80025ca <vTaskDelayUntil+0xa6>
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d901      	bls.n	80025ce <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80025ca:	2301      	movs	r3, #1
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fb1c 	bl	8002c20 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80025e8:	f000 f89e 	bl	8002728 <xTaskResumeAll>
 80025ec:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d107      	bne.n	8002604 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <vTaskDelayUntil+0xf0>)
 80025f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002604:	bf00      	nop
 8002606:	3728      	adds	r7, #40	; 0x28
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000154 	.word	0x20000154
 8002610:	20000130 	.word	0x20000130
 8002614:	e000ed04 	.word	0xe000ed04

08002618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <vTaskDelay+0x60>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <vTaskDelay+0x2e>
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	e7fe      	b.n	8002644 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002646:	f000 f861 	bl	800270c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800264a:	2100      	movs	r1, #0
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fae7 	bl	8002c20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002652:	f000 f869 	bl	8002728 <xTaskResumeAll>
 8002656:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d107      	bne.n	800266e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <vTaskDelay+0x64>)
 8002660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000154 	.word	0x20000154
 800267c:	e000ed04 	.word	0xe000ed04

08002680 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <vTaskStartScheduler+0x74>)
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	2300      	movs	r3, #0
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	4919      	ldr	r1, [pc, #100]	; (80026f8 <vTaskStartScheduler+0x78>)
 8002694:	4819      	ldr	r0, [pc, #100]	; (80026fc <vTaskStartScheduler+0x7c>)
 8002696:	f7ff fe1b 	bl	80022d0 <xTaskCreate>
 800269a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d115      	bne.n	80026ce <vTaskStartScheduler+0x4e>
 80026a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <vTaskStartScheduler+0x80>)
 80026b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <vTaskStartScheduler+0x84>)
 80026be:	2201      	movs	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80026c2:	4b11      	ldr	r3, [pc, #68]	; (8002708 <vTaskStartScheduler+0x88>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80026c8:	f000 fb9a 	bl	8002e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80026cc:	e00d      	b.n	80026ea <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d4:	d109      	bne.n	80026ea <vTaskStartScheduler+0x6a>
 80026d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026da:	f383 8811 	msr	BASEPRI, r3
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	e7fe      	b.n	80026e8 <vTaskStartScheduler+0x68>
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000150 	.word	0x20000150
 80026f8:	08003970 	.word	0x08003970
 80026fc:	08002aad 	.word	0x08002aad
 8002700:	2000014c 	.word	0x2000014c
 8002704:	20000138 	.word	0x20000138
 8002708:	20000130 	.word	0x20000130

0800270c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <vTaskSuspendAll+0x18>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	4a03      	ldr	r2, [pc, #12]	; (8002724 <vTaskSuspendAll+0x18>)
 8002718:	6013      	str	r3, [r2, #0]
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	20000154 	.word	0x20000154

08002728 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002736:	4b41      	ldr	r3, [pc, #260]	; (800283c <xTaskResumeAll+0x114>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <xTaskResumeAll+0x2a>
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	e7fe      	b.n	8002750 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002752:	f000 fbf3 	bl	8002f3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002756:	4b39      	ldr	r3, [pc, #228]	; (800283c <xTaskResumeAll+0x114>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3b01      	subs	r3, #1
 800275c:	4a37      	ldr	r2, [pc, #220]	; (800283c <xTaskResumeAll+0x114>)
 800275e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002760:	4b36      	ldr	r3, [pc, #216]	; (800283c <xTaskResumeAll+0x114>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d161      	bne.n	800282c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002768:	4b35      	ldr	r3, [pc, #212]	; (8002840 <xTaskResumeAll+0x118>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d05d      	beq.n	800282c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002770:	e02e      	b.n	80027d0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002772:	4b34      	ldr	r3, [pc, #208]	; (8002844 <xTaskResumeAll+0x11c>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3318      	adds	r3, #24
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fd7c 	bl	800227c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3304      	adds	r3, #4
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fd77 	bl	800227c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	2201      	movs	r2, #1
 8002794:	409a      	lsls	r2, r3
 8002796:	4b2c      	ldr	r3, [pc, #176]	; (8002848 <xTaskResumeAll+0x120>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4313      	orrs	r3, r2
 800279c:	4a2a      	ldr	r2, [pc, #168]	; (8002848 <xTaskResumeAll+0x120>)
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4a27      	ldr	r2, [pc, #156]	; (800284c <xTaskResumeAll+0x124>)
 80027ae:	441a      	add	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f7ff fd03 	bl	80021c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <xTaskResumeAll+0x128>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d302      	bcc.n	80027d0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <xTaskResumeAll+0x12c>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027d0:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <xTaskResumeAll+0x11c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1cc      	bne.n	8002772 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80027de:	f000 f9f9 	bl	8002bd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80027e2:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <xTaskResumeAll+0x130>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d010      	beq.n	8002810 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80027ee:	f000 f847 	bl	8002880 <xTaskIncrementTick>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <xTaskResumeAll+0x12c>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3b01      	subs	r3, #1
 8002802:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f1      	bne.n	80027ee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <xTaskResumeAll+0x130>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <xTaskResumeAll+0x12c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002818:	2301      	movs	r3, #1
 800281a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <xTaskResumeAll+0x134>)
 800281e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800282c:	f000 fbb4 	bl	8002f98 <vPortExitCritical>

	return xAlreadyYielded;
 8002830:	68bb      	ldr	r3, [r7, #8]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000154 	.word	0x20000154
 8002840:	2000012c 	.word	0x2000012c
 8002844:	200000ec 	.word	0x200000ec
 8002848:	20000134 	.word	0x20000134
 800284c:	20000030 	.word	0x20000030
 8002850:	2000002c 	.word	0x2000002c
 8002854:	20000140 	.word	0x20000140
 8002858:	2000013c 	.word	0x2000013c
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <xTaskGetTickCount+0x1c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800286c:	687b      	ldr	r3, [r7, #4]
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000130 	.word	0x20000130

08002880 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800288a:	4b50      	ldr	r3, [pc, #320]	; (80029cc <xTaskIncrementTick+0x14c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 808c 	bne.w	80029ac <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002894:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <xTaskIncrementTick+0x150>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3301      	adds	r3, #1
 800289a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800289c:	4a4c      	ldr	r2, [pc, #304]	; (80029d0 <xTaskIncrementTick+0x150>)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d11f      	bne.n	80028e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80028a8:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <xTaskIncrementTick+0x154>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <xTaskIncrementTick+0x46>
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	e7fe      	b.n	80028c4 <xTaskIncrementTick+0x44>
 80028c6:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <xTaskIncrementTick+0x154>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <xTaskIncrementTick+0x158>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a40      	ldr	r2, [pc, #256]	; (80029d4 <xTaskIncrementTick+0x154>)
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4a40      	ldr	r2, [pc, #256]	; (80029d8 <xTaskIncrementTick+0x158>)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b40      	ldr	r3, [pc, #256]	; (80029dc <xTaskIncrementTick+0x15c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	4a3e      	ldr	r2, [pc, #248]	; (80029dc <xTaskIncrementTick+0x15c>)
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	f000 f976 	bl	8002bd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80028e8:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <xTaskIncrementTick+0x160>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d34d      	bcc.n	800298e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028f2:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <xTaskIncrementTick+0x154>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <xTaskIncrementTick+0x80>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <xTaskIncrementTick+0x82>
 8002900:	2300      	movs	r3, #0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002906:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <xTaskIncrementTick+0x160>)
 8002908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800290c:	601a      	str	r2, [r3, #0]
					break;
 800290e:	e03e      	b.n	800298e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002910:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <xTaskIncrementTick+0x154>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	d203      	bcs.n	8002930 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002928:	4a2d      	ldr	r2, [pc, #180]	; (80029e0 <xTaskIncrementTick+0x160>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6013      	str	r3, [r2, #0]
						break;
 800292e:	e02e      	b.n	800298e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	3304      	adds	r3, #4
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fca1 	bl	800227c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	3318      	adds	r3, #24
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fc98 	bl	800227c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	2201      	movs	r2, #1
 8002952:	409a      	lsls	r2, r3
 8002954:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <xTaskIncrementTick+0x164>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4313      	orrs	r3, r2
 800295a:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <xTaskIncrementTick+0x164>)
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4a1f      	ldr	r2, [pc, #124]	; (80029e8 <xTaskIncrementTick+0x168>)
 800296c:	441a      	add	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3304      	adds	r3, #4
 8002972:	4619      	mov	r1, r3
 8002974:	4610      	mov	r0, r2
 8002976:	f7ff fc24 	bl	80021c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <xTaskIncrementTick+0x16c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	429a      	cmp	r2, r3
 8002986:	d3b4      	bcc.n	80028f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002988:	2301      	movs	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800298c:	e7b1      	b.n	80028f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800298e:	4b17      	ldr	r3, [pc, #92]	; (80029ec <xTaskIncrementTick+0x16c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002994:	4914      	ldr	r1, [pc, #80]	; (80029e8 <xTaskIncrementTick+0x168>)
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d907      	bls.n	80029b6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80029a6:	2301      	movs	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	e004      	b.n	80029b6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <xTaskIncrementTick+0x170>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	4a0f      	ldr	r2, [pc, #60]	; (80029f0 <xTaskIncrementTick+0x170>)
 80029b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80029b6:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <xTaskIncrementTick+0x174>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80029be:	2301      	movs	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80029c2:	697b      	ldr	r3, [r7, #20]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000154 	.word	0x20000154
 80029d0:	20000130 	.word	0x20000130
 80029d4:	200000e4 	.word	0x200000e4
 80029d8:	200000e8 	.word	0x200000e8
 80029dc:	20000144 	.word	0x20000144
 80029e0:	2000014c 	.word	0x2000014c
 80029e4:	20000134 	.word	0x20000134
 80029e8:	20000030 	.word	0x20000030
 80029ec:	2000002c 	.word	0x2000002c
 80029f0:	2000013c 	.word	0x2000013c
 80029f4:	20000140 	.word	0x20000140

080029f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029fe:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <vTaskSwitchContext+0xa0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002a06:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <vTaskSwitchContext+0xa4>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002a0c:	e03e      	b.n	8002a8c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002a0e:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <vTaskSwitchContext+0xa4>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <vTaskSwitchContext+0xa8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002a22:	7afb      	ldrb	r3, [r7, #11]
 8002a24:	f1c3 031f 	rsb	r3, r3, #31
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	491e      	ldr	r1, [pc, #120]	; (8002aa4 <vTaskSwitchContext+0xac>)
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <vTaskSwitchContext+0x5a>
	__asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	e7fe      	b.n	8002a50 <vTaskSwitchContext+0x58>
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <vTaskSwitchContext+0xac>)
 8002a5e:	4413      	add	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	3308      	adds	r3, #8
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d104      	bne.n	8002a82 <vTaskSwitchContext+0x8a>
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4a07      	ldr	r2, [pc, #28]	; (8002aa8 <vTaskSwitchContext+0xb0>)
 8002a8a:	6013      	str	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	20000154 	.word	0x20000154
 8002a9c:	20000140 	.word	0x20000140
 8002aa0:	20000134 	.word	0x20000134
 8002aa4:	20000030 	.word	0x20000030
 8002aa8:	2000002c 	.word	0x2000002c

08002aac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ab4:	f000 f852 	bl	8002b5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <prvIdleTask+0x28>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d9f9      	bls.n	8002ab4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <prvIdleTask+0x2c>)
 8002ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002ad0:	e7f0      	b.n	8002ab4 <prvIdleTask+0x8>
 8002ad2:	bf00      	nop
 8002ad4:	20000030 	.word	0x20000030
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	e00c      	b.n	8002b02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <prvInitialiseTaskLists+0x60>)
 8002af4:	4413      	add	r3, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fb36 	bl	8002168 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3301      	adds	r3, #1
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b06      	cmp	r3, #6
 8002b06:	d9ef      	bls.n	8002ae8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b08:	480d      	ldr	r0, [pc, #52]	; (8002b40 <prvInitialiseTaskLists+0x64>)
 8002b0a:	f7ff fb2d 	bl	8002168 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b0e:	480d      	ldr	r0, [pc, #52]	; (8002b44 <prvInitialiseTaskLists+0x68>)
 8002b10:	f7ff fb2a 	bl	8002168 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b14:	480c      	ldr	r0, [pc, #48]	; (8002b48 <prvInitialiseTaskLists+0x6c>)
 8002b16:	f7ff fb27 	bl	8002168 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b1a:	480c      	ldr	r0, [pc, #48]	; (8002b4c <prvInitialiseTaskLists+0x70>)
 8002b1c:	f7ff fb24 	bl	8002168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b20:	480b      	ldr	r0, [pc, #44]	; (8002b50 <prvInitialiseTaskLists+0x74>)
 8002b22:	f7ff fb21 	bl	8002168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <prvInitialiseTaskLists+0x78>)
 8002b28:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <prvInitialiseTaskLists+0x64>)
 8002b2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <prvInitialiseTaskLists+0x7c>)
 8002b2e:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <prvInitialiseTaskLists+0x68>)
 8002b30:	601a      	str	r2, [r3, #0]
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000030 	.word	0x20000030
 8002b40:	200000bc 	.word	0x200000bc
 8002b44:	200000d0 	.word	0x200000d0
 8002b48:	200000ec 	.word	0x200000ec
 8002b4c:	20000100 	.word	0x20000100
 8002b50:	20000118 	.word	0x20000118
 8002b54:	200000e4 	.word	0x200000e4
 8002b58:	200000e8 	.word	0x200000e8

08002b5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b62:	e019      	b.n	8002b98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002b64:	f000 f9ea 	bl	8002f3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <prvCheckTasksWaitingTermination+0x4c>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3304      	adds	r3, #4
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fb81 	bl	800227c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <prvCheckTasksWaitingTermination+0x50>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <prvCheckTasksWaitingTermination+0x50>)
 8002b82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b84:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <prvCheckTasksWaitingTermination+0x54>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <prvCheckTasksWaitingTermination+0x54>)
 8002b8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002b8e:	f000 fa03 	bl	8002f98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f80e 	bl	8002bb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <prvCheckTasksWaitingTermination+0x54>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e1      	bne.n	8002b64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000100 	.word	0x20000100
 8002bac:	2000012c 	.word	0x2000012c
 8002bb0:	20000114 	.word	0x20000114

08002bb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fb59 	bl	8003278 <vPortFree>
			vPortFree( pxTCB );
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fb56 	bl	8003278 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <prvResetNextTaskUnblockTime+0x44>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <prvResetNextTaskUnblockTime+0x14>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <prvResetNextTaskUnblockTime+0x16>
 8002be8:	2300      	movs	r3, #0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <prvResetNextTaskUnblockTime+0x48>)
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bf4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002bf6:	e008      	b.n	8002c0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <prvResetNextTaskUnblockTime+0x44>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <prvResetNextTaskUnblockTime+0x48>)
 8002c08:	6013      	str	r3, [r2, #0]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	200000e4 	.word	0x200000e4
 8002c1c:	2000014c 	.word	0x2000014c

08002c20 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002c2a:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c30:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3304      	adds	r3, #4
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fb20 	bl	800227c <uxListRemove>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10b      	bne.n	8002c5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	2201      	movs	r2, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4013      	ands	r3, r2
 8002c56:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002c58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c60:	d10a      	bne.n	8002c78 <prvAddCurrentTaskToDelayedList+0x58>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	4619      	mov	r1, r3
 8002c70:	481a      	ldr	r0, [pc, #104]	; (8002cdc <prvAddCurrentTaskToDelayedList+0xbc>)
 8002c72:	f7ff faa6 	bl	80021c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002c76:	e026      	b.n	8002cc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c80:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d209      	bcs.n	8002ca4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f7ff fab4 	bl	800220a <vListInsert>
}
 8002ca2:	e010      	b.n	8002cc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3304      	adds	r3, #4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f7ff faaa 	bl	800220a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d202      	bcs.n	8002cc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002cc0:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6013      	str	r3, [r2, #0]
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000130 	.word	0x20000130
 8002cd4:	2000002c 	.word	0x2000002c
 8002cd8:	20000134 	.word	0x20000134
 8002cdc:	20000118 	.word	0x20000118
 8002ce0:	200000e8 	.word	0x200000e8
 8002ce4:	200000e4 	.word	0x200000e4
 8002ce8:	2000014c 	.word	0x2000014c

08002cec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3b04      	subs	r3, #4
 8002d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f023 0201 	bic.w	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3b04      	subs	r3, #4
 8002d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <pxPortInitialiseStack+0x64>)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3b14      	subs	r3, #20
 8002d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3b04      	subs	r3, #4
 8002d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f06f 0202 	mvn.w	r2, #2
 8002d3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3b20      	subs	r3, #32
 8002d40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	08002d55 	.word	0x08002d55

08002d54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d5e:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <prvTaskExitError+0x50>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d66:	d009      	beq.n	8002d7c <prvTaskExitError+0x28>
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e7fe      	b.n	8002d7a <prvTaskExitError+0x26>
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002d8e:	bf00      	nop
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0fc      	beq.n	8002d90 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000008 	.word	0x20000008
	...

08002db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <pxCurrentTCBConst2>)
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	6808      	ldr	r0, [r1, #0]
 8002db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dba:	f380 8809 	msr	PSP, r0
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f04f 0000 	mov.w	r0, #0
 8002dc6:	f380 8811 	msr	BASEPRI, r0
 8002dca:	4770      	bx	lr
 8002dcc:	f3af 8000 	nop.w

08002dd0 <pxCurrentTCBConst2>:
 8002dd0:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop

08002dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <prvPortStartFirstTask+0x24>)
 8002dda:	6800      	ldr	r0, [r0, #0]
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	f380 8808 	msr	MSP, r0
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f380 8814 	msr	CONTROL, r0
 8002dea:	b662      	cpsie	i
 8002dec:	b661      	cpsie	f
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	df00      	svc	0
 8002df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002dfa:	bf00      	nop
 8002dfc:	e000ed08 	.word	0xe000ed08

08002e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e06:	4b44      	ldr	r3, [pc, #272]	; (8002f18 <xPortStartScheduler+0x118>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a44      	ldr	r2, [pc, #272]	; (8002f1c <xPortStartScheduler+0x11c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d109      	bne.n	8002e24 <xPortStartScheduler+0x24>
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	e7fe      	b.n	8002e22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e24:	4b3c      	ldr	r3, [pc, #240]	; (8002f18 <xPortStartScheduler+0x118>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a3d      	ldr	r2, [pc, #244]	; (8002f20 <xPortStartScheduler+0x120>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d109      	bne.n	8002e42 <xPortStartScheduler+0x42>
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e7fe      	b.n	8002e40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e42:	4b38      	ldr	r3, [pc, #224]	; (8002f24 <xPortStartScheduler+0x124>)
 8002e44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	22ff      	movs	r2, #255	; 0xff
 8002e52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <xPortStartScheduler+0x128>)
 8002e68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e6a:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <xPortStartScheduler+0x12c>)
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e70:	e009      	b.n	8002e86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002e72:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <xPortStartScheduler+0x12c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <xPortStartScheduler+0x12c>)
 8002e7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	2b80      	cmp	r3, #128	; 0x80
 8002e90:	d0ef      	beq.n	8002e72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <xPortStartScheduler+0x12c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f1c3 0307 	rsb	r3, r3, #7
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d009      	beq.n	8002eb2 <xPortStartScheduler+0xb2>
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	e7fe      	b.n	8002eb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <xPortStartScheduler+0x12c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <xPortStartScheduler+0x12c>)
 8002eba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <xPortStartScheduler+0x12c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ec4:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <xPortStartScheduler+0x12c>)
 8002ec6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ed0:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <xPortStartScheduler+0x130>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <xPortStartScheduler+0x130>)
 8002ed6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <xPortStartScheduler+0x130>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <xPortStartScheduler+0x130>)
 8002ee2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ee6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002ee8:	f000 f8d6 	bl	8003098 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <xPortStartScheduler+0x134>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002ef2:	f000 f8f5 	bl	80030e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <xPortStartScheduler+0x138>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a0f      	ldr	r2, [pc, #60]	; (8002f38 <xPortStartScheduler+0x138>)
 8002efc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002f02:	f7ff ff69 	bl	8002dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002f06:	f7ff fd77 	bl	80029f8 <vTaskSwitchContext>
	prvTaskExitError();
 8002f0a:	f7ff ff23 	bl	8002d54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	e000ed00 	.word	0xe000ed00
 8002f1c:	410fc271 	.word	0x410fc271
 8002f20:	410fc270 	.word	0x410fc270
 8002f24:	e000e400 	.word	0xe000e400
 8002f28:	20000158 	.word	0x20000158
 8002f2c:	2000015c 	.word	0x2000015c
 8002f30:	e000ed20 	.word	0xe000ed20
 8002f34:	20000008 	.word	0x20000008
 8002f38:	e000ef34 	.word	0xe000ef34

08002f3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002f54:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <vPortEnterCritical+0x54>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <vPortEnterCritical+0x54>)
 8002f5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <vPortEnterCritical+0x54>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d10e      	bne.n	8002f84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <vPortEnterCritical+0x58>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <vPortEnterCritical+0x48>
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	e7fe      	b.n	8002f82 <vPortEnterCritical+0x46>
	}
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	20000008 	.word	0x20000008
 8002f94:	e000ed04 	.word	0xe000ed04

08002f98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <vPortExitCritical+0x4c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <vPortExitCritical+0x22>
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	607b      	str	r3, [r7, #4]
 8002fb8:	e7fe      	b.n	8002fb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <vPortExitCritical+0x4c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	4a08      	ldr	r2, [pc, #32]	; (8002fe4 <vPortExitCritical+0x4c>)
 8002fc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <vPortExitCritical+0x4c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d104      	bne.n	8002fd6 <vPortExitCritical+0x3e>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20000008 	.word	0x20000008
	...

08002ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002ff0:	f3ef 8009 	mrs	r0, PSP
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	4b15      	ldr	r3, [pc, #84]	; (8003050 <pxCurrentTCBConst>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	f01e 0f10 	tst.w	lr, #16
 8003000:	bf08      	it	eq
 8003002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800300a:	6010      	str	r0, [r2, #0]
 800300c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003014:	f380 8811 	msr	BASEPRI, r0
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f7ff fcea 	bl	80029f8 <vTaskSwitchContext>
 8003024:	f04f 0000 	mov.w	r0, #0
 8003028:	f380 8811 	msr	BASEPRI, r0
 800302c:	bc09      	pop	{r0, r3}
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	6808      	ldr	r0, [r1, #0]
 8003032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003036:	f01e 0f10 	tst.w	lr, #16
 800303a:	bf08      	it	eq
 800303c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003040:	f380 8809 	msr	PSP, r0
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	f3af 8000 	nop.w

08003050 <pxCurrentTCBConst>:
 8003050:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003054:	bf00      	nop
 8003056:	bf00      	nop

08003058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
	__asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003070:	f7ff fc06 	bl	8002880 <xTaskIncrementTick>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <SysTick_Handler+0x3c>)
 800307c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	2300      	movs	r3, #0
 8003084:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	e000ed04 	.word	0xe000ed04

08003098 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <vPortSetupTimerInterrupt+0x34>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <vPortSetupTimerInterrupt+0x38>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030a8:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <vPortSetupTimerInterrupt+0x3c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <vPortSetupTimerInterrupt+0x40>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	4a09      	ldr	r2, [pc, #36]	; (80030dc <vPortSetupTimerInterrupt+0x44>)
 80030b6:	3b01      	subs	r3, #1
 80030b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030ba:	4b04      	ldr	r3, [pc, #16]	; (80030cc <vPortSetupTimerInterrupt+0x34>)
 80030bc:	2207      	movs	r2, #7
 80030be:	601a      	str	r2, [r3, #0]
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	e000e010 	.word	0xe000e010
 80030d0:	e000e018 	.word	0xe000e018
 80030d4:	2000000c 	.word	0x2000000c
 80030d8:	10624dd3 	.word	0x10624dd3
 80030dc:	e000e014 	.word	0xe000e014

080030e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80030e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80030f0 <vPortEnableVFP+0x10>
 80030e4:	6801      	ldr	r1, [r0, #0]
 80030e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80030ea:	6001      	str	r1, [r0, #0]
 80030ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80030ee:	bf00      	nop
 80030f0:	e000ed88 	.word	0xe000ed88

080030f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003100:	f7ff fb04 	bl	800270c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003104:	4b57      	ldr	r3, [pc, #348]	; (8003264 <pvPortMalloc+0x170>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800310c:	f000 f90c 	bl	8003328 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003110:	4b55      	ldr	r3, [pc, #340]	; (8003268 <pvPortMalloc+0x174>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	f040 808c 	bne.w	8003236 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01c      	beq.n	800315e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003124:	2208      	movs	r2, #8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	2b00      	cmp	r3, #0
 8003134:	d013      	beq.n	800315e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f023 0307 	bic.w	r3, r3, #7
 800313c:	3308      	adds	r3, #8
 800313e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <pvPortMalloc+0x6a>
	__asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e7fe      	b.n	800315c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d068      	beq.n	8003236 <pvPortMalloc+0x142>
 8003164:	4b41      	ldr	r3, [pc, #260]	; (800326c <pvPortMalloc+0x178>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	429a      	cmp	r2, r3
 800316c:	d863      	bhi.n	8003236 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800316e:	4b40      	ldr	r3, [pc, #256]	; (8003270 <pvPortMalloc+0x17c>)
 8003170:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003172:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <pvPortMalloc+0x17c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003178:	e004      	b.n	8003184 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	429a      	cmp	r2, r3
 800318c:	d903      	bls.n	8003196 <pvPortMalloc+0xa2>
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f1      	bne.n	800317a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003196:	4b33      	ldr	r3, [pc, #204]	; (8003264 <pvPortMalloc+0x170>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319c:	429a      	cmp	r2, r3
 800319e:	d04a      	beq.n	8003236 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2208      	movs	r2, #8
 80031a6:	4413      	add	r3, r2
 80031a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	1ad2      	subs	r2, r2, r3
 80031ba:	2308      	movs	r3, #8
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	429a      	cmp	r2, r3
 80031c0:	d91e      	bls.n	8003200 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <pvPortMalloc+0xf4>
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	e7fe      	b.n	80031e6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	1ad2      	subs	r2, r2, r3
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031fa:	69b8      	ldr	r0, [r7, #24]
 80031fc:	f000 f8f6 	bl	80033ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003200:	4b1a      	ldr	r3, [pc, #104]	; (800326c <pvPortMalloc+0x178>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	4a18      	ldr	r2, [pc, #96]	; (800326c <pvPortMalloc+0x178>)
 800320c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <pvPortMalloc+0x178>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4b18      	ldr	r3, [pc, #96]	; (8003274 <pvPortMalloc+0x180>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d203      	bcs.n	8003222 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800321a:	4b14      	ldr	r3, [pc, #80]	; (800326c <pvPortMalloc+0x178>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a15      	ldr	r2, [pc, #84]	; (8003274 <pvPortMalloc+0x180>)
 8003220:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <pvPortMalloc+0x174>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	431a      	orrs	r2, r3
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003236:	f7ff fa77 	bl	8002728 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	2b00      	cmp	r3, #0
 8003242:	d009      	beq.n	8003258 <pvPortMalloc+0x164>
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e7fe      	b.n	8003256 <pvPortMalloc+0x162>
	return pvReturn;
 8003258:	69fb      	ldr	r3, [r7, #28]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3728      	adds	r7, #40	; 0x28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000d20 	.word	0x20000d20
 8003268:	20000d2c 	.word	0x20000d2c
 800326c:	20000d24 	.word	0x20000d24
 8003270:	20000d18 	.word	0x20000d18
 8003274:	20000d28 	.word	0x20000d28

08003278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d046      	beq.n	8003318 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800328a:	2308      	movs	r3, #8
 800328c:	425b      	negs	r3, r3
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4413      	add	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	4b20      	ldr	r3, [pc, #128]	; (8003320 <vPortFree+0xa8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <vPortFree+0x42>
 80032a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	e7fe      	b.n	80032b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <vPortFree+0x5e>
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	e7fe      	b.n	80032d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <vPortFree+0xa8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d019      	beq.n	8003318 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d115      	bne.n	8003318 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <vPortFree+0xa8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	401a      	ands	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80032fc:	f7ff fa06 	bl	800270c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <vPortFree+0xac>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4413      	add	r3, r2
 800330a:	4a06      	ldr	r2, [pc, #24]	; (8003324 <vPortFree+0xac>)
 800330c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800330e:	6938      	ldr	r0, [r7, #16]
 8003310:	f000 f86c 	bl	80033ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003314:	f7ff fa08 	bl	8002728 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003318:	bf00      	nop
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000d2c 	.word	0x20000d2c
 8003324:	20000d24 	.word	0x20000d24

08003328 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800332e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003332:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003334:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <prvHeapInit+0xac>)
 8003336:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00c      	beq.n	800335c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3307      	adds	r3, #7
 8003346:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0307 	bic.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	4a1f      	ldr	r2, [pc, #124]	; (80033d4 <prvHeapInit+0xac>)
 8003358:	4413      	add	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003360:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <prvHeapInit+0xb0>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003366:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <prvHeapInit+0xb0>)
 8003368:	2200      	movs	r2, #0
 800336a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	4413      	add	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003374:	2208      	movs	r2, #8
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0307 	bic.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a15      	ldr	r2, [pc, #84]	; (80033dc <prvHeapInit+0xb4>)
 8003388:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800338a:	4b14      	ldr	r3, [pc, #80]	; (80033dc <prvHeapInit+0xb4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2200      	movs	r2, #0
 8003390:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <prvHeapInit+0xb4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	1ad2      	subs	r2, r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <prvHeapInit+0xb4>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <prvHeapInit+0xb8>)
 80033b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <prvHeapInit+0xbc>)
 80033be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80033c0:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <prvHeapInit+0xc0>)
 80033c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033c6:	601a      	str	r2, [r3, #0]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	20000160 	.word	0x20000160
 80033d8:	20000d18 	.word	0x20000d18
 80033dc:	20000d20 	.word	0x20000d20
 80033e0:	20000d28 	.word	0x20000d28
 80033e4:	20000d24 	.word	0x20000d24
 80033e8:	20000d2c 	.word	0x20000d2c

080033ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033f4:	4b28      	ldr	r3, [pc, #160]	; (8003498 <prvInsertBlockIntoFreeList+0xac>)
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e002      	b.n	8003400 <prvInsertBlockIntoFreeList+0x14>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	429a      	cmp	r2, r3
 8003408:	d8f7      	bhi.n	80033fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	4413      	add	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	429a      	cmp	r2, r3
 800341a:	d108      	bne.n	800342e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	441a      	add	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	441a      	add	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d118      	bne.n	8003474 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <prvInsertBlockIntoFreeList+0xb0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d00d      	beq.n	800346a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	441a      	add	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e008      	b.n	800347c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800346a:	4b0c      	ldr	r3, [pc, #48]	; (800349c <prvInsertBlockIntoFreeList+0xb0>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e003      	b.n	800347c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d002      	beq.n	800348a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000d18 	.word	0x20000d18
 800349c:	20000d20 	.word	0x20000d20

080034a0 <Write_IC_Channel1_Raw_data>:
{
	(* data) = Timer_IC_Channel1_Raw_data;
}

void Write_IC_Channel1_Raw_data(uint32_t * data)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel1_Raw_data = (* data);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a03      	ldr	r2, [pc, #12]	; (80034bc <Write_IC_Channel1_Raw_data+0x1c>)
 80034ae:	6013      	str	r3, [r2, #0]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	20000da0 	.word	0x20000da0

080034c0 <Write_IC_Channel2_Raw_data>:
{
	(* data) = Timer_IC_Channel2_Raw_data;
}

void Write_IC_Channel2_Raw_data(uint32_t * data)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel2_Raw_data = (* data);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a03      	ldr	r2, [pc, #12]	; (80034dc <Write_IC_Channel2_Raw_data+0x1c>)
 80034ce:	6013      	str	r3, [r2, #0]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	20000dac 	.word	0x20000dac

080034e0 <Write_IC_Channel3_Raw_data>:
{
	(* data) = Timer_IC_Channel3_Raw_data;
}

void Write_IC_Channel3_Raw_data(uint32_t * data)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel3_Raw_data = (* data);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a03      	ldr	r2, [pc, #12]	; (80034fc <Write_IC_Channel3_Raw_data+0x1c>)
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	20000da4 	.word	0x20000da4

08003500 <Init_System_Startup>:
#include "Initialize_System.h"

TIM_HandleTypeDef htim1;

void Init_System_Startup(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
	//Remote_Control_init();
	Init_Wheel_Speed_Provision();
 8003504:	f7fe fd78 	bl	8001ff8 <Init_Wheel_Speed_Provision>
	//Motor_Init();
	//Motor_Start();
	//Calibrate_Remote_Control();
}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}

0800350c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800350c:	b5b0      	push	{r4, r5, r7, lr}
 800350e:	b094      	sub	sp, #80	; 0x50
 8003510:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003512:	f7fd f891 	bl	8000638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003516:	f000 f84d 	bl	80035b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800351a:	f000 f89d 	bl	8003658 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Init_System_Startup();
 800351e:	f7ff ffef 	bl	8003500 <Init_System_Startup>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MwPeriodicTask */
  osThreadDef(MwPeriodicTask, StartMwPeriodicTask, osPriorityNormal, 0, 128);
 8003522:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <main+0x8c>)
 8003524:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003528:	461d      	mov	r5, r3
 800352a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800352c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800352e:	682b      	ldr	r3, [r5, #0]
 8003530:	6023      	str	r3, [r4, #0]
  MwPeriodicTaskHandle = osThreadCreate(osThread(MwPeriodicTask), NULL);
 8003532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f7fe fdda 	bl	80020f2 <osThreadCreate>
 800353e:	4602      	mov	r2, r0
 8003540:	4b16      	ldr	r3, [pc, #88]	; (800359c <main+0x90>)
 8003542:	601a      	str	r2, [r3, #0]

  /* definition and creation of LowLevelPeriodi */
  osThreadDef(LowLevelPeriodi, StartLowLevelPeriodicTask, osPriorityRealtime, 0, 128);
 8003544:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <main+0x94>)
 8003546:	f107 0418 	add.w	r4, r7, #24
 800354a:	461d      	mov	r5, r3
 800354c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800354e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	6023      	str	r3, [r4, #0]
  LowLevelPeriodiHandle = osThreadCreate(osThread(LowLevelPeriodi), NULL);
 8003554:	f107 0318 	add.w	r3, r7, #24
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fdc9 	bl	80020f2 <osThreadCreate>
 8003560:	4602      	mov	r2, r0
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <main+0x98>)
 8003564:	601a      	str	r2, [r3, #0]

  /* definition and creation of AppPeriodicTask */
  osThreadDef(AppPeriodicTask, StartAppPeriodicTask, osPriorityAboveNormal, 0, 128);
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <main+0x9c>)
 8003568:	1d3c      	adds	r4, r7, #4
 800356a:	461d      	mov	r5, r3
 800356c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800356e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003570:	682b      	ldr	r3, [r5, #0]
 8003572:	6023      	str	r3, [r4, #0]
  AppPeriodicTaskHandle = osThreadCreate(osThread(AppPeriodicTask), NULL);
 8003574:	1d3b      	adds	r3, r7, #4
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe fdba 	bl	80020f2 <osThreadCreate>
 800357e:	4602      	mov	r2, r0
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <main+0xa0>)
 8003582:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003584:	f7fe fdae 	bl	80020e4 <osKernelStart>
  while (1)
  {
	  //Provide_Robot_Speed();
	  //Calculate_Wheel_Speeds();
	  //Motorx_Set_Speed();
	  Provide_Wheel_Speeds();
 8003588:	f7fe fd70 	bl	800206c <Provide_Wheel_Speeds>
	  get_sys_count++;
 800358c:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <main+0xa4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	4a07      	ldr	r2, [pc, #28]	; (80035b0 <main+0xa4>)
 8003594:	6013      	str	r3, [r2, #0]
	  Provide_Wheel_Speeds();
 8003596:	e7f7      	b.n	8003588 <main+0x7c>
 8003598:	08003988 	.word	0x08003988
 800359c:	20000de0 	.word	0x20000de0
 80035a0:	080039ac 	.word	0x080039ac
 80035a4:	20000de8 	.word	0x20000de8
 80035a8:	080039d0 	.word	0x080039d0
 80035ac:	20000de4 	.word	0x20000de4
 80035b0:	20000d30 	.word	0x20000d30

080035b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b096      	sub	sp, #88	; 0x58
 80035b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	2244      	movs	r2, #68	; 0x44
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f9c0 	bl	8003948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035c8:	463b      	mov	r3, r7
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	60da      	str	r2, [r3, #12]
 80035d4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80035d6:	2302      	movs	r3, #2
 80035d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035e0:	2310      	movs	r3, #16
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035e4:	2302      	movs	r3, #2
 80035e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035e8:	2302      	movs	r3, #2
 80035ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80035ec:	2301      	movs	r3, #1
 80035ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80035f0:	2308      	movs	r3, #8
 80035f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80035f4:	2307      	movs	r3, #7
 80035f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80035f8:	2302      	movs	r3, #2
 80035fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80035fc:	2302      	movs	r3, #2
 80035fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fb43 	bl	8000c90 <HAL_RCC_OscConfig>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8003610:	f000 f870 	bl	80036f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003614:	230f      	movs	r3, #15
 8003616:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003618:	2303      	movs	r3, #3
 800361a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800361c:	2300      	movs	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003624:	2300      	movs	r3, #0
 8003626:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003628:	463b      	mov	r3, r7
 800362a:	2103      	movs	r1, #3
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd fedf 	bl	80013f0 <HAL_RCC_ClockConfig>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003638:	f000 f85c 	bl	80036f4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800363c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003640:	f7fd fad0 	bl	8000be4 <HAL_PWREx_ControlVoltageScaling>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800364a:	f000 f853 	bl	80036f4 <Error_Handler>
  }
}
 800364e:	bf00      	nop
 8003650:	3758      	adds	r7, #88	; 0x58
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <MX_GPIO_Init+0x2c>)
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003662:	4a08      	ldr	r2, [pc, #32]	; (8003684 <MX_GPIO_Init+0x2c>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <MX_GPIO_Init+0x2c>)
 800366c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	607b      	str	r3, [r7, #4]
 8003674:	687b      	ldr	r3, [r7, #4]

}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000

08003688 <StartMwPeriodicTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartMwPeriodicTask */
void StartMwPeriodicTask(void const * argument)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003690:	2001      	movs	r0, #1
 8003692:	f7fe fd55 	bl	8002140 <osDelay>
 8003696:	e7fb      	b.n	8003690 <StartMwPeriodicTask+0x8>

08003698 <StartLowLevelPeriodicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowLevelPeriodicTask */
void StartLowLevelPeriodicTask(void const * argument)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLowLevelPeriodicTask */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;
 80036a0:	230a      	movs	r3, #10
 80036a2:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80036a4:	f7ff f8dc 	bl	8002860 <xTaskGetTickCount>
 80036a8:	4603      	mov	r3, r0
 80036aa:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */

  for(;;)
  {
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80036ac:	f107 0308 	add.w	r3, r7, #8
 80036b0:	68f9      	ldr	r1, [r7, #12]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe ff36 	bl	8002524 <vTaskDelayUntil>

	  Provide_Wheel_Speeds();
 80036b8:	f7fe fcd8 	bl	800206c <Provide_Wheel_Speeds>
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80036bc:	e7f6      	b.n	80036ac <StartLowLevelPeriodicTask+0x14>

080036be <StartAppPeriodicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAppPeriodicTask */
void StartAppPeriodicTask(void const * argument)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAppPeriodicTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80036c6:	2001      	movs	r0, #1
 80036c8:	f7fe fd3a 	bl	8002140 <osDelay>
 80036cc:	e7fb      	b.n	80036c6 <StartAppPeriodicTask+0x8>
	...

080036d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036e2:	f7fc ffc9 	bl	8000678 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40001400 	.word	0x40001400

080036f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1);
 80036f8:	e7fe      	b.n	80036f8 <Error_Handler+0x4>
	...

080036fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_MspInit+0x4c>)
 8003704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003706:	4a10      	ldr	r2, [pc, #64]	; (8003748 <HAL_MspInit+0x4c>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6613      	str	r3, [r2, #96]	; 0x60
 800370e:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <HAL_MspInit+0x4c>)
 8003710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	607b      	str	r3, [r7, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_MspInit+0x4c>)
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <HAL_MspInit+0x4c>)
 8003720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003724:	6593      	str	r3, [r2, #88]	; 0x58
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_MspInit+0x4c>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003732:	2200      	movs	r2, #0
 8003734:	210f      	movs	r1, #15
 8003736:	f06f 0001 	mvn.w	r0, #1
 800373a:	f7fd f873 	bl	8000824 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000

0800374c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	; 0x30
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 800375c:	2200      	movs	r2, #0
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	2037      	movs	r0, #55	; 0x37
 8003762:	f7fd f85f 	bl	8000824 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8003766:	2037      	movs	r0, #55	; 0x37
 8003768:	f7fd f878 	bl	800085c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800376c:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <HAL_InitTick+0x9c>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <HAL_InitTick+0x9c>)
 8003772:	f043 0320 	orr.w	r3, r3, #32
 8003776:	6593      	str	r3, [r2, #88]	; 0x58
 8003778:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_InitTick+0x9c>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003784:	f107 0210 	add.w	r2, r7, #16
 8003788:	f107 0314 	add.w	r3, r7, #20
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f7fd ffbc 	bl	800170c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003794:	f7fd ffa4 	bl	80016e0 <HAL_RCC_GetPCLK1Freq>
 8003798:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	4a13      	ldr	r2, [pc, #76]	; (80037ec <HAL_InitTick+0xa0>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	0c9b      	lsrs	r3, r3, #18
 80037a4:	3b01      	subs	r3, #1
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <HAL_InitTick+0xa4>)
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <HAL_InitTick+0xa8>)
 80037ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <HAL_InitTick+0xa4>)
 80037b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037b4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80037b6:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <HAL_InitTick+0xa4>)
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <HAL_InitTick+0xa4>)
 80037be:	2200      	movs	r2, #0
 80037c0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_InitTick+0xa4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80037c8:	4809      	ldr	r0, [pc, #36]	; (80037f0 <HAL_InitTick+0xa4>)
 80037ca:	f7fe f831 	bl	8001830 <HAL_TIM_Base_Init>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80037d4:	4806      	ldr	r0, [pc, #24]	; (80037f0 <HAL_InitTick+0xa4>)
 80037d6:	f7fe f861 	bl	800189c <HAL_TIM_Base_Start_IT>
 80037da:	4603      	mov	r3, r0
 80037dc:	e000      	b.n	80037e0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3730      	adds	r7, #48	; 0x30
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000
 80037ec:	431bde83 	.word	0x431bde83
 80037f0:	20000dec 	.word	0x20000dec
 80037f4:	40001400 	.word	0x40001400

080037f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800380a:	e7fe      	b.n	800380a <HardFault_Handler+0x4>

0800380c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003810:	e7fe      	b.n	8003810 <MemManage_Handler+0x4>

08003812 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003816:	e7fe      	b.n	8003816 <BusFault_Handler+0x4>

08003818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800381c:	e7fe      	b.n	800381c <UsageFault_Handler+0x4>

0800381e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800381e:	b480      	push	{r7}
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003830:	4802      	ldr	r0, [pc, #8]	; (800383c <TIM7_IRQHandler+0x10>)
 8003832:	f7fe f926 	bl	8001a82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000dec 	.word	0x20000dec

08003840 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003844:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <SystemInit+0x64>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <SystemInit+0x64>)
 800384c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <SystemInit+0x68>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <SystemInit+0x68>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <SystemInit+0x68>)
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <SystemInit+0x68>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a0f      	ldr	r2, [pc, #60]	; (80038a8 <SystemInit+0x68>)
 800386c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003870:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003874:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <SystemInit+0x68>)
 8003878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800387c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <SystemInit+0x68>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <SystemInit+0x68>)
 8003884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003888:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <SystemInit+0x68>)
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <SystemInit+0x64>)
 8003892:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003896:	609a      	str	r2, [r3, #8]
#endif
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	e000ed00 	.word	0xe000ed00
 80038a8:	40021000 	.word	0x40021000

080038ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80038ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80038b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80038b2:	e003      	b.n	80038bc <LoopCopyDataInit>

080038b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80038b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80038b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80038ba:	3104      	adds	r1, #4

080038bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80038bc:	480b      	ldr	r0, [pc, #44]	; (80038ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80038c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80038c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80038c4:	d3f6      	bcc.n	80038b4 <CopyDataInit>
	ldr	r2, =_sbss
 80038c6:	4a0b      	ldr	r2, [pc, #44]	; (80038f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80038c8:	e002      	b.n	80038d0 <LoopFillZerobss>

080038ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80038ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80038cc:	f842 3b04 	str.w	r3, [r2], #4

080038d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80038d0:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <LoopForever+0x16>)
	cmp	r2, r3
 80038d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80038d4:	d3f9      	bcc.n	80038ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038d6:	f7ff ffb3 	bl	8003840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038da:	f000 f811 	bl	8003900 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038de:	f7ff fe15 	bl	800350c <main>

080038e2 <LoopForever>:

LoopForever:
    b LoopForever
 80038e2:	e7fe      	b.n	80038e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80038e4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80038e8:	08003a34 	.word	0x08003a34
	ldr	r0, =_sdata
 80038ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80038f0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80038f4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80038f8:	20000e2c 	.word	0x20000e2c

080038fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038fc:	e7fe      	b.n	80038fc <ADC1_2_IRQHandler>
	...

08003900 <__libc_init_array>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	4e0d      	ldr	r6, [pc, #52]	; (8003938 <__libc_init_array+0x38>)
 8003904:	4c0d      	ldr	r4, [pc, #52]	; (800393c <__libc_init_array+0x3c>)
 8003906:	1ba4      	subs	r4, r4, r6
 8003908:	10a4      	asrs	r4, r4, #2
 800390a:	2500      	movs	r5, #0
 800390c:	42a5      	cmp	r5, r4
 800390e:	d109      	bne.n	8003924 <__libc_init_array+0x24>
 8003910:	4e0b      	ldr	r6, [pc, #44]	; (8003940 <__libc_init_array+0x40>)
 8003912:	4c0c      	ldr	r4, [pc, #48]	; (8003944 <__libc_init_array+0x44>)
 8003914:	f000 f820 	bl	8003958 <_init>
 8003918:	1ba4      	subs	r4, r4, r6
 800391a:	10a4      	asrs	r4, r4, #2
 800391c:	2500      	movs	r5, #0
 800391e:	42a5      	cmp	r5, r4
 8003920:	d105      	bne.n	800392e <__libc_init_array+0x2e>
 8003922:	bd70      	pop	{r4, r5, r6, pc}
 8003924:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003928:	4798      	blx	r3
 800392a:	3501      	adds	r5, #1
 800392c:	e7ee      	b.n	800390c <__libc_init_array+0xc>
 800392e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003932:	4798      	blx	r3
 8003934:	3501      	adds	r5, #1
 8003936:	e7f2      	b.n	800391e <__libc_init_array+0x1e>
 8003938:	08003a2c 	.word	0x08003a2c
 800393c:	08003a2c 	.word	0x08003a2c
 8003940:	08003a2c 	.word	0x08003a2c
 8003944:	08003a30 	.word	0x08003a30

08003948 <memset>:
 8003948:	4402      	add	r2, r0
 800394a:	4603      	mov	r3, r0
 800394c:	4293      	cmp	r3, r2
 800394e:	d100      	bne.n	8003952 <memset+0xa>
 8003950:	4770      	bx	lr
 8003952:	f803 1b01 	strb.w	r1, [r3], #1
 8003956:	e7f9      	b.n	800394c <memset+0x4>

08003958 <_init>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	bf00      	nop
 800395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395e:	bc08      	pop	{r3}
 8003960:	469e      	mov	lr, r3
 8003962:	4770      	bx	lr

08003964 <_fini>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	bf00      	nop
 8003968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396a:	bc08      	pop	{r3}
 800396c:	469e      	mov	lr, r3
 800396e:	4770      	bx	lr
