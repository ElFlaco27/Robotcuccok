
robocup3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000677c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a18  08006a18  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006a18  08006a18  00016a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a20  08006a20  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a24  08006a24  00016a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ecc  20000074  08006a9c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f40  08006a9c  00020f40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191e5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000366d  00000000  00000000  00039289  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a8  00000000  00000000  0003c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e0  00000000  00000000  0003dda0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000299c7  00000000  00000000  0003f080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012619  00000000  00000000  00068a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fba2c  00000000  00000000  0007b060  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176a8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005778  00000000  00000000  00176b08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068f4 	.word	0x080068f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080068f4 	.word	0x080068f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <TIMx_IC_Init>:
uint32_t TIM_IC_5_Value_1;
uint32_t TIM_IC_5_CaptureIndex;
#endif

void TIMx_IC_Init(TIM_IC_Typedef config)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b091      	sub	sp, #68	; 0x44
 8000574:	af00      	add	r7, sp, #0
 8000576:	463c      	mov	r4, r7
 8000578:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800057c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8000588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
	GPIO_InitTypeDef  GPIO_InitStruct;

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	TIM_handler.Instance = config.TIMx;
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	4a31      	ldr	r2, [pc, #196]	; (8000660 <TIMx_IC_Init+0xf0>)
 800059a:	6013      	str	r3, [r2, #0]
	TIM_handler.Init.Prescaler = 0;
 800059c:	4b30      	ldr	r3, [pc, #192]	; (8000660 <TIMx_IC_Init+0xf0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
	TIM_handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a2:	4b2f      	ldr	r3, [pc, #188]	; (8000660 <TIMx_IC_Init+0xf0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
	TIM_handler.Init.Period = 65535;
 80005a8:	4b2d      	ldr	r3, [pc, #180]	; (8000660 <TIMx_IC_Init+0xf0>)
 80005aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ae:	60da      	str	r2, [r3, #12]
	TIM_handler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b0:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <TIMx_IC_Init+0xf0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
	TIM_handler.Init.RepetitionCounter = 0;
 80005b6:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <TIMx_IC_Init+0xf0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]
	TIM_handler.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <TIMx_IC_Init+0xf0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&TIM_handler) != HAL_OK)
 80005c2:	4827      	ldr	r0, [pc, #156]	; (8000660 <TIMx_IC_Init+0xf0>)
 80005c4:	f002 f960 	bl	8002888 <HAL_TIM_IC_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <TIMx_IC_Init+0x62>
	{
		Error_Handler();
 80005ce:	f005 fbe3 	bl	8005d98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d2:	2300      	movs	r3, #0
 80005d4:	637b      	str	r3, [r7, #52]	; 0x34
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005d6:	2300      	movs	r3, #0
 80005d8:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&TIM_handler, &sMasterConfig) != HAL_OK)
 80005de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005e2:	4619      	mov	r1, r3
 80005e4:	481e      	ldr	r0, [pc, #120]	; (8000660 <TIMx_IC_Init+0xf0>)
 80005e6:	f002 feb3 	bl	8003350 <HAL_TIMEx_MasterConfigSynchronization>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <TIMx_IC_Init+0x84>
	{
		Error_Handler();
 80005f0:	f005 fbd2 	bl	8005d98 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80005f4:	230a      	movs	r3, #10
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigIC.ICFilter = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_IC_ConfigChannel(&TIM_handler, &sConfigIC, config.TIM_channelx) != HAL_OK)
 8000604:	88bb      	ldrh	r3, [r7, #4]
 8000606:	461a      	mov	r2, r3
 8000608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060c:	4619      	mov	r1, r3
 800060e:	4814      	ldr	r0, [pc, #80]	; (8000660 <TIMx_IC_Init+0xf0>)
 8000610:	f002 fbbc 	bl	8002d8c <HAL_TIM_IC_ConfigChannel>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <TIMx_IC_Init+0xae>
	{
		Error_Handler();
 800061a:	f005 fbbd 	bl	8005d98 <Error_Handler>
	}

	GPIO_InitStruct.Pin = config.GPIO_Pinx;
 800061e:	89bb      	ldrh	r3, [r7, #12]
 8000620:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	2302      	movs	r3, #2
 8000624:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = config.GPIO_AlternateFunctionx;
 800062e:	7bbb      	ldrb	r3, [r7, #14]
 8000630:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(config.GPIOx, &GPIO_InitStruct);
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	f107 0210 	add.w	r2, r7, #16
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fc22 	bl	8000e84 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(config.TIMx_IRQ, 0, 0);
 8000640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fbf1 	bl	8000e30 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(config.TIMx_IRQ);
 800064e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fc08 	bl	8000e68 <HAL_NVIC_EnableIRQ>
}
 8000658:	bf00      	nop
 800065a:	3744      	adds	r7, #68	; 0x44
 800065c:	46bd      	mov	sp, r7
 800065e:	bd90      	pop	{r4, r7, pc}
 8000660:	20000db4 	.word	0x20000db4

08000664 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000664:	b480      	push	{r7}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

	if ((htim_ic->Instance == TIM1))
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <HAL_TIM_IC_MspInit+0x80>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d10c      	bne.n	8000690 <HAL_TIM_IC_MspInit+0x2c>
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM1_CLK_ENABLE();
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <HAL_TIM_IC_MspInit+0x84>)
 8000678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800067a:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <HAL_TIM_IC_MspInit+0x84>)
 800067c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000680:	6613      	str	r3, [r2, #96]	; 0x60
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <HAL_TIM_IC_MspInit+0x84>)
 8000684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM3_CLK_ENABLE();
	}

}
 800068e:	e022      	b.n	80006d6 <HAL_TIM_IC_MspInit+0x72>
	else if ((htim_ic->Instance == TIM2))
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000698:	d10c      	bne.n	80006b4 <HAL_TIM_IC_MspInit+0x50>
	    __HAL_RCC_TIM2_CLK_ENABLE();
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <HAL_TIM_IC_MspInit+0x84>)
 800069c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <HAL_TIM_IC_MspInit+0x84>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6593      	str	r3, [r2, #88]	; 0x58
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <HAL_TIM_IC_MspInit+0x84>)
 80006a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
}
 80006b2:	e010      	b.n	80006d6 <HAL_TIM_IC_MspInit+0x72>
	else if ((htim_ic->Instance == TIM3))
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0c      	ldr	r2, [pc, #48]	; (80006ec <HAL_TIM_IC_MspInit+0x88>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d10b      	bne.n	80006d6 <HAL_TIM_IC_MspInit+0x72>
	    __HAL_RCC_TIM3_CLK_ENABLE();
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_TIM_IC_MspInit+0x84>)
 80006c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c2:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <HAL_TIM_IC_MspInit+0x84>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6593      	str	r3, [r2, #88]	; 0x58
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <HAL_TIM_IC_MspInit+0x84>)
 80006cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
}
 80006d6:	bf00      	nop
 80006d8:	371c      	adds	r7, #28
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40012c00 	.word	0x40012c00
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40000400 	.word	0x40000400

080006f0 <TIMx_IC_Start>:

void TIMx_IC_Start(TIM_IC_Typedef config)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	463c      	mov	r4, r7
 80006f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TIM_handler.Instance = config.TIMx;
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	4a05      	ldr	r2, [pc, #20]	; (8000714 <TIMx_IC_Start+0x24>)
 8000700:	6013      	str	r3, [r2, #0]
	HAL_TIM_IC_Start_IT(&TIM_handler, config.TIM_channelx);
 8000702:	88bb      	ldrh	r3, [r7, #4]
 8000704:	4619      	mov	r1, r3
 8000706:	4803      	ldr	r0, [pc, #12]	; (8000714 <TIMx_IC_Start+0x24>)
 8000708:	f002 f8ea 	bl	80028e0 <HAL_TIM_IC_Start_IT>
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	bd90      	pop	{r4, r7, pc}
 8000714:	20000db4 	.word	0x20000db4

08000718 <HAL_TIM_IC_CaptureCallback>:
	TIM_handler.Instance = config.TIMx;
	HAL_TIM_IC_Stop_IT(&TIM_handler, config.TIM_channelx);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	uint32_t value2;
	uint32_t Diff_value;
	if((htim->Instance == IC_1_TIM) && (htim->Channel == IC_1_TIM_ACT_CHANNEL))
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a67      	ldr	r2, [pc, #412]	; (80008c4 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d13f      	bne.n	80007aa <HAL_TIM_IC_CaptureCallback+0x92>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7f1b      	ldrb	r3, [r3, #28]
 800072e:	2b08      	cmp	r3, #8
 8000730:	d13b      	bne.n	80007aa <HAL_TIM_IC_CaptureCallback+0x92>
	{
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 8000732:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000736:	691b      	ldr	r3, [r3, #16]
 8000738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00a      	beq.n	8000756 <HAL_TIM_IC_CaptureCallback+0x3e>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_1_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_1_TIM_CHANNEL);
 8000740:	210c      	movs	r1, #12
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f002 fbbe 	bl	8002ec4 <HAL_TIM_ReadCapturedValue>
 8000748:	4602      	mov	r2, r0
 800074a:	4b5f      	ldr	r3, [pc, #380]	; (80008c8 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 800074c:	601a      	str	r2, [r3, #0]
			TIM_IC_1_CaptureIndex = 1;
 800074e:	4b5f      	ldr	r3, [pc, #380]	; (80008cc <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000750:	2201      	movs	r2, #1
 8000752:	601a      	str	r2, [r3, #0]
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 8000754:	e0af      	b.n	80008b6 <HAL_TIM_IC_CaptureCallback+0x19e>
		}
		else if(TIM_IC_1_CaptureIndex == 1)
 8000756:	4b5d      	ldr	r3, [pc, #372]	; (80008cc <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b01      	cmp	r3, #1
 800075c:	f040 80ab 	bne.w	80008b6 <HAL_TIM_IC_CaptureCallback+0x19e>
		{
			 /* Get the 2nd Input Capture value */
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_1_TIM_CHANNEL);
 8000760:	210c      	movs	r1, #12
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f002 fbae 	bl	8002ec4 <HAL_TIM_ReadCapturedValue>
 8000768:	60f8      	str	r0, [r7, #12]

			 /* Capture computation */
			 if (value2 > TIM_IC_1_Value_1)
 800076a:	4b57      	ldr	r3, [pc, #348]	; (80008c8 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	429a      	cmp	r2, r3
 8000772:	d905      	bls.n	8000780 <HAL_TIM_IC_CaptureCallback+0x68>
			 {
				 Diff_value = (value2 - TIM_IC_1_Value_1);
 8000774:	4b54      	ldr	r3, [pc, #336]	; (80008c8 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	e00b      	b.n	8000798 <HAL_TIM_IC_CaptureCallback+0x80>
			 }
			 else if (value2 < TIM_IC_1_Value_1)
 8000780:	4b51      	ldr	r3, [pc, #324]	; (80008c8 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	68fa      	ldr	r2, [r7, #12]
 8000786:	429a      	cmp	r2, r3
 8000788:	d206      	bcs.n	8000798 <HAL_TIM_IC_CaptureCallback+0x80>
			 {
				 /* 0xFFFF is max TIM1_CCRx value */
				 Diff_value = ((65535 - TIM_IC_1_Value_1) + value2) + 1;
 800078a:	4b4f      	ldr	r3, [pc, #316]	; (80008c8 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000796:	60bb      	str	r3, [r7, #8]
			 }
			 Write_IC_Channel1_Raw_data(&Diff_value);
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	4618      	mov	r0, r3
 800079e:	f005 f81f 	bl	80057e0 <Write_IC_Channel1_Raw_data>
			 TIM_IC_1_CaptureIndex = 0;
 80007a2:	4b4a      	ldr	r3, [pc, #296]	; (80008cc <HAL_TIM_IC_CaptureCallback+0x1b4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 80007a8:	e085      	b.n	80008b6 <HAL_TIM_IC_CaptureCallback+0x19e>
		}
	}
#if (IC_IN_USE>1)
	else if((htim->Instance == IC_2_TIM) && (htim->Channel == IC_2_TIM_ACT_CHANNEL))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a48      	ldr	r2, [pc, #288]	; (80008d0 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d13d      	bne.n	8000830 <HAL_TIM_IC_CaptureCallback+0x118>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7f1b      	ldrb	r3, [r3, #28]
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	d139      	bne.n	8000830 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 80007bc:	4b45      	ldr	r3, [pc, #276]	; (80008d4 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80007be:	691b      	ldr	r3, [r3, #16]
 80007c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00a      	beq.n	80007de <HAL_TIM_IC_CaptureCallback+0xc6>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_2_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_2_TIM_CHANNEL);
 80007c8:	2108      	movs	r1, #8
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f002 fb7a 	bl	8002ec4 <HAL_TIM_ReadCapturedValue>
 80007d0:	4602      	mov	r2, r0
 80007d2:	4b41      	ldr	r3, [pc, #260]	; (80008d8 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80007d4:	601a      	str	r2, [r3, #0]
			TIM_IC_2_CaptureIndex = 1;
 80007d6:	4b41      	ldr	r3, [pc, #260]	; (80008dc <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80007d8:	2201      	movs	r2, #1
 80007da:	601a      	str	r2, [r3, #0]
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 80007dc:	e06d      	b.n	80008ba <HAL_TIM_IC_CaptureCallback+0x1a2>
		}
		else if(TIM_IC_2_CaptureIndex == 1)
 80007de:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d169      	bne.n	80008ba <HAL_TIM_IC_CaptureCallback+0x1a2>
		{
			 /* Get the 2nd Input Capture value */
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_2_TIM_CHANNEL);
 80007e6:	2108      	movs	r1, #8
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f002 fb6b 	bl	8002ec4 <HAL_TIM_ReadCapturedValue>
 80007ee:	60f8      	str	r0, [r7, #12]

			 /* Capture computation */
			 if (value2 > TIM_IC_2_Value_1)
 80007f0:	4b39      	ldr	r3, [pc, #228]	; (80008d8 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d905      	bls.n	8000806 <HAL_TIM_IC_CaptureCallback+0xee>
			 {
				 Diff_value = (value2 - TIM_IC_2_Value_1);
 80007fa:	4b37      	ldr	r3, [pc, #220]	; (80008d8 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	e00b      	b.n	800081e <HAL_TIM_IC_CaptureCallback+0x106>
			 }
			 else if (value2 < TIM_IC_2_Value_1)
 8000806:	4b34      	ldr	r3, [pc, #208]	; (80008d8 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	429a      	cmp	r2, r3
 800080e:	d206      	bcs.n	800081e <HAL_TIM_IC_CaptureCallback+0x106>
			 {
				 /* 0xFFFF is max TIM1_CCRx value */
				 Diff_value = ((65535 - TIM_IC_2_Value_1) + value2) + 1;
 8000810:	4b31      	ldr	r3, [pc, #196]	; (80008d8 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800081c:	60bb      	str	r3, [r7, #8]
			 }
			 Write_IC_Channel2_Raw_data(&Diff_value);
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4618      	mov	r0, r3
 8000824:	f004 fffc 	bl	8005820 <Write_IC_Channel2_Raw_data>
			 TIM_IC_2_CaptureIndex = 0;
 8000828:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 800082e:	e044      	b.n	80008ba <HAL_TIM_IC_CaptureCallback+0x1a2>
		}
	}
#endif
#if (IC_IN_USE>2)
	else if((htim->Instance == IC_3_TIM) && (htim->Channel == IC_3_TIM_ACT_CHANNEL))
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d140      	bne.n	80008bc <HAL_TIM_IC_CaptureCallback+0x1a4>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	7f1b      	ldrb	r3, [r3, #28]
 800083e:	2b08      	cmp	r3, #8
 8000840:	d13c      	bne.n	80008bc <HAL_TIM_IC_CaptureCallback+0x1a4>
	{
		if(IC_3_GPIO->IDR & IC_3_GPIO_PIN)
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000844:	691b      	ldr	r3, [r3, #16]
 8000846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00a      	beq.n	8000864 <HAL_TIM_IC_CaptureCallback+0x14c>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_3_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_3_TIM_CHANNEL);
 800084e:	210c      	movs	r1, #12
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f002 fb37 	bl	8002ec4 <HAL_TIM_ReadCapturedValue>
 8000856:	4602      	mov	r2, r0
 8000858:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800085a:	601a      	str	r2, [r3, #0]
			TIM_IC_3_CaptureIndex = 1;
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 800085e:	2201      	movs	r2, #1
 8000860:	601a      	str	r2, [r3, #0]
		}
	}
#endif


}
 8000862:	e02b      	b.n	80008bc <HAL_TIM_IC_CaptureCallback+0x1a4>
		else if(TIM_IC_3_CaptureIndex == 1)
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d127      	bne.n	80008bc <HAL_TIM_IC_CaptureCallback+0x1a4>
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_3_TIM_CHANNEL);
 800086c:	210c      	movs	r1, #12
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f002 fb28 	bl	8002ec4 <HAL_TIM_ReadCapturedValue>
 8000874:	60f8      	str	r0, [r7, #12]
			 if (value2 > TIM_IC_3_Value_1)
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d905      	bls.n	800088c <HAL_TIM_IC_CaptureCallback+0x174>
				 Diff_value = (value2 - TIM_IC_3_Value_1);
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	e00b      	b.n	80008a4 <HAL_TIM_IC_CaptureCallback+0x18c>
			 else if (value2 < TIM_IC_3_Value_1)
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	429a      	cmp	r2, r3
 8000894:	d206      	bcs.n	80008a4 <HAL_TIM_IC_CaptureCallback+0x18c>
				 Diff_value = ((65535 - TIM_IC_3_Value_1) + value2) + 1;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80008a2:	60bb      	str	r3, [r7, #8]
			 Write_IC_Channel3_Raw_data(&Diff_value);
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4618      	mov	r0, r3
 80008aa:	f004 ffd9 	bl	8005860 <Write_IC_Channel3_Raw_data>
			 TIM_IC_3_CaptureIndex = 0;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	e002      	b.n	80008bc <HAL_TIM_IC_CaptureCallback+0x1a4>
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 80008b6:	bf00      	nop
 80008b8:	e000      	b.n	80008bc <HAL_TIM_IC_CaptureCallback+0x1a4>
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 80008ba:	bf00      	nop
}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40012c00 	.word	0x40012c00
 80008c8:	20000da4 	.word	0x20000da4
 80008cc:	20000dac 	.word	0x20000dac
 80008d0:	40013400 	.word	0x40013400
 80008d4:	48000800 	.word	0x48000800
 80008d8:	20000df4 	.word	0x20000df4
 80008dc:	20000db0 	.word	0x20000db0
 80008e0:	20000da8 	.word	0x20000da8
 80008e4:	20000df8 	.word	0x20000df8

080008e8 <Change_PWM_Pulse>:
}



void Change_PWM_Pulse(TIM_PWM_Typedef config)
{
 80008e8:	b084      	sub	sp, #16
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b092      	sub	sp, #72	; 0x48
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 80008f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_HandleTypeDef TIM_handler = {0};
 80008f8:	463b      	mov	r3, r7
 80008fa:	2240      	movs	r2, #64	; 0x40
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f005 fbf3 	bl	80060ea <memset>
	uint32_t Period_Value;
	uint32_t Pulse_Value;
	TIM_handler.Instance = config.TIMx;
 8000904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000906:	603b      	str	r3, [r7, #0]
	Period_Value = (uint32_t)(TIMx_PWM_CLK / config.Frequency) - 1;
 8000908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800090a:	4a25      	ldr	r2, [pc, #148]	; (80009a0 <Change_PWM_Pulse+0xb8>)
 800090c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000910:	3b01      	subs	r3, #1
 8000912:	643b      	str	r3, [r7, #64]	; 0x40
	if(config.Duty_Cicle == 0)
 8000914:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000918:	2b00      	cmp	r3, #0
 800091a:	d102      	bne.n	8000922 <Change_PWM_Pulse+0x3a>
	{
		Pulse_Value = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	647b      	str	r3, [r7, #68]	; 0x44
 8000920:	e00b      	b.n	800093a <Change_PWM_Pulse+0x52>
	}
	else
	{
		Pulse_Value = (uint32_t)((Period_Value * config.Duty_Cicle) / 100 - 1);
 8000922:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000926:	461a      	mov	r2, r3
 8000928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800092a:	fb03 f302 	mul.w	r3, r3, r2
 800092e:	4a1d      	ldr	r2, [pc, #116]	; (80009a4 <Change_PWM_Pulse+0xbc>)
 8000930:	fba2 2303 	umull	r2, r3, r2, r3
 8000934:	095b      	lsrs	r3, r3, #5
 8000936:	3b01      	subs	r3, #1
 8000938:	647b      	str	r3, [r7, #68]	; 0x44
	}
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 800093a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800093e:	2b00      	cmp	r3, #0
 8000940:	d103      	bne.n	800094a <Change_PWM_Pulse+0x62>
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000946:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000948:	e022      	b.n	8000990 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 800094a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800094e:	2b04      	cmp	r3, #4
 8000950:	d103      	bne.n	800095a <Change_PWM_Pulse+0x72>
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000956:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000958:	e01a      	b.n	8000990 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 800095a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800095e:	2b08      	cmp	r3, #8
 8000960:	d103      	bne.n	800096a <Change_PWM_Pulse+0x82>
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000966:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000968:	e012      	b.n	8000990 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 800096a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800096e:	2b0c      	cmp	r3, #12
 8000970:	d103      	bne.n	800097a <Change_PWM_Pulse+0x92>
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000976:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000978:	e00a      	b.n	8000990 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 800097a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800097e:	2b10      	cmp	r3, #16
 8000980:	d103      	bne.n	800098a <Change_PWM_Pulse+0xa2>
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000986:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000988:	e002      	b.n	8000990 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800098e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000990:	bf00      	nop
 8000992:	3748      	adds	r7, #72	; 0x48
 8000994:	46bd      	mov	sp, r7
 8000996:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800099a:	b004      	add	sp, #16
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	00f42400 	.word	0x00f42400
 80009a4:	51eb851f 	.word	0x51eb851f

080009a8 <TIMx_ENC_Init>:
uint32_t TIM_ENC_4_CaptureIndex;
#endif


void TIMx_ENC_Init(TIM_ENC_Typedef config)
{
 80009a8:	b084      	sub	sp, #16
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b098      	sub	sp, #96	; 0x60
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	f107 0c68 	add.w	ip, r7, #104	; 0x68
 80009b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
	TIM_Encoder_InitTypeDef sConfigENC = {0};
 80009c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009c8:	2224      	movs	r2, #36	; 0x24
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f005 fb8c 	bl	80060ea <memset>
	GPIO_InitTypeDef  GPIO_InitStruct;

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	TIM_handler.Instance = config.TIMx;
 80009d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009d4:	4a69      	ldr	r2, [pc, #420]	; (8000b7c <TIMx_ENC_Init+0x1d4>)
 80009d6:	6013      	str	r3, [r2, #0]
	TIM_handler.Init.Prescaler = 0;
 80009d8:	4b68      	ldr	r3, [pc, #416]	; (8000b7c <TIMx_ENC_Init+0x1d4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
	TIM_handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b67      	ldr	r3, [pc, #412]	; (8000b7c <TIMx_ENC_Init+0x1d4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
	TIM_handler.Init.Period = 65535;
 80009e4:	4b65      	ldr	r3, [pc, #404]	; (8000b7c <TIMx_ENC_Init+0x1d4>)
 80009e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ea:	60da      	str	r2, [r3, #12]
	TIM_handler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b63      	ldr	r3, [pc, #396]	; (8000b7c <TIMx_ENC_Init+0x1d4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
	TIM_handler.Init.RepetitionCounter = 0;
 80009f2:	4b62      	ldr	r3, [pc, #392]	; (8000b7c <TIMx_ENC_Init+0x1d4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
	TIM_handler.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f8:	4b60      	ldr	r3, [pc, #384]	; (8000b7c <TIMx_ENC_Init+0x1d4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
	sConfigENC.EncoderMode = TIM_ENCODERMODE_TI12;
 80009fe:	2303      	movs	r3, #3
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigENC.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a02:	2300      	movs	r3, #0
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigENC.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a06:	2301      	movs	r3, #1
 8000a08:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigENC.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigENC.IC1Filter = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigENC.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a12:	2300      	movs	r3, #0
 8000a14:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigENC.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a16:	2301      	movs	r3, #1
 8000a18:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigENC.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigENC.IC2Filter = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_Encoder_Init(&TIM_handler, &sConfigENC) != HAL_OK)
 8000a22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a26:	4619      	mov	r1, r3
 8000a28:	4854      	ldr	r0, [pc, #336]	; (8000b7c <TIMx_ENC_Init+0x1d4>)
 8000a2a:	f001 ffc7 	bl	80029bc <HAL_TIM_Encoder_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <TIMx_ENC_Init+0x90>
	{
		Error_Handler();
 8000a34:	f005 f9b0 	bl	8005d98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&TIM_handler, &sMasterConfig) != HAL_OK)
 8000a44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a48:	4619      	mov	r1, r3
 8000a4a:	484c      	ldr	r0, [pc, #304]	; (8000b7c <TIMx_ENC_Init+0x1d4>)
 8000a4c:	f002 fc80 	bl	8003350 <HAL_TIMEx_MasterConfigSynchronization>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <TIMx_ENC_Init+0xb2>
	{
		Error_Handler();
 8000a56:	f005 f99f 	bl	8005d98 <Error_Handler>
	}


	if(config.GPIOx_ch1 == GPIOA)
 8000a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a60:	d10c      	bne.n	8000a7c <TIMx_ENC_Init+0xd4>
	{

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b47      	ldr	r3, [pc, #284]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a46      	ldr	r2, [pc, #280]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b44      	ldr	r3, [pc, #272]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	e020      	b.n	8000abe <TIMx_ENC_Init+0x116>
	}
	else if(config.GPIOx_ch1 == GPIOB)
 8000a7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a7e:	4a41      	ldr	r2, [pc, #260]	; (8000b84 <TIMx_ENC_Init+0x1dc>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d10c      	bne.n	8000a9e <TIMx_ENC_Init+0xf6>
	{

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	4b3e      	ldr	r3, [pc, #248]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a88:	4a3d      	ldr	r2, [pc, #244]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a90:	4b3b      	ldr	r3, [pc, #236]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	e00f      	b.n	8000abe <TIMx_ENC_Init+0x116>
	}
	else if(config.GPIOx_ch1 == GPIOC)
 8000a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aa0:	4a39      	ldr	r2, [pc, #228]	; (8000b88 <TIMx_ENC_Init+0x1e0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d10b      	bne.n	8000abe <TIMx_ENC_Init+0x116>
	{

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	4b36      	ldr	r3, [pc, #216]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a35      	ldr	r2, [pc, #212]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
	}

	if(config.GPIOx_ch2 == GPIOA)
 8000abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ac0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ac4:	d10c      	bne.n	8000ae0 <TIMx_ENC_Init+0x138>
	{

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	4a2d      	ldr	r2, [pc, #180]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	e020      	b.n	8000b22 <TIMx_ENC_Init+0x17a>
	}
	else if(config.GPIOx_ch2 == GPIOB)
 8000ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ae2:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <TIMx_ENC_Init+0x1dc>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d10c      	bne.n	8000b02 <TIMx_ENC_Init+0x15a>
	{

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	4a24      	ldr	r2, [pc, #144]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	e00f      	b.n	8000b22 <TIMx_ENC_Init+0x17a>
	}
	else if(config.GPIOx_ch2 == GPIOC)
 8000b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b04:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <TIMx_ENC_Init+0x1e0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d10b      	bne.n	8000b22 <TIMx_ENC_Init+0x17a>
	{

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <TIMx_ENC_Init+0x1d8>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
	}


	GPIO_InitStruct.Pin = config.GPIO_Pinx_ch1;
 8000b22:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000b26:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = config.GPIO_AlternateFunctionx;
 8000b34:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(config.GPIOx_ch1, &GPIO_InitStruct);
 8000b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b3c:	f107 021c 	add.w	r2, r7, #28
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f99e 	bl	8000e84 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = config.GPIO_Pinx_ch2;
 8000b48:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000b4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = config.GPIO_AlternateFunctionx;
 8000b5a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(config.GPIOx_ch2, &GPIO_InitStruct);
 8000b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b62:	f107 021c 	add.w	r2, r7, #28
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f98b 	bl	8000e84 <HAL_GPIO_Init>

	//HAL_NVENC_SetPriority(config.TIMx_IRQ, 0, 0);
	//HAL_NVENC_EnableIRQ(config.TIMx_IRQ);
}
 8000b6e:	bf00      	nop
 8000b70:	3760      	adds	r7, #96	; 0x60
 8000b72:	46bd      	mov	sp, r7
 8000b74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr
 8000b7c:	20000db4 	.word	0x20000db4
 8000b80:	40021000 	.word	0x40021000
 8000b84:	48000400 	.word	0x48000400
 8000b88:	48000800 	.word	0x48000800

08000b8c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_ENC)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b087      	sub	sp, #28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

	if ((htim_ENC->Instance == TIM1))
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <HAL_TIM_Encoder_MspInit+0x80>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d10c      	bne.n	8000bb8 <HAL_TIM_Encoder_MspInit+0x2c>
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8000ba4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8000bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697b      	ldr	r3, [r7, #20]
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM3_CLK_ENABLE();
	}

}
 8000bb6:	e022      	b.n	8000bfe <HAL_TIM_Encoder_MspInit+0x72>
	else if ((htim_ENC->Instance == TIM2))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc0:	d10c      	bne.n	8000bdc <HAL_TIM_Encoder_MspInit+0x50>
	    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
}
 8000bda:	e010      	b.n	8000bfe <HAL_TIM_Encoder_MspInit+0x72>
	else if ((htim_ENC->Instance == TIM3))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <HAL_TIM_Encoder_MspInit+0x88>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d10b      	bne.n	8000bfe <HAL_TIM_Encoder_MspInit+0x72>
	    __HAL_RCC_TIM3_CLK_ENABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
}
 8000bfe:	bf00      	nop
 8000c00:	371c      	adds	r7, #28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40012c00 	.word	0x40012c00
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40000400 	.word	0x40000400

08000c18 <TIMx_ENC_Start>:

void TIMx_ENC_Start(TIM_ENC_Typedef config)
{
 8000c18:	b084      	sub	sp, #16
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	f107 0c08 	add.w	ip, r7, #8
 8000c22:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_handler.Instance = config.TIMx;
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <TIMx_ENC_Start+0x28>)
 8000c2a:	6013      	str	r3, [r2, #0]
	HAL_TIM_Encoder_Start(&TIM_handler, TIM_CHANNEL_ALL);
 8000c2c:	213c      	movs	r1, #60	; 0x3c
 8000c2e:	4804      	ldr	r0, [pc, #16]	; (8000c40 <TIMx_ENC_Start+0x28>)
 8000c30:	f001 ff56 	bl	8002ae0 <HAL_TIM_Encoder_Start>
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr
 8000c40:	20000db4 	.word	0x20000db4

08000c44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71fb      	strb	r3, [r7, #7]
#if (INSTRUCTION_CACHE_ENABLE == 0)
   __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_Init+0x3c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <HAL_Init+0x3c>)
 8000c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c58:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f000 f8dd 	bl	8000e1a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c60:	2000      	movs	r0, #0
 8000c62:	f005 f907 	bl	8005e74 <HAL_InitTick>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	e001      	b.n	8000c76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c72:	f005 f895 	bl	8005da0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40022000 	.word	0x40022000

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a03      	ldr	r2, [pc, #12]	; (8000ca0 <HAL_IncTick+0x1c>)
 8000c94:	6013      	str	r3, [r2, #0]
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000dfc 	.word	0x20000dfc
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000dfc 	.word	0x20000dfc

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff4c 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e42:	f7ff ff61 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	6978      	ldr	r0, [r7, #20]
 8000e4e:	f7ff ffb1 	bl	8000db4 <NVIC_EncodePriority>
 8000e52:	4602      	mov	r2, r0
 8000e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff80 	bl	8000d60 <__NVIC_SetPriority>
}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff54 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e92:	e17f      	b.n	8001194 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 8171 	beq.w	800118e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x38>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b12      	cmp	r3, #18
 8000eba:	d123      	bne.n	8000f04 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	6939      	ldr	r1, [r7, #16]
 8000f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0203 	and.w	r2, r3, #3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d00b      	beq.n	8000f58 <HAL_GPIO_Init+0xd4>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d007      	beq.n	8000f58 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f4c:	2b11      	cmp	r3, #17
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b12      	cmp	r3, #18
 8000f56:	d130      	bne.n	8000fba <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	f003 0201 	and.w	r2, r3, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d118      	bne.n	8000ff8 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	08db      	lsrs	r3, r3, #3
 8000fe2:	f003 0201 	and.w	r2, r3, #1
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 80ac 	beq.w	800118e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b5e      	ldr	r3, [pc, #376]	; (80011b0 <HAL_GPIO_Init+0x32c>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	4a5d      	ldr	r2, [pc, #372]	; (80011b0 <HAL_GPIO_Init+0x32c>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6613      	str	r3, [r2, #96]	; 0x60
 8001042:	4b5b      	ldr	r3, [pc, #364]	; (80011b0 <HAL_GPIO_Init+0x32c>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800104e:	4a59      	ldr	r2, [pc, #356]	; (80011b4 <HAL_GPIO_Init+0x330>)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001078:	d025      	beq.n	80010c6 <HAL_GPIO_Init+0x242>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4e      	ldr	r2, [pc, #312]	; (80011b8 <HAL_GPIO_Init+0x334>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d01f      	beq.n	80010c2 <HAL_GPIO_Init+0x23e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4d      	ldr	r2, [pc, #308]	; (80011bc <HAL_GPIO_Init+0x338>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d019      	beq.n	80010be <HAL_GPIO_Init+0x23a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <HAL_GPIO_Init+0x33c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x236>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4b      	ldr	r2, [pc, #300]	; (80011c4 <HAL_GPIO_Init+0x340>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x232>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4a      	ldr	r2, [pc, #296]	; (80011c8 <HAL_GPIO_Init+0x344>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x22e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a49      	ldr	r2, [pc, #292]	; (80011cc <HAL_GPIO_Init+0x348>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x22a>
 80010aa:	2306      	movs	r3, #6
 80010ac:	e00c      	b.n	80010c8 <HAL_GPIO_Init+0x244>
 80010ae:	2307      	movs	r3, #7
 80010b0:	e00a      	b.n	80010c8 <HAL_GPIO_Init+0x244>
 80010b2:	2305      	movs	r3, #5
 80010b4:	e008      	b.n	80010c8 <HAL_GPIO_Init+0x244>
 80010b6:	2304      	movs	r3, #4
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x244>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x244>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x244>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x244>
 80010c6:	2300      	movs	r3, #0
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	f002 0203 	and.w	r2, r2, #3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4093      	lsls	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010d8:	4936      	ldr	r1, [pc, #216]	; (80011b4 <HAL_GPIO_Init+0x330>)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010e6:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <HAL_GPIO_Init+0x34c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800110a:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <HAL_GPIO_Init+0x34c>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001110:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <HAL_GPIO_Init+0x34c>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001134:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <HAL_GPIO_Init+0x34c>)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <HAL_GPIO_Init+0x34c>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800115e:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <HAL_GPIO_Init+0x34c>)
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_GPIO_Init+0x34c>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001188:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <HAL_GPIO_Init+0x34c>)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa22 f303 	lsr.w	r3, r2, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f47f ae78 	bne.w	8000e94 <HAL_GPIO_Init+0x10>
  }
}
 80011a4:	bf00      	nop
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010000 	.word	0x40010000
 80011b8:	48000400 	.word	0x48000400
 80011bc:	48000800 	.word	0x48000800
 80011c0:	48000c00 	.word	0x48000c00
 80011c4:	48001000 	.word	0x48001000
 80011c8:	48001400 	.word	0x48001400
 80011cc:	48001800 	.word	0x48001800
 80011d0:	40010400 	.word	0x40010400

080011d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <HAL_PWREx_GetVoltageRange+0x18>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40007000 	.word	0x40007000

080011f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fe:	d130      	bne.n	8001262 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800120c:	d038      	beq.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001218:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2232      	movs	r2, #50	; 0x32
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	0c9b      	lsrs	r3, r3, #18
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001234:	e002      	b.n	800123c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3b01      	subs	r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001248:	d102      	bne.n	8001250 <HAL_PWREx_ControlVoltageScaling+0x60>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f2      	bne.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125c:	d110      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e00f      	b.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800126a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126e:	d007      	beq.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001278:	4a05      	ldr	r2, [pc, #20]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40007000 	.word	0x40007000
 8001294:	2000000c 	.word	0x2000000c
 8001298:	431bde83 	.word	0x431bde83

0800129c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e39d      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ae:	4ba4      	ldr	r3, [pc, #656]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012b8:	4ba1      	ldr	r3, [pc, #644]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 80e1 	beq.w	8001492 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <HAL_RCC_OscConfig+0x4a>
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	f040 8088 	bne.w	80013ee <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	f040 8084 	bne.w	80013ee <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e6:	4b96      	ldr	r3, [pc, #600]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d005      	beq.n	80012fe <HAL_RCC_OscConfig+0x62>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e375      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1a      	ldr	r2, [r3, #32]
 8001302:	4b8f      	ldr	r3, [pc, #572]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d004      	beq.n	8001318 <HAL_RCC_OscConfig+0x7c>
 800130e:	4b8c      	ldr	r3, [pc, #560]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001316:	e005      	b.n	8001324 <HAL_RCC_OscConfig+0x88>
 8001318:	4b89      	ldr	r3, [pc, #548]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 800131a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001324:	4293      	cmp	r3, r2
 8001326:	d223      	bcs.n	8001370 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fd3b 	bl	8001da8 <RCC_SetFlashLatencyFromMSIRange>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e356      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133c:	4b80      	ldr	r3, [pc, #512]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a7f      	ldr	r2, [pc, #508]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b7d      	ldr	r3, [pc, #500]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	497a      	ldr	r1, [pc, #488]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800135a:	4b79      	ldr	r3, [pc, #484]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	4975      	ldr	r1, [pc, #468]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 800136a:	4313      	orrs	r3, r2
 800136c:	604b      	str	r3, [r1, #4]
 800136e:	e022      	b.n	80013b6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001370:	4b73      	ldr	r3, [pc, #460]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a72      	ldr	r2, [pc, #456]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001376:	f043 0308 	orr.w	r3, r3, #8
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b70      	ldr	r3, [pc, #448]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	496d      	ldr	r1, [pc, #436]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800138e:	4b6c      	ldr	r3, [pc, #432]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	4968      	ldr	r1, [pc, #416]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fcfe 	bl	8001da8 <RCC_SetFlashLatencyFromMSIRange>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e319      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013b6:	f000 fc03 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 80013ba:	4601      	mov	r1, r0
 80013bc:	4b60      	ldr	r3, [pc, #384]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	4a5f      	ldr	r2, [pc, #380]	; (8001544 <HAL_RCC_OscConfig+0x2a8>)
 80013c8:	5cd3      	ldrb	r3, [r2, r3]
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	fa21 f303 	lsr.w	r3, r1, r3
 80013d2:	4a5d      	ldr	r2, [pc, #372]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013d6:	4b5d      	ldr	r3, [pc, #372]	; (800154c <HAL_RCC_OscConfig+0x2b0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f004 fd4a 	bl	8005e74 <HAL_InitTick>
 80013e0:	4603      	mov	r3, r0
 80013e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d052      	beq.n	8001490 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	e2fd      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d032      	beq.n	800145c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013f6:	4b52      	ldr	r3, [pc, #328]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a51      	ldr	r2, [pc, #324]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001402:	f7ff fc51 	bl	8000ca8 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800140a:	f7ff fc4d 	bl	8000ca8 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e2e6      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800141c:	4b48      	ldr	r3, [pc, #288]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001428:	4b45      	ldr	r3, [pc, #276]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a44      	ldr	r2, [pc, #272]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b42      	ldr	r3, [pc, #264]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	493f      	ldr	r1, [pc, #252]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001446:	4b3e      	ldr	r3, [pc, #248]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	493a      	ldr	r1, [pc, #232]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
 800145a:	e01a      	b.n	8001492 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800145c:	4b38      	ldr	r3, [pc, #224]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a37      	ldr	r2, [pc, #220]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001468:	f7ff fc1e 	bl	8000ca8 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001470:	f7ff fc1a 	bl	8000ca8 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e2b3      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001482:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x1d4>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d074      	beq.n	8001588 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_OscConfig+0x214>
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2b0c      	cmp	r3, #12
 80014a8:	d10e      	bne.n	80014c8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d10b      	bne.n	80014c8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	4b23      	ldr	r3, [pc, #140]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d064      	beq.n	8001586 <HAL_RCC_OscConfig+0x2ea>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d160      	bne.n	8001586 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e290      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d0:	d106      	bne.n	80014e0 <HAL_RCC_OscConfig+0x244>
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1a      	ldr	r2, [pc, #104]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e01d      	b.n	800151c <HAL_RCC_OscConfig+0x280>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e8:	d10c      	bne.n	8001504 <HAL_RCC_OscConfig+0x268>
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a14      	ldr	r2, [pc, #80]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 80014f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a11      	ldr	r2, [pc, #68]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e00b      	b.n	800151c <HAL_RCC_OscConfig+0x280>
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 800150a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_RCC_OscConfig+0x2a4>)
 8001516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d01c      	beq.n	800155e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fbc0 	bl	8000ca8 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800152a:	e011      	b.n	8001550 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800152c:	f7ff fbbc 	bl	8000ca8 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b64      	cmp	r3, #100	; 0x64
 8001538:	d90a      	bls.n	8001550 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e255      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	0800699c 	.word	0x0800699c
 8001548:	2000000c 	.word	0x2000000c
 800154c:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001550:	4bae      	ldr	r3, [pc, #696]	; (800180c <HAL_RCC_OscConfig+0x570>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0e7      	beq.n	800152c <HAL_RCC_OscConfig+0x290>
 800155c:	e014      	b.n	8001588 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff fba3 	bl	8000ca8 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001566:	f7ff fb9f 	bl	8000ca8 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b64      	cmp	r3, #100	; 0x64
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e238      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001578:	4ba4      	ldr	r3, [pc, #656]	; (800180c <HAL_RCC_OscConfig+0x570>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f0      	bne.n	8001566 <HAL_RCC_OscConfig+0x2ca>
 8001584:	e000      	b.n	8001588 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001586:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d060      	beq.n	8001656 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b04      	cmp	r3, #4
 8001598:	d005      	beq.n	80015a6 <HAL_RCC_OscConfig+0x30a>
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b0c      	cmp	r3, #12
 800159e:	d119      	bne.n	80015d4 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d116      	bne.n	80015d4 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a6:	4b99      	ldr	r3, [pc, #612]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <HAL_RCC_OscConfig+0x322>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e215      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015be:	4b93      	ldr	r3, [pc, #588]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	061b      	lsls	r3, r3, #24
 80015cc:	498f      	ldr	r1, [pc, #572]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d2:	e040      	b.n	8001656 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d023      	beq.n	8001624 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015dc:	4b8b      	ldr	r3, [pc, #556]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a8a      	ldr	r2, [pc, #552]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80015e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fb5e 	bl	8000ca8 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fb5a 	bl	8000ca8 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1f3      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001602:	4b82      	ldr	r3, [pc, #520]	; (800180c <HAL_RCC_OscConfig+0x570>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160e:	4b7f      	ldr	r3, [pc, #508]	; (800180c <HAL_RCC_OscConfig+0x570>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	061b      	lsls	r3, r3, #24
 800161c:	497b      	ldr	r1, [pc, #492]	; (800180c <HAL_RCC_OscConfig+0x570>)
 800161e:	4313      	orrs	r3, r2
 8001620:	604b      	str	r3, [r1, #4]
 8001622:	e018      	b.n	8001656 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001624:	4b79      	ldr	r3, [pc, #484]	; (800180c <HAL_RCC_OscConfig+0x570>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a78      	ldr	r2, [pc, #480]	; (800180c <HAL_RCC_OscConfig+0x570>)
 800162a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800162e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fb3a 	bl	8000ca8 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff fb36 	bl	8000ca8 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e1cf      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800164a:	4b70      	ldr	r3, [pc, #448]	; (800180c <HAL_RCC_OscConfig+0x570>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d03c      	beq.n	80016dc <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d01c      	beq.n	80016a4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166a:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_RCC_OscConfig+0x570>)
 800166c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001670:	4a66      	ldr	r2, [pc, #408]	; (800180c <HAL_RCC_OscConfig+0x570>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167a:	f7ff fb15 	bl	8000ca8 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001682:	f7ff fb11 	bl	8000ca8 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e1aa      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001694:	4b5d      	ldr	r3, [pc, #372]	; (800180c <HAL_RCC_OscConfig+0x570>)
 8001696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0ef      	beq.n	8001682 <HAL_RCC_OscConfig+0x3e6>
 80016a2:	e01b      	b.n	80016dc <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80016a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016aa:	4a58      	ldr	r2, [pc, #352]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff faf8 	bl	8000ca8 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016bc:	f7ff faf4 	bl	8000ca8 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e18d      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ce:	4b4f      	ldr	r3, [pc, #316]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80016d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ef      	bne.n	80016bc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80a5 	beq.w	8001834 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10d      	bne.n	8001716 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	4b44      	ldr	r3, [pc, #272]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	4a43      	ldr	r2, [pc, #268]	; (800180c <HAL_RCC_OscConfig+0x570>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001704:	6593      	str	r3, [r2, #88]	; 0x58
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_OscConfig+0x570>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001712:	2301      	movs	r3, #1
 8001714:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001716:	4b3e      	ldr	r3, [pc, #248]	; (8001810 <HAL_RCC_OscConfig+0x574>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d118      	bne.n	8001754 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001722:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <HAL_RCC_OscConfig+0x574>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a3a      	ldr	r2, [pc, #232]	; (8001810 <HAL_RCC_OscConfig+0x574>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172e:	f7ff fabb 	bl	8000ca8 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001736:	f7ff fab7 	bl	8000ca8 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e150      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001748:	4b31      	ldr	r3, [pc, #196]	; (8001810 <HAL_RCC_OscConfig+0x574>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d108      	bne.n	800176e <HAL_RCC_OscConfig+0x4d2>
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_RCC_OscConfig+0x570>)
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001762:	4a2a      	ldr	r2, [pc, #168]	; (800180c <HAL_RCC_OscConfig+0x570>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800176c:	e024      	b.n	80017b8 <HAL_RCC_OscConfig+0x51c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b05      	cmp	r3, #5
 8001774:	d110      	bne.n	8001798 <HAL_RCC_OscConfig+0x4fc>
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <HAL_RCC_OscConfig+0x570>)
 8001778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177c:	4a23      	ldr	r2, [pc, #140]	; (800180c <HAL_RCC_OscConfig+0x570>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <HAL_RCC_OscConfig+0x570>)
 8001788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178c:	4a1f      	ldr	r2, [pc, #124]	; (800180c <HAL_RCC_OscConfig+0x570>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001796:	e00f      	b.n	80017b8 <HAL_RCC_OscConfig+0x51c>
 8001798:	4b1c      	ldr	r3, [pc, #112]	; (800180c <HAL_RCC_OscConfig+0x570>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	4a1b      	ldr	r2, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80017b0:	f023 0304 	bic.w	r3, r3, #4
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d016      	beq.n	80017ee <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff fa72 	bl	8000ca8 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c6:	e00a      	b.n	80017de <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c8:	f7ff fa6e 	bl	8000ca8 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e105      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_OscConfig+0x570>)
 80017e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0ed      	beq.n	80017c8 <HAL_RCC_OscConfig+0x52c>
 80017ec:	e019      	b.n	8001822 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ee:	f7ff fa5b 	bl	8000ca8 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f4:	e00e      	b.n	8001814 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f6:	f7ff fa57 	bl	8000ca8 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	f241 3288 	movw	r2, #5000	; 0x1388
 8001804:	4293      	cmp	r3, r2
 8001806:	d905      	bls.n	8001814 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e0ee      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
 800180c:	40021000 	.word	0x40021000
 8001810:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001814:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1e9      	bne.n	80017f6 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001822:	7ffb      	ldrb	r3, [r7, #31]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001828:	4b72      	ldr	r3, [pc, #456]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	4a71      	ldr	r2, [pc, #452]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 800182e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001832:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80d5 	beq.w	80019e8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b0c      	cmp	r3, #12
 8001842:	f000 808e 	beq.w	8001962 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	2b02      	cmp	r3, #2
 800184c:	d15b      	bne.n	8001906 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b69      	ldr	r3, [pc, #420]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a68      	ldr	r2, [pc, #416]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 8001854:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff fa25 	bl	8000ca8 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001862:	f7ff fa21 	bl	8000ca8 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e0ba      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001874:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001880:	4b5c      	ldr	r3, [pc, #368]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	4b5c      	ldr	r3, [pc, #368]	; (80019f8 <HAL_RCC_OscConfig+0x75c>)
 8001886:	4013      	ands	r3, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001890:	3a01      	subs	r2, #1
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	4311      	orrs	r1, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800189a:	0212      	lsls	r2, r2, #8
 800189c:	4311      	orrs	r1, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018a2:	0852      	lsrs	r2, r2, #1
 80018a4:	3a01      	subs	r2, #1
 80018a6:	0552      	lsls	r2, r2, #21
 80018a8:	4311      	orrs	r1, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018ae:	0852      	lsrs	r2, r2, #1
 80018b0:	3a01      	subs	r2, #1
 80018b2:	0652      	lsls	r2, r2, #25
 80018b4:	4311      	orrs	r1, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ba:	0912      	lsrs	r2, r2, #4
 80018bc:	0452      	lsls	r2, r2, #17
 80018be:	430a      	orrs	r2, r1
 80018c0:	494c      	ldr	r1, [pc, #304]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c6:	4b4b      	ldr	r3, [pc, #300]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a4a      	ldr	r2, [pc, #296]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 80018cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d0:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d2:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	4a47      	ldr	r2, [pc, #284]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 80018d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018dc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff f9e3 	bl	8000ca8 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e6:	f7ff f9df 	bl	8000ca8 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e078      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f8:	4b3e      	ldr	r3, [pc, #248]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x64a>
 8001904:	e070      	b.n	80019e8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001906:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a3a      	ldr	r2, [pc, #232]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 800190c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001910:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001912:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d105      	bne.n	800192a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800191e:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	4a34      	ldr	r2, [pc, #208]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 8001924:	f023 0303 	bic.w	r3, r3, #3
 8001928:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800192a:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	4a31      	ldr	r2, [pc, #196]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 8001930:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001938:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff f9b5 	bl	8000ca8 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff f9b1 	bl	8000ca8 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e04a      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x6a6>
 8001960:	e042      	b.n	80019e8 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e03d      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <HAL_RCC_OscConfig+0x758>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0203 	and.w	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	429a      	cmp	r2, r3
 8001980:	d130      	bne.n	80019e4 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	3b01      	subs	r3, #1
 800198e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d127      	bne.n	80019e4 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d11f      	bne.n	80019e4 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019ae:	2a07      	cmp	r2, #7
 80019b0:	bf14      	ite	ne
 80019b2:	2201      	movne	r2, #1
 80019b4:	2200      	moveq	r2, #0
 80019b6:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d113      	bne.n	80019e4 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c6:	085b      	lsrs	r3, r3, #1
 80019c8:	3b01      	subs	r3, #1
 80019ca:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d109      	bne.n	80019e4 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	085b      	lsrs	r3, r3, #1
 80019dc:	3b01      	subs	r3, #1
 80019de:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	f99d808c 	.word	0xf99d808c

080019fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0c8      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b66      	ldr	r3, [pc, #408]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d910      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b63      	ldr	r3, [pc, #396]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 0207 	bic.w	r2, r3, #7
 8001a26:	4961      	ldr	r1, [pc, #388]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0b0      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d04c      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a54:	4b56      	ldr	r3, [pc, #344]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d121      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e09e      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6c:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d115      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e092      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a84:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e086      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a94:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e07e      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aa4:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 0203 	bic.w	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	493f      	ldr	r1, [pc, #252]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ab6:	f7ff f8f7 	bl	8000ca8 <HAL_GetTick>
 8001aba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abe:	f7ff f8f3 	bl	8000ca8 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e066      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 020c 	and.w	r2, r3, #12
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d1eb      	bne.n	8001abe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d008      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af2:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	492c      	ldr	r1, [pc, #176]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d210      	bcs.n	8001b34 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 0207 	bic.w	r2, r3, #7
 8001b1a:	4924      	ldr	r1, [pc, #144]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e036      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4918      	ldr	r1, [pc, #96]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4910      	ldr	r1, [pc, #64]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b72:	f000 f825 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001b76:	4601      	mov	r1, r0
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f004 f96c 	bl	8005e74 <HAL_InitTick>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	0800699c 	.word	0x0800699c
 8001bb8:	2000000c 	.word	0x2000000c
 8001bbc:	20000000 	.word	0x20000000

08001bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bce:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d121      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d11e      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bf4:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e005      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c10:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c1c:	4a2a      	ldr	r2, [pc, #168]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10d      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d102      	bne.n	8001c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c38:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	e004      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d133      	bne.n	8001cb6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d002      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0xa4>
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0xaa>
 8001c62:	e005      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c66:	617b      	str	r3, [r7, #20]
      break;
 8001c68:	e005      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c6c:	617b      	str	r3, [r7, #20]
      break;
 8001c6e:	e002      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	617b      	str	r3, [r7, #20]
      break;
 8001c74:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	3301      	adds	r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	fb02 f203 	mul.w	r2, r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0e5b      	lsrs	r3, r3, #25
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cb6:	69bb      	ldr	r3, [r7, #24]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3724      	adds	r7, #36	; 0x24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	080069b4 	.word	0x080069b4
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	007a1200 	.word	0x007a1200

08001cd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	2000000c 	.word	0x2000000c

08001cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cf0:	f7ff fff0 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001cf4:	4601      	mov	r1, r0
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	080069ac 	.word	0x080069ac

08001d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d1c:	f7ff ffda 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001d20:	4601      	mov	r1, r0
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0adb      	lsrs	r3, r3, #11
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	080069ac 	.word	0x080069ac

08001d44 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	220f      	movs	r2, #15
 8001d52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 0203 	and.w	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_RCC_GetClockConfig+0x60>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0207 	and.w	r2, r3, #7
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	601a      	str	r2, [r3, #0]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40022000 	.word	0x40022000

08001da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001db4:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dc0:	f7ff fa08 	bl	80011d4 <HAL_PWREx_GetVoltageRange>
 8001dc4:	6178      	str	r0, [r7, #20]
 8001dc6:	e014      	b.n	8001df2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001de0:	f7ff f9f8 	bl	80011d4 <HAL_PWREx_GetVoltageRange>
 8001de4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df8:	d10b      	bne.n	8001e12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b80      	cmp	r3, #128	; 0x80
 8001dfe:	d919      	bls.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2ba0      	cmp	r3, #160	; 0xa0
 8001e04:	d902      	bls.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e06:	2302      	movs	r3, #2
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	e013      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	e010      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b80      	cmp	r3, #128	; 0x80
 8001e16:	d902      	bls.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e18:	2303      	movs	r3, #3
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	e00a      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b80      	cmp	r3, #128	; 0x80
 8001e22:	d102      	bne.n	8001e2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e24:	2302      	movs	r3, #2
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	e004      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b70      	cmp	r3, #112	; 0x70
 8001e2e:	d101      	bne.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e30:	2301      	movs	r3, #1
 8001e32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 0207 	bic.w	r2, r3, #7
 8001e3c:	4909      	ldr	r1, [pc, #36]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e70:	2300      	movs	r3, #0
 8001e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e74:	2300      	movs	r3, #0
 8001e76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d03f      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e8c:	d01c      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e92:	d802      	bhi.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00e      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001e98:	e01f      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001e9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e9e:	d003      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001ea0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ea4:	d01c      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001ea6:	e018      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ea8:	4b85      	ldr	r3, [pc, #532]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4a84      	ldr	r2, [pc, #528]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fab9 	bl	8002434 <RCCEx_PLLSAI1_Config>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ec6:	e00c      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3320      	adds	r3, #32
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fba0 	bl	8002614 <RCCEx_PLLSAI2_Config>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ed8:	e003      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	74fb      	strb	r3, [r7, #19]
      break;
 8001ede:	e000      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ee2:	7cfb      	ldrb	r3, [r7, #19]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10b      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ee8:	4b75      	ldr	r3, [pc, #468]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ef6:	4972      	ldr	r1, [pc, #456]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001efe:	e001      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d03f      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f18:	d01c      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001f1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f1e:	d802      	bhi.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00e      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001f24:	e01f      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001f26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f2a:	d003      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001f2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f30:	d01c      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001f32:	e018      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f34:	4b62      	ldr	r3, [pc, #392]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a61      	ldr	r2, [pc, #388]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f40:	e015      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 fa73 	bl	8002434 <RCCEx_PLLSAI1_Config>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f52:	e00c      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3320      	adds	r3, #32
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fb5a 	bl	8002614 <RCCEx_PLLSAI2_Config>
 8001f60:	4603      	mov	r3, r0
 8001f62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f64:	e003      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	74fb      	strb	r3, [r7, #19]
      break;
 8001f6a:	e000      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f6e:	7cfb      	ldrb	r3, [r7, #19]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10b      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f74:	4b52      	ldr	r3, [pc, #328]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f82:	494f      	ldr	r1, [pc, #316]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f8a:	e001      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f8c:	7cfb      	ldrb	r3, [r7, #19]
 8001f8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80a0 	beq.w	80020de <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fa2:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	4a40      	ldr	r2, [pc, #256]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a3a      	ldr	r2, [pc, #232]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fe0:	f7fe fe62 	bl	8000ca8 <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fe6:	e009      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe8:	f7fe fe5e 	bl	8000ca8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d902      	bls.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	74fb      	strb	r3, [r7, #19]
        break;
 8001ffa:	e005      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ef      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d15c      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002018:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01f      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	429a      	cmp	r2, r3
 800202a:	d019      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002036:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	4a20      	ldr	r2, [pc, #128]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002048:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d016      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7fe fe1d 	bl	8000ca8 <HAL_GetTick>
 800206e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002070:	e00b      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7fe fe19 	bl	8000ca8 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d902      	bls.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	74fb      	strb	r3, [r7, #19]
            break;
 8002088:	e006      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208a:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ec      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10c      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ae:	4904      	ldr	r1, [pc, #16]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020b6:	e009      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	74bb      	strb	r3, [r7, #18]
 80020bc:	e006      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020cc:	7c7b      	ldrb	r3, [r7, #17]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d105      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d2:	4b9e      	ldr	r3, [pc, #632]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	4a9d      	ldr	r2, [pc, #628]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ea:	4b98      	ldr	r3, [pc, #608]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f0:	f023 0203 	bic.w	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f8:	4994      	ldr	r1, [pc, #592]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800210c:	4b8f      	ldr	r3, [pc, #572]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	f023 020c 	bic.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211a:	498c      	ldr	r1, [pc, #560]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800212e:	4b87      	ldr	r3, [pc, #540]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002134:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	4983      	ldr	r1, [pc, #524]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002150:	4b7e      	ldr	r3, [pc, #504]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	497b      	ldr	r1, [pc, #492]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002172:	4b76      	ldr	r3, [pc, #472]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002180:	4972      	ldr	r1, [pc, #456]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002194:	4b6d      	ldr	r3, [pc, #436]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	496a      	ldr	r1, [pc, #424]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021b6:	4b65      	ldr	r3, [pc, #404]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	4961      	ldr	r1, [pc, #388]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021d8:	4b5c      	ldr	r3, [pc, #368]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e6:	4959      	ldr	r1, [pc, #356]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021fa:	4b54      	ldr	r3, [pc, #336]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002200:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002208:	4950      	ldr	r1, [pc, #320]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800221c:	4b4b      	ldr	r3, [pc, #300]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	4948      	ldr	r1, [pc, #288]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800223e:	4b43      	ldr	r3, [pc, #268]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224c:	493f      	ldr	r1, [pc, #252]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d028      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002260:	4b3a      	ldr	r3, [pc, #232]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800226e:	4937      	ldr	r1, [pc, #220]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800227a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800227e:	d106      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002280:	4b32      	ldr	r3, [pc, #200]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a31      	ldr	r2, [pc, #196]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800228a:	60d3      	str	r3, [r2, #12]
 800228c:	e011      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002296:	d10c      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3304      	adds	r3, #4
 800229c:	2101      	movs	r1, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f8c8 	bl	8002434 <RCCEx_PLLSAI1_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d028      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022be:	4b23      	ldr	r3, [pc, #140]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	491f      	ldr	r1, [pc, #124]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022dc:	d106      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4a1a      	ldr	r2, [pc, #104]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e8:	60d3      	str	r3, [r2, #12]
 80022ea:	e011      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2101      	movs	r1, #1
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 f899 	bl	8002434 <RCCEx_PLLSAI1_Config>
 8002302:	4603      	mov	r3, r0
 8002304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d02b      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232a:	4908      	ldr	r1, [pc, #32]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800233a:	d109      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a02      	ldr	r2, [pc, #8]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002346:	60d3      	str	r3, [r2, #12]
 8002348:	e014      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002354:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002358:	d10c      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3304      	adds	r3, #4
 800235e:	2101      	movs	r1, #1
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f867 	bl	8002434 <RCCEx_PLLSAI1_Config>
 8002366:	4603      	mov	r3, r0
 8002368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d02f      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002380:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800238e:	4928      	ldr	r1, [pc, #160]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800239a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800239e:	d10d      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	2102      	movs	r1, #2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f844 	bl	8002434 <RCCEx_PLLSAI1_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d014      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	74bb      	strb	r3, [r7, #18]
 80023ba:	e011      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3320      	adds	r3, #32
 80023ca:	2102      	movs	r1, #2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f921 	bl	8002614 <RCCEx_PLLSAI2_Config>
 80023d2:	4603      	mov	r3, r0
 80023d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023fa:	490d      	ldr	r1, [pc, #52]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002414:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800241e:	4904      	ldr	r1, [pc, #16]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002426:	7cbb      	ldrb	r3, [r7, #18]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000

08002434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002442:	4b73      	ldr	r3, [pc, #460]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d018      	beq.n	8002480 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800244e:	4b70      	ldr	r3, [pc, #448]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0203 	and.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d10d      	bne.n	800247a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
       ||
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002466:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
       ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d044      	beq.n	8002504 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	e041      	b.n	8002504 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d00c      	beq.n	80024a2 <RCCEx_PLLSAI1_Config+0x6e>
 8002488:	2b03      	cmp	r3, #3
 800248a:	d013      	beq.n	80024b4 <RCCEx_PLLSAI1_Config+0x80>
 800248c:	2b01      	cmp	r3, #1
 800248e:	d120      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002490:	4b5f      	ldr	r3, [pc, #380]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d11d      	bne.n	80024d8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a0:	e01a      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024a2:	4b5b      	ldr	r3, [pc, #364]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d116      	bne.n	80024dc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b2:	e013      	b.n	80024dc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024b4:	4b56      	ldr	r3, [pc, #344]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10f      	bne.n	80024e0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024c0:	4b53      	ldr	r3, [pc, #332]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024d0:	e006      	b.n	80024e0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
      break;
 80024d6:	e004      	b.n	80024e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024d8:	bf00      	nop
 80024da:	e002      	b.n	80024e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024dc:	bf00      	nop
 80024de:	e000      	b.n	80024e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10d      	bne.n	8002504 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024e8:	4b49      	ldr	r3, [pc, #292]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	430b      	orrs	r3, r1
 80024fe:	4944      	ldr	r1, [pc, #272]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002500:	4313      	orrs	r3, r2
 8002502:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d17d      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a40      	ldr	r2, [pc, #256]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002510:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002516:	f7fe fbc7 	bl	8000ca8 <HAL_GetTick>
 800251a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800251c:	e009      	b.n	8002532 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800251e:	f7fe fbc3 	bl	8000ca8 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d902      	bls.n	8002532 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	73fb      	strb	r3, [r7, #15]
        break;
 8002530:	e005      	b.n	800253e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002532:	4b37      	ldr	r3, [pc, #220]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1ef      	bne.n	800251e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d160      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d111      	bne.n	800256e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6892      	ldr	r2, [r2, #8]
 800255a:	0211      	lsls	r1, r2, #8
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68d2      	ldr	r2, [r2, #12]
 8002560:	0912      	lsrs	r2, r2, #4
 8002562:	0452      	lsls	r2, r2, #17
 8002564:	430a      	orrs	r2, r1
 8002566:	492a      	ldr	r1, [pc, #168]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002568:	4313      	orrs	r3, r2
 800256a:	610b      	str	r3, [r1, #16]
 800256c:	e027      	b.n	80025be <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d112      	bne.n	800259a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800257c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6892      	ldr	r2, [r2, #8]
 8002584:	0211      	lsls	r1, r2, #8
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6912      	ldr	r2, [r2, #16]
 800258a:	0852      	lsrs	r2, r2, #1
 800258c:	3a01      	subs	r2, #1
 800258e:	0552      	lsls	r2, r2, #21
 8002590:	430a      	orrs	r2, r1
 8002592:	491f      	ldr	r1, [pc, #124]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002594:	4313      	orrs	r3, r2
 8002596:	610b      	str	r3, [r1, #16]
 8002598:	e011      	b.n	80025be <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	0211      	lsls	r1, r2, #8
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6952      	ldr	r2, [r2, #20]
 80025b0:	0852      	lsrs	r2, r2, #1
 80025b2:	3a01      	subs	r2, #1
 80025b4:	0652      	lsls	r2, r2, #25
 80025b6:	430a      	orrs	r2, r1
 80025b8:	4915      	ldr	r1, [pc, #84]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a13      	ldr	r2, [pc, #76]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7fe fb6d 	bl	8000ca8 <HAL_GetTick>
 80025ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025d0:	e009      	b.n	80025e6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025d2:	f7fe fb69 	bl	8000ca8 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d902      	bls.n	80025e6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	73fb      	strb	r3, [r7, #15]
          break;
 80025e4:	e005      	b.n	80025f2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0ef      	beq.n	80025d2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4903      	ldr	r1, [pc, #12]	; (8002610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000

08002614 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002622:	4b68      	ldr	r3, [pc, #416]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d018      	beq.n	8002660 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800262e:	4b65      	ldr	r3, [pc, #404]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0203 	and.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d10d      	bne.n	800265a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
       ||
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002646:	4b5f      	ldr	r3, [pc, #380]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
       ||
 8002656:	429a      	cmp	r2, r3
 8002658:	d044      	beq.n	80026e4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	e041      	b.n	80026e4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d00c      	beq.n	8002682 <RCCEx_PLLSAI2_Config+0x6e>
 8002668:	2b03      	cmp	r3, #3
 800266a:	d013      	beq.n	8002694 <RCCEx_PLLSAI2_Config+0x80>
 800266c:	2b01      	cmp	r3, #1
 800266e:	d120      	bne.n	80026b2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002670:	4b54      	ldr	r3, [pc, #336]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d11d      	bne.n	80026b8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002680:	e01a      	b.n	80026b8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002682:	4b50      	ldr	r3, [pc, #320]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268a:	2b00      	cmp	r3, #0
 800268c:	d116      	bne.n	80026bc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002692:	e013      	b.n	80026bc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002694:	4b4b      	ldr	r3, [pc, #300]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10f      	bne.n	80026c0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026a0:	4b48      	ldr	r3, [pc, #288]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d109      	bne.n	80026c0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026b0:	e006      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
      break;
 80026b6:	e004      	b.n	80026c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80026b8:	bf00      	nop
 80026ba:	e002      	b.n	80026c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80026bc:	bf00      	nop
 80026be:	e000      	b.n	80026c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80026c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10d      	bne.n	80026e4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026c8:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	3b01      	subs	r3, #1
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	430b      	orrs	r3, r1
 80026de:	4939      	ldr	r1, [pc, #228]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d167      	bne.n	80027ba <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026ea:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a35      	ldr	r2, [pc, #212]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f6:	f7fe fad7 	bl	8000ca8 <HAL_GetTick>
 80026fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026fc:	e009      	b.n	8002712 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026fe:	f7fe fad3 	bl	8000ca8 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d902      	bls.n	8002712 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	73fb      	strb	r3, [r7, #15]
        break;
 8002710:	e005      	b.n	800271e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002712:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ef      	bne.n	80026fe <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d14a      	bne.n	80027ba <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d111      	bne.n	800274e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800272a:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6892      	ldr	r2, [r2, #8]
 800273a:	0211      	lsls	r1, r2, #8
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	68d2      	ldr	r2, [r2, #12]
 8002740:	0912      	lsrs	r2, r2, #4
 8002742:	0452      	lsls	r2, r2, #17
 8002744:	430a      	orrs	r2, r1
 8002746:	491f      	ldr	r1, [pc, #124]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002748:	4313      	orrs	r3, r2
 800274a:	614b      	str	r3, [r1, #20]
 800274c:	e011      	b.n	8002772 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002756:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6892      	ldr	r2, [r2, #8]
 800275e:	0211      	lsls	r1, r2, #8
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6912      	ldr	r2, [r2, #16]
 8002764:	0852      	lsrs	r2, r2, #1
 8002766:	3a01      	subs	r2, #1
 8002768:	0652      	lsls	r2, r2, #25
 800276a:	430a      	orrs	r2, r1
 800276c:	4915      	ldr	r1, [pc, #84]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800276e:	4313      	orrs	r3, r2
 8002770:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7fe fa93 	bl	8000ca8 <HAL_GetTick>
 8002782:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002784:	e009      	b.n	800279a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002786:	f7fe fa8f 	bl	8000ca8 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d902      	bls.n	800279a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	73fb      	strb	r3, [r7, #15]
          break;
 8002798:	e005      	b.n	80027a6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ef      	beq.n	8002786 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d106      	bne.n	80027ba <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000

080027c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e01d      	b.n	8002816 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f815 	bl	800281e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3304      	adds	r3, #4
 8002804:	4619      	mov	r1, r3
 8002806:	4610      	mov	r0, r2
 8002808:	f000 fbbe 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_TIM_Base_Start_IT+0x50>)
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b06      	cmp	r3, #6
 800285c:	d00b      	beq.n	8002876 <HAL_TIM_Base_Start_IT+0x42>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002864:	d007      	beq.n	8002876 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	00010007 	.word	0x00010007

08002888 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e01d      	b.n	80028d6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fd fed8 	bl	8000664 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4610      	mov	r0, r2
 80028c8:	f000 fb5e 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	d841      	bhi.n	8002974 <HAL_TIM_IC_Start_IT+0x94>
 80028f0:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <HAL_TIM_IC_Start_IT+0x18>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	0800292d 	.word	0x0800292d
 80028fc:	08002975 	.word	0x08002975
 8002900:	08002975 	.word	0x08002975
 8002904:	08002975 	.word	0x08002975
 8002908:	0800293f 	.word	0x0800293f
 800290c:	08002975 	.word	0x08002975
 8002910:	08002975 	.word	0x08002975
 8002914:	08002975 	.word	0x08002975
 8002918:	08002951 	.word	0x08002951
 800291c:	08002975 	.word	0x08002975
 8002920:	08002975 	.word	0x08002975
 8002924:	08002975 	.word	0x08002975
 8002928:	08002963 	.word	0x08002963
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0202 	orr.w	r2, r2, #2
 800293a:	60da      	str	r2, [r3, #12]
      break;
 800293c:	e01b      	b.n	8002976 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0204 	orr.w	r2, r2, #4
 800294c:	60da      	str	r2, [r3, #12]
      break;
 800294e:	e012      	b.n	8002976 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0208 	orr.w	r2, r2, #8
 800295e:	60da      	str	r2, [r3, #12]
      break;
 8002960:	e009      	b.n	8002976 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0210 	orr.w	r2, r2, #16
 8002970:	60da      	str	r2, [r3, #12]
      break;
 8002972:	e000      	b.n	8002976 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002974:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2201      	movs	r2, #1
 800297c:	6839      	ldr	r1, [r7, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fcc0 	bl	8003304 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_TIM_IC_Start_IT+0xd8>)
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b06      	cmp	r3, #6
 8002994:	d00b      	beq.n	80029ae <HAL_TIM_IC_Start_IT+0xce>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299c:	d007      	beq.n	80029ae <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	00010007 	.word	0x00010007

080029bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e083      	b.n	8002ad8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d106      	bne.n	80029ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7fe f8d1 	bl	8000b8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002a00:	f023 0307 	bic.w	r3, r3, #7
 8002a04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4610      	mov	r0, r2
 8002a12:	f000 fab9 	bl	8002f88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3e:	f023 0303 	bic.w	r3, r3, #3
 8002a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a5c:	f023 030c 	bic.w	r3, r3, #12
 8002a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	011a      	lsls	r2, r3, #4
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	031b      	lsls	r3, r3, #12
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002aa2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_TIM_Encoder_Start+0x16>
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d008      	beq.n	8002b06 <HAL_TIM_Encoder_Start+0x26>
 8002af4:	e00f      	b.n	8002b16 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2201      	movs	r2, #1
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fc00 	bl	8003304 <TIM_CCxChannelCmd>
      break;
 8002b04:	e016      	b.n	8002b34 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	2104      	movs	r1, #4
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fbf8 	bl	8003304 <TIM_CCxChannelCmd>
      break;
 8002b14:	e00e      	b.n	8002b34 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fbf0 	bl	8003304 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	2104      	movs	r1, #4
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fbe9 	bl	8003304 <TIM_CCxChannelCmd>
      break;
 8002b32:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d122      	bne.n	8002baa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d11b      	bne.n	8002baa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f06f 0202 	mvn.w	r2, #2
 8002b7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7fd fdc1 	bl	8000718 <HAL_TIM_IC_CaptureCallback>
 8002b96:	e005      	b.n	8002ba4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f9d7 	bl	8002f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f9de 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d122      	bne.n	8002bfe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d11b      	bne.n	8002bfe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f06f 0204 	mvn.w	r2, #4
 8002bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fd fd97 	bl	8000718 <HAL_TIM_IC_CaptureCallback>
 8002bea:	e005      	b.n	8002bf8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f9ad 	bl	8002f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f9b4 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d122      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d11b      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 0208 	mvn.w	r2, #8
 8002c22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2204      	movs	r2, #4
 8002c28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fd fd6d 	bl	8000718 <HAL_TIM_IC_CaptureCallback>
 8002c3e:	e005      	b.n	8002c4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f983 	bl	8002f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f98a 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b10      	cmp	r3, #16
 8002c5e:	d122      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d11b      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f06f 0210 	mvn.w	r2, #16
 8002c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7fd fd43 	bl	8000718 <HAL_TIM_IC_CaptureCallback>
 8002c92:	e005      	b.n	8002ca0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f959 	bl	8002f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f960 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10e      	bne.n	8002cd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f06f 0201 	mvn.w	r2, #1
 8002cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f003 f851 	bl	8005d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	2b80      	cmp	r3, #128	; 0x80
 8002cde:	d10e      	bne.n	8002cfe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cea:	2b80      	cmp	r3, #128	; 0x80
 8002cec:	d107      	bne.n	8002cfe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fb8f 	bl	800341c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d18:	2b80      	cmp	r3, #128	; 0x80
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fb82 	bl	8003430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d10e      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d107      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f90e 	bl	8002f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	d10e      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d107      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0220 	mvn.w	r2, #32
 8002d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fb42 	bl	8003408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e08a      	b.n	8002ebc <HAL_TIM_IC_ConfigChannel+0x130>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2202      	movs	r2, #2
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11b      	bne.n	8002df4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f000 f976 	bl	80030bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 020c 	bic.w	r2, r2, #12
 8002dde:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6999      	ldr	r1, [r3, #24]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	619a      	str	r2, [r3, #24]
 8002df2:	e05a      	b.n	8002eaa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d11c      	bne.n	8002e34 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f000 f9c5 	bl	8003198 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6999      	ldr	r1, [r3, #24]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	021a      	lsls	r2, r3, #8
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	619a      	str	r2, [r3, #24]
 8002e32:	e03a      	b.n	8002eaa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d11b      	bne.n	8002e72 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	6819      	ldr	r1, [r3, #0]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f000 f9e2 	bl	8003212 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 020c 	bic.w	r2, r2, #12
 8002e5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69d9      	ldr	r1, [r3, #28]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	61da      	str	r2, [r3, #28]
 8002e70:	e01b      	b.n	8002eaa <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f000 fa02 	bl	800328a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e94:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69d9      	ldr	r1, [r3, #28]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	021a      	lsls	r2, r3, #8
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b0c      	cmp	r3, #12
 8002ed6:	d831      	bhi.n	8002f3c <HAL_TIM_ReadCapturedValue+0x78>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002f15 	.word	0x08002f15
 8002ee4:	08002f3d 	.word	0x08002f3d
 8002ee8:	08002f3d 	.word	0x08002f3d
 8002eec:	08002f3d 	.word	0x08002f3d
 8002ef0:	08002f1f 	.word	0x08002f1f
 8002ef4:	08002f3d 	.word	0x08002f3d
 8002ef8:	08002f3d 	.word	0x08002f3d
 8002efc:	08002f3d 	.word	0x08002f3d
 8002f00:	08002f29 	.word	0x08002f29
 8002f04:	08002f3d 	.word	0x08002f3d
 8002f08:	08002f3d 	.word	0x08002f3d
 8002f0c:	08002f3d 	.word	0x08002f3d
 8002f10:	08002f33 	.word	0x08002f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	60fb      	str	r3, [r7, #12]

      break;
 8002f1c:	e00f      	b.n	8002f3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	60fb      	str	r3, [r7, #12]

      break;
 8002f26:	e00a      	b.n	8002f3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	60fb      	str	r3, [r7, #12]

      break;
 8002f30:	e005      	b.n	8002f3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	60fb      	str	r3, [r7, #12]

      break;
 8002f3a:	e000      	b.n	8002f3e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002f3c:	bf00      	nop
  }

  return tmpreg;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a40      	ldr	r2, [pc, #256]	; (800309c <TIM_Base_SetConfig+0x114>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d013      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d00f      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a3d      	ldr	r2, [pc, #244]	; (80030a0 <TIM_Base_SetConfig+0x118>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00b      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a3c      	ldr	r2, [pc, #240]	; (80030a4 <TIM_Base_SetConfig+0x11c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d007      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a3b      	ldr	r2, [pc, #236]	; (80030a8 <TIM_Base_SetConfig+0x120>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d003      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <TIM_Base_SetConfig+0x124>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d108      	bne.n	8002fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a2f      	ldr	r2, [pc, #188]	; (800309c <TIM_Base_SetConfig+0x114>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01f      	beq.n	8003022 <TIM_Base_SetConfig+0x9a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe8:	d01b      	beq.n	8003022 <TIM_Base_SetConfig+0x9a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a2c      	ldr	r2, [pc, #176]	; (80030a0 <TIM_Base_SetConfig+0x118>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d017      	beq.n	8003022 <TIM_Base_SetConfig+0x9a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <TIM_Base_SetConfig+0x11c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <TIM_Base_SetConfig+0x9a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a2a      	ldr	r2, [pc, #168]	; (80030a8 <TIM_Base_SetConfig+0x120>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00f      	beq.n	8003022 <TIM_Base_SetConfig+0x9a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a29      	ldr	r2, [pc, #164]	; (80030ac <TIM_Base_SetConfig+0x124>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00b      	beq.n	8003022 <TIM_Base_SetConfig+0x9a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a28      	ldr	r2, [pc, #160]	; (80030b0 <TIM_Base_SetConfig+0x128>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <TIM_Base_SetConfig+0x9a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <TIM_Base_SetConfig+0x12c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d003      	beq.n	8003022 <TIM_Base_SetConfig+0x9a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a26      	ldr	r2, [pc, #152]	; (80030b8 <TIM_Base_SetConfig+0x130>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d108      	bne.n	8003034 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a10      	ldr	r2, [pc, #64]	; (800309c <TIM_Base_SetConfig+0x114>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00f      	beq.n	8003080 <TIM_Base_SetConfig+0xf8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a12      	ldr	r2, [pc, #72]	; (80030ac <TIM_Base_SetConfig+0x124>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00b      	beq.n	8003080 <TIM_Base_SetConfig+0xf8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a11      	ldr	r2, [pc, #68]	; (80030b0 <TIM_Base_SetConfig+0x128>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <TIM_Base_SetConfig+0xf8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a10      	ldr	r2, [pc, #64]	; (80030b4 <TIM_Base_SetConfig+0x12c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <TIM_Base_SetConfig+0xf8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <TIM_Base_SetConfig+0x130>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d103      	bne.n	8003088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	615a      	str	r2, [r3, #20]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40000800 	.word	0x40000800
 80030a8:	40000c00 	.word	0x40000c00
 80030ac:	40013400 	.word	0x40013400
 80030b0:	40014000 	.word	0x40014000
 80030b4:	40014400 	.word	0x40014400
 80030b8:	40014800 	.word	0x40014800

080030bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	f023 0201 	bic.w	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4a26      	ldr	r2, [pc, #152]	; (8003180 <TIM_TI1_SetConfig+0xc4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d017      	beq.n	800311a <TIM_TI1_SetConfig+0x5e>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d013      	beq.n	800311a <TIM_TI1_SetConfig+0x5e>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4a23      	ldr	r2, [pc, #140]	; (8003184 <TIM_TI1_SetConfig+0xc8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00f      	beq.n	800311a <TIM_TI1_SetConfig+0x5e>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4a22      	ldr	r2, [pc, #136]	; (8003188 <TIM_TI1_SetConfig+0xcc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00b      	beq.n	800311a <TIM_TI1_SetConfig+0x5e>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4a21      	ldr	r2, [pc, #132]	; (800318c <TIM_TI1_SetConfig+0xd0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <TIM_TI1_SetConfig+0x5e>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4a20      	ldr	r2, [pc, #128]	; (8003190 <TIM_TI1_SetConfig+0xd4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d003      	beq.n	800311a <TIM_TI1_SetConfig+0x5e>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <TIM_TI1_SetConfig+0xd8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <TIM_TI1_SetConfig+0x62>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <TIM_TI1_SetConfig+0x64>
 800311e:	2300      	movs	r3, #0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f023 0303 	bic.w	r3, r3, #3
 800312a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	e003      	b.n	800313e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	b2db      	uxtb	r3, r3
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f023 030a 	bic.w	r3, r3, #10
 8003158:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f003 030a 	and.w	r3, r3, #10
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40012c00 	.word	0x40012c00
 8003184:	40000400 	.word	0x40000400
 8003188:	40000800 	.word	0x40000800
 800318c:	40000c00 	.word	0x40000c00
 8003190:	40013400 	.word	0x40013400
 8003194:	40014000 	.word	0x40014000

08003198 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f023 0210 	bic.w	r2, r3, #16
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	031b      	lsls	r3, r3, #12
 80031dc:	b29b      	uxth	r3, r3
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	621a      	str	r2, [r3, #32]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003212:	b480      	push	{r7}
 8003214:	b087      	sub	sp, #28
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800324e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	b2db      	uxtb	r3, r3
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003262:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	621a      	str	r2, [r3, #32]
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800328a:	b480      	push	{r7}
 800328c:	b087      	sub	sp, #28
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	031b      	lsls	r3, r3, #12
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80032dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	031b      	lsls	r3, r3, #12
 80032e2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	621a      	str	r2, [r3, #32]
}
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2201      	movs	r2, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1a      	ldr	r2, [r3, #32]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	43db      	mvns	r3, r3
 8003326:	401a      	ands	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003364:	2302      	movs	r3, #2
 8003366:	e045      	b.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	40012c00 	.word	0x40012c00
 8003404:	40013400 	.word	0x40013400

08003408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e040      	b.n	80034d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f002 fcc2 	bl	8005df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8c0 	bl	8003608 <UART_SetConfig>
 8003488:	4603      	mov	r3, r0
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e022      	b.n	80034d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fbfc 	bl	8003c98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fc83 	bl	8003ddc <UART_CheckIdleState>
 80034d6:	4603      	mov	r3, r0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	f040 8081 	bne.w	80035fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_UART_Transmit+0x26>
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e079      	b.n	80035fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_UART_Transmit+0x38>
 8003514:	2302      	movs	r3, #2
 8003516:	e072      	b.n	80035fe <HAL_UART_Transmit+0x11e>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2221      	movs	r2, #33	; 0x21
 800352a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800352c:	f7fd fbbc 	bl	8000ca8 <HAL_GetTick>
 8003530:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	88fa      	ldrh	r2, [r7, #6]
 800353e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354a:	d108      	bne.n	800355e <HAL_UART_Transmit+0x7e>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d104      	bne.n	800355e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	e003      	b.n	8003566 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003566:	e02d      	b.n	80035c4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2200      	movs	r2, #0
 8003570:	2180      	movs	r1, #128	; 0x80
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fc77 	bl	8003e66 <UART_WaitOnFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e03d      	b.n	80035fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10b      	bne.n	80035a0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	881a      	ldrh	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003594:	b292      	uxth	r2, r2
 8003596:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	3302      	adds	r3, #2
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e008      	b.n	80035b2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	b292      	uxth	r2, r2
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	3301      	adds	r3, #1
 80035b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1cb      	bne.n	8003568 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2200      	movs	r2, #0
 80035d8:	2140      	movs	r1, #64	; 0x40
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fc43 	bl	8003e66 <UART_WaitOnFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e009      	b.n	80035fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e000      	b.n	80035fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003608:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800360c:	b088      	sub	sp, #32
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	4313      	orrs	r3, r2
 8003634:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4bac      	ldr	r3, [pc, #688]	; (80038f0 <UART_SetConfig+0x2e8>)
 800363e:	4013      	ands	r3, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	69f9      	ldr	r1, [r7, #28]
 8003646:	430b      	orrs	r3, r1
 8003648:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4aa2      	ldr	r2, [pc, #648]	; (80038f4 <UART_SetConfig+0x2ec>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d004      	beq.n	800367a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	4313      	orrs	r3, r2
 8003678:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	430a      	orrs	r2, r1
 800368c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a99      	ldr	r2, [pc, #612]	; (80038f8 <UART_SetConfig+0x2f0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d121      	bne.n	80036dc <UART_SetConfig+0xd4>
 8003698:	4b98      	ldr	r3, [pc, #608]	; (80038fc <UART_SetConfig+0x2f4>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d816      	bhi.n	80036d4 <UART_SetConfig+0xcc>
 80036a6:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <UART_SetConfig+0xa4>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036c9 	.word	0x080036c9
 80036b4:	080036c3 	.word	0x080036c3
 80036b8:	080036cf 	.word	0x080036cf
 80036bc:	2301      	movs	r3, #1
 80036be:	76fb      	strb	r3, [r7, #27]
 80036c0:	e0e8      	b.n	8003894 <UART_SetConfig+0x28c>
 80036c2:	2302      	movs	r3, #2
 80036c4:	76fb      	strb	r3, [r7, #27]
 80036c6:	e0e5      	b.n	8003894 <UART_SetConfig+0x28c>
 80036c8:	2304      	movs	r3, #4
 80036ca:	76fb      	strb	r3, [r7, #27]
 80036cc:	e0e2      	b.n	8003894 <UART_SetConfig+0x28c>
 80036ce:	2308      	movs	r3, #8
 80036d0:	76fb      	strb	r3, [r7, #27]
 80036d2:	e0df      	b.n	8003894 <UART_SetConfig+0x28c>
 80036d4:	2310      	movs	r3, #16
 80036d6:	76fb      	strb	r3, [r7, #27]
 80036d8:	bf00      	nop
 80036da:	e0db      	b.n	8003894 <UART_SetConfig+0x28c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a87      	ldr	r2, [pc, #540]	; (8003900 <UART_SetConfig+0x2f8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d134      	bne.n	8003750 <UART_SetConfig+0x148>
 80036e6:	4b85      	ldr	r3, [pc, #532]	; (80038fc <UART_SetConfig+0x2f4>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	2b0c      	cmp	r3, #12
 80036f2:	d829      	bhi.n	8003748 <UART_SetConfig+0x140>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <UART_SetConfig+0xf4>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003731 	.word	0x08003731
 8003700:	08003749 	.word	0x08003749
 8003704:	08003749 	.word	0x08003749
 8003708:	08003749 	.word	0x08003749
 800370c:	0800373d 	.word	0x0800373d
 8003710:	08003749 	.word	0x08003749
 8003714:	08003749 	.word	0x08003749
 8003718:	08003749 	.word	0x08003749
 800371c:	08003737 	.word	0x08003737
 8003720:	08003749 	.word	0x08003749
 8003724:	08003749 	.word	0x08003749
 8003728:	08003749 	.word	0x08003749
 800372c:	08003743 	.word	0x08003743
 8003730:	2300      	movs	r3, #0
 8003732:	76fb      	strb	r3, [r7, #27]
 8003734:	e0ae      	b.n	8003894 <UART_SetConfig+0x28c>
 8003736:	2302      	movs	r3, #2
 8003738:	76fb      	strb	r3, [r7, #27]
 800373a:	e0ab      	b.n	8003894 <UART_SetConfig+0x28c>
 800373c:	2304      	movs	r3, #4
 800373e:	76fb      	strb	r3, [r7, #27]
 8003740:	e0a8      	b.n	8003894 <UART_SetConfig+0x28c>
 8003742:	2308      	movs	r3, #8
 8003744:	76fb      	strb	r3, [r7, #27]
 8003746:	e0a5      	b.n	8003894 <UART_SetConfig+0x28c>
 8003748:	2310      	movs	r3, #16
 800374a:	76fb      	strb	r3, [r7, #27]
 800374c:	bf00      	nop
 800374e:	e0a1      	b.n	8003894 <UART_SetConfig+0x28c>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a6b      	ldr	r2, [pc, #428]	; (8003904 <UART_SetConfig+0x2fc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d120      	bne.n	800379c <UART_SetConfig+0x194>
 800375a:	4b68      	ldr	r3, [pc, #416]	; (80038fc <UART_SetConfig+0x2f4>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003764:	2b10      	cmp	r3, #16
 8003766:	d00f      	beq.n	8003788 <UART_SetConfig+0x180>
 8003768:	2b10      	cmp	r3, #16
 800376a:	d802      	bhi.n	8003772 <UART_SetConfig+0x16a>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <UART_SetConfig+0x174>
 8003770:	e010      	b.n	8003794 <UART_SetConfig+0x18c>
 8003772:	2b20      	cmp	r3, #32
 8003774:	d005      	beq.n	8003782 <UART_SetConfig+0x17a>
 8003776:	2b30      	cmp	r3, #48	; 0x30
 8003778:	d009      	beq.n	800378e <UART_SetConfig+0x186>
 800377a:	e00b      	b.n	8003794 <UART_SetConfig+0x18c>
 800377c:	2300      	movs	r3, #0
 800377e:	76fb      	strb	r3, [r7, #27]
 8003780:	e088      	b.n	8003894 <UART_SetConfig+0x28c>
 8003782:	2302      	movs	r3, #2
 8003784:	76fb      	strb	r3, [r7, #27]
 8003786:	e085      	b.n	8003894 <UART_SetConfig+0x28c>
 8003788:	2304      	movs	r3, #4
 800378a:	76fb      	strb	r3, [r7, #27]
 800378c:	e082      	b.n	8003894 <UART_SetConfig+0x28c>
 800378e:	2308      	movs	r3, #8
 8003790:	76fb      	strb	r3, [r7, #27]
 8003792:	e07f      	b.n	8003894 <UART_SetConfig+0x28c>
 8003794:	2310      	movs	r3, #16
 8003796:	76fb      	strb	r3, [r7, #27]
 8003798:	bf00      	nop
 800379a:	e07b      	b.n	8003894 <UART_SetConfig+0x28c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a59      	ldr	r2, [pc, #356]	; (8003908 <UART_SetConfig+0x300>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d120      	bne.n	80037e8 <UART_SetConfig+0x1e0>
 80037a6:	4b55      	ldr	r3, [pc, #340]	; (80038fc <UART_SetConfig+0x2f4>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d00f      	beq.n	80037d4 <UART_SetConfig+0x1cc>
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d802      	bhi.n	80037be <UART_SetConfig+0x1b6>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <UART_SetConfig+0x1c0>
 80037bc:	e010      	b.n	80037e0 <UART_SetConfig+0x1d8>
 80037be:	2b80      	cmp	r3, #128	; 0x80
 80037c0:	d005      	beq.n	80037ce <UART_SetConfig+0x1c6>
 80037c2:	2bc0      	cmp	r3, #192	; 0xc0
 80037c4:	d009      	beq.n	80037da <UART_SetConfig+0x1d2>
 80037c6:	e00b      	b.n	80037e0 <UART_SetConfig+0x1d8>
 80037c8:	2300      	movs	r3, #0
 80037ca:	76fb      	strb	r3, [r7, #27]
 80037cc:	e062      	b.n	8003894 <UART_SetConfig+0x28c>
 80037ce:	2302      	movs	r3, #2
 80037d0:	76fb      	strb	r3, [r7, #27]
 80037d2:	e05f      	b.n	8003894 <UART_SetConfig+0x28c>
 80037d4:	2304      	movs	r3, #4
 80037d6:	76fb      	strb	r3, [r7, #27]
 80037d8:	e05c      	b.n	8003894 <UART_SetConfig+0x28c>
 80037da:	2308      	movs	r3, #8
 80037dc:	76fb      	strb	r3, [r7, #27]
 80037de:	e059      	b.n	8003894 <UART_SetConfig+0x28c>
 80037e0:	2310      	movs	r3, #16
 80037e2:	76fb      	strb	r3, [r7, #27]
 80037e4:	bf00      	nop
 80037e6:	e055      	b.n	8003894 <UART_SetConfig+0x28c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a47      	ldr	r2, [pc, #284]	; (800390c <UART_SetConfig+0x304>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d124      	bne.n	800383c <UART_SetConfig+0x234>
 80037f2:	4b42      	ldr	r3, [pc, #264]	; (80038fc <UART_SetConfig+0x2f4>)
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003800:	d012      	beq.n	8003828 <UART_SetConfig+0x220>
 8003802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003806:	d802      	bhi.n	800380e <UART_SetConfig+0x206>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d007      	beq.n	800381c <UART_SetConfig+0x214>
 800380c:	e012      	b.n	8003834 <UART_SetConfig+0x22c>
 800380e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003812:	d006      	beq.n	8003822 <UART_SetConfig+0x21a>
 8003814:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003818:	d009      	beq.n	800382e <UART_SetConfig+0x226>
 800381a:	e00b      	b.n	8003834 <UART_SetConfig+0x22c>
 800381c:	2300      	movs	r3, #0
 800381e:	76fb      	strb	r3, [r7, #27]
 8003820:	e038      	b.n	8003894 <UART_SetConfig+0x28c>
 8003822:	2302      	movs	r3, #2
 8003824:	76fb      	strb	r3, [r7, #27]
 8003826:	e035      	b.n	8003894 <UART_SetConfig+0x28c>
 8003828:	2304      	movs	r3, #4
 800382a:	76fb      	strb	r3, [r7, #27]
 800382c:	e032      	b.n	8003894 <UART_SetConfig+0x28c>
 800382e:	2308      	movs	r3, #8
 8003830:	76fb      	strb	r3, [r7, #27]
 8003832:	e02f      	b.n	8003894 <UART_SetConfig+0x28c>
 8003834:	2310      	movs	r3, #16
 8003836:	76fb      	strb	r3, [r7, #27]
 8003838:	bf00      	nop
 800383a:	e02b      	b.n	8003894 <UART_SetConfig+0x28c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2c      	ldr	r2, [pc, #176]	; (80038f4 <UART_SetConfig+0x2ec>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d124      	bne.n	8003890 <UART_SetConfig+0x288>
 8003846:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <UART_SetConfig+0x2f4>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003854:	d012      	beq.n	800387c <UART_SetConfig+0x274>
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385a:	d802      	bhi.n	8003862 <UART_SetConfig+0x25a>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <UART_SetConfig+0x268>
 8003860:	e012      	b.n	8003888 <UART_SetConfig+0x280>
 8003862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003866:	d006      	beq.n	8003876 <UART_SetConfig+0x26e>
 8003868:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800386c:	d009      	beq.n	8003882 <UART_SetConfig+0x27a>
 800386e:	e00b      	b.n	8003888 <UART_SetConfig+0x280>
 8003870:	2300      	movs	r3, #0
 8003872:	76fb      	strb	r3, [r7, #27]
 8003874:	e00e      	b.n	8003894 <UART_SetConfig+0x28c>
 8003876:	2302      	movs	r3, #2
 8003878:	76fb      	strb	r3, [r7, #27]
 800387a:	e00b      	b.n	8003894 <UART_SetConfig+0x28c>
 800387c:	2304      	movs	r3, #4
 800387e:	76fb      	strb	r3, [r7, #27]
 8003880:	e008      	b.n	8003894 <UART_SetConfig+0x28c>
 8003882:	2308      	movs	r3, #8
 8003884:	76fb      	strb	r3, [r7, #27]
 8003886:	e005      	b.n	8003894 <UART_SetConfig+0x28c>
 8003888:	2310      	movs	r3, #16
 800388a:	76fb      	strb	r3, [r7, #27]
 800388c:	bf00      	nop
 800388e:	e001      	b.n	8003894 <UART_SetConfig+0x28c>
 8003890:	2310      	movs	r3, #16
 8003892:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a16      	ldr	r2, [pc, #88]	; (80038f4 <UART_SetConfig+0x2ec>)
 800389a:	4293      	cmp	r3, r2
 800389c:	f040 80fa 	bne.w	8003a94 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038a0:	7efb      	ldrb	r3, [r7, #27]
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d836      	bhi.n	8003914 <UART_SetConfig+0x30c>
 80038a6:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <UART_SetConfig+0x2a4>)
 80038a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ac:	080038d1 	.word	0x080038d1
 80038b0:	08003915 	.word	0x08003915
 80038b4:	080038d9 	.word	0x080038d9
 80038b8:	08003915 	.word	0x08003915
 80038bc:	080038df 	.word	0x080038df
 80038c0:	08003915 	.word	0x08003915
 80038c4:	08003915 	.word	0x08003915
 80038c8:	08003915 	.word	0x08003915
 80038cc:	080038e7 	.word	0x080038e7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80038d0:	f7fe fa0c 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 80038d4:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038d6:	e020      	b.n	800391a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80038d8:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <UART_SetConfig+0x308>)
 80038da:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038dc:	e01d      	b.n	800391a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80038de:	f7fe f96f 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 80038e2:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038e4:	e019      	b.n	800391a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80038e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ea:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038ec:	e015      	b.n	800391a <UART_SetConfig+0x312>
 80038ee:	bf00      	nop
 80038f0:	efff69f3 	.word	0xefff69f3
 80038f4:	40008000 	.word	0x40008000
 80038f8:	40013800 	.word	0x40013800
 80038fc:	40021000 	.word	0x40021000
 8003900:	40004400 	.word	0x40004400
 8003904:	40004800 	.word	0x40004800
 8003908:	40004c00 	.word	0x40004c00
 800390c:	40005000 	.word	0x40005000
 8003910:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	74fb      	strb	r3, [r7, #19]
        break;
 8003918:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 81ac 	beq.w	8003c7a <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4413      	add	r3, r2
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	429a      	cmp	r2, r3
 8003930:	d305      	bcc.n	800393e <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	429a      	cmp	r2, r3
 800393c:	d902      	bls.n	8003944 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	74fb      	strb	r3, [r7, #19]
 8003942:	e19a      	b.n	8003c7a <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8003944:	7efb      	ldrb	r3, [r7, #27]
 8003946:	2b08      	cmp	r3, #8
 8003948:	f200 8091 	bhi.w	8003a6e <UART_SetConfig+0x466>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <UART_SetConfig+0x34c>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003979 	.word	0x08003979
 8003958:	08003a6f 	.word	0x08003a6f
 800395c:	080039c5 	.word	0x080039c5
 8003960:	08003a6f 	.word	0x08003a6f
 8003964:	080039f9 	.word	0x080039f9
 8003968:	08003a6f 	.word	0x08003a6f
 800396c:	08003a6f 	.word	0x08003a6f
 8003970:	08003a6f 	.word	0x08003a6f
 8003974:	08003a45 	.word	0x08003a45
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003978:	f7fe f9b8 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 800397c:	4603      	mov	r3, r0
 800397e:	4619      	mov	r1, r3
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	f04f 0400 	mov.w	r4, #0
 800398c:	0214      	lsls	r4, r2, #8
 800398e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003992:	020b      	lsls	r3, r1, #8
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6852      	ldr	r2, [r2, #4]
 8003998:	0852      	lsrs	r2, r2, #1
 800399a:	4611      	mov	r1, r2
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	eb13 0b01 	adds.w	fp, r3, r1
 80039a4:	eb44 0c02 	adc.w	ip, r4, r2
 80039a8:	4658      	mov	r0, fp
 80039aa:	4661      	mov	r1, ip
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f04f 0400 	mov.w	r4, #0
 80039b4:	461a      	mov	r2, r3
 80039b6:	4623      	mov	r3, r4
 80039b8:	f7fc fc5a 	bl	8000270 <__aeabi_uldivmod>
 80039bc:	4603      	mov	r3, r0
 80039be:	460c      	mov	r4, r1
 80039c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80039c2:	e057      	b.n	8003a74 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	085b      	lsrs	r3, r3, #1
 80039ca:	f04f 0400 	mov.w	r4, #0
 80039ce:	49b1      	ldr	r1, [pc, #708]	; (8003c94 <UART_SetConfig+0x68c>)
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	eb13 0b01 	adds.w	fp, r3, r1
 80039d8:	eb44 0c02 	adc.w	ip, r4, r2
 80039dc:	4658      	mov	r0, fp
 80039de:	4661      	mov	r1, ip
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f04f 0400 	mov.w	r4, #0
 80039e8:	461a      	mov	r2, r3
 80039ea:	4623      	mov	r3, r4
 80039ec:	f7fc fc40 	bl	8000270 <__aeabi_uldivmod>
 80039f0:	4603      	mov	r3, r0
 80039f2:	460c      	mov	r4, r1
 80039f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80039f6:	e03d      	b.n	8003a74 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80039f8:	f7fe f8e2 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 80039fc:	4603      	mov	r3, r0
 80039fe:	4619      	mov	r1, r3
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	f04f 0400 	mov.w	r4, #0
 8003a0c:	0214      	lsls	r4, r2, #8
 8003a0e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003a12:	020b      	lsls	r3, r1, #8
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6852      	ldr	r2, [r2, #4]
 8003a18:	0852      	lsrs	r2, r2, #1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	eb13 0b01 	adds.w	fp, r3, r1
 8003a24:	eb44 0c02 	adc.w	ip, r4, r2
 8003a28:	4658      	mov	r0, fp
 8003a2a:	4661      	mov	r1, ip
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f04f 0400 	mov.w	r4, #0
 8003a34:	461a      	mov	r2, r3
 8003a36:	4623      	mov	r3, r4
 8003a38:	f7fc fc1a 	bl	8000270 <__aeabi_uldivmod>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	460c      	mov	r4, r1
 8003a40:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003a42:	e017      	b.n	8003a74 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	f04f 0400 	mov.w	r4, #0
 8003a4e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003a52:	f144 0100 	adc.w	r1, r4, #0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f04f 0400 	mov.w	r4, #0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4623      	mov	r3, r4
 8003a62:	f7fc fc05 	bl	8000270 <__aeabi_uldivmod>
 8003a66:	4603      	mov	r3, r0
 8003a68:	460c      	mov	r4, r1
 8003a6a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003a6c:	e002      	b.n	8003a74 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	74fb      	strb	r3, [r7, #19]
            break;
 8003a72:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a7a:	d308      	bcc.n	8003a8e <UART_SetConfig+0x486>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a82:	d204      	bcs.n	8003a8e <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	60da      	str	r2, [r3, #12]
 8003a8c:	e0f5      	b.n	8003c7a <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	74fb      	strb	r3, [r7, #19]
 8003a92:	e0f2      	b.n	8003c7a <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a9c:	d17f      	bne.n	8003b9e <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8003a9e:	7efb      	ldrb	r3, [r7, #27]
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d85c      	bhi.n	8003b5e <UART_SetConfig+0x556>
 8003aa4:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <UART_SetConfig+0x4a4>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003ad1 	.word	0x08003ad1
 8003ab0:	08003aef 	.word	0x08003aef
 8003ab4:	08003b0d 	.word	0x08003b0d
 8003ab8:	08003b5f 	.word	0x08003b5f
 8003abc:	08003b29 	.word	0x08003b29
 8003ac0:	08003b5f 	.word	0x08003b5f
 8003ac4:	08003b5f 	.word	0x08003b5f
 8003ac8:	08003b5f 	.word	0x08003b5f
 8003acc:	08003b47 	.word	0x08003b47
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003ad0:	f7fe f90c 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	005a      	lsls	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	441a      	add	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003aec:	e03a      	b.n	8003b64 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003aee:	f7fe f913 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8003af2:	4603      	mov	r3, r0
 8003af4:	005a      	lsls	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	441a      	add	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b0a:	e02b      	b.n	8003b64 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	085b      	lsrs	r3, r3, #1
 8003b12:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003b16:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6852      	ldr	r2, [r2, #4]
 8003b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b26:	e01d      	b.n	8003b64 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003b28:	f7fe f84a 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	005a      	lsls	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	085b      	lsrs	r3, r3, #1
 8003b36:	441a      	add	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b44:	e00e      	b.n	8003b64 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b5c:	e002      	b.n	8003b64 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	74fb      	strb	r3, [r7, #19]
        break;
 8003b62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2b0f      	cmp	r3, #15
 8003b68:	d916      	bls.n	8003b98 <UART_SetConfig+0x590>
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b70:	d212      	bcs.n	8003b98 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f023 030f 	bic.w	r3, r3, #15
 8003b7a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	897b      	ldrh	r3, [r7, #10]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	897a      	ldrh	r2, [r7, #10]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	e070      	b.n	8003c7a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	74fb      	strb	r3, [r7, #19]
 8003b9c:	e06d      	b.n	8003c7a <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8003b9e:	7efb      	ldrb	r3, [r7, #27]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d859      	bhi.n	8003c58 <UART_SetConfig+0x650>
 8003ba4:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <UART_SetConfig+0x5a4>)
 8003ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	08003bd1 	.word	0x08003bd1
 8003bb0:	08003bed 	.word	0x08003bed
 8003bb4:	08003c09 	.word	0x08003c09
 8003bb8:	08003c59 	.word	0x08003c59
 8003bbc:	08003c25 	.word	0x08003c25
 8003bc0:	08003c59 	.word	0x08003c59
 8003bc4:	08003c59 	.word	0x08003c59
 8003bc8:	08003c59 	.word	0x08003c59
 8003bcc:	08003c41 	.word	0x08003c41
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003bd0:	f7fe f88c 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	441a      	add	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003bea:	e038      	b.n	8003c5e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003bec:	f7fe f894 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	085b      	lsrs	r3, r3, #1
 8003bf8:	441a      	add	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c06:	e02a      	b.n	8003c5e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003c12:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6852      	ldr	r2, [r2, #4]
 8003c1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c22:	e01c      	b.n	8003c5e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c24:	f7fd ffcc 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	441a      	add	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c3e:	e00e      	b.n	8003c5e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c56:	e002      	b.n	8003c5e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	74fb      	strb	r3, [r7, #19]
        break;
 8003c5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b0f      	cmp	r3, #15
 8003c62:	d908      	bls.n	8003c76 <UART_SetConfig+0x66e>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6a:	d204      	bcs.n	8003c76 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	60da      	str	r2, [r3, #12]
 8003c74:	e001      	b.n	8003c7a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003c86:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3720      	adds	r7, #32
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003c92:	bf00      	nop
 8003c94:	f4240000 	.word	0xf4240000

08003c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01a      	beq.n	8003dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d96:	d10a      	bne.n	8003dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	605a      	str	r2, [r3, #4]
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003dea:	f7fc ff5d 	bl	8000ca8 <HAL_GetTick>
 8003dee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d10e      	bne.n	8003e1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f82a 	bl	8003e66 <UART_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e020      	b.n	8003e5e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d10e      	bne.n	8003e48 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f814 	bl	8003e66 <UART_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e00a      	b.n	8003e5e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	4613      	mov	r3, r2
 8003e74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e76:	e02a      	b.n	8003ece <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e7e:	d026      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e80:	f7fc ff12 	bl	8000ca8 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d302      	bcc.n	8003e96 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d11b      	bne.n	8003ece <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ea4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0201 	bic.w	r2, r2, #1
 8003eb4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e00f      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d0c5      	beq.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <Motorx_Set_Speed>:
	TIMx_PWM_Stop(TIM_handler);
#endif
}

void Motorx_Set_Speed(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08e      	sub	sp, #56	; 0x38
 8003efc:	af02      	add	r7, sp, #8
	TIM_PWM_Typedef TIM_handler = {0};
 8003efe:	f107 031c 	add.w	r3, r7, #28
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	605a      	str	r2, [r3, #4]
 8003f08:	609a      	str	r2, [r3, #8]
 8003f0a:	60da      	str	r2, [r3, #12]
 8003f0c:	611a      	str	r2, [r3, #16]
	WheelSpeed_Typedef Calculated_wheel_speeds;

	Read_Calculated_Wheel_Speeds(&Calculated_wheel_speeds);
 8003f0e:	f107 030c 	add.w	r3, r7, #12
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 fd26 	bl	8005964 <Read_Calculated_Wheel_Speeds>

	if(Calculated_wheel_speeds.WheelSpeed_1 > 100)
 8003f18:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f1c:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8004090 <Motorx_Set_Speed+0x198>
 8003f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f28:	dd02      	ble.n	8003f30 <Motorx_Set_Speed+0x38>
	{
		Calculated_wheel_speeds.WheelSpeed_1 = 100;
 8003f2a:	4b5a      	ldr	r3, [pc, #360]	; (8004094 <Motorx_Set_Speed+0x19c>)
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	e00a      	b.n	8003f46 <Motorx_Set_Speed+0x4e>
	}
	else if(Calculated_wheel_speeds.WheelSpeed_1 < (-100))
 8003f30:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f34:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8004098 <Motorx_Set_Speed+0x1a0>
 8003f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f40:	d501      	bpl.n	8003f46 <Motorx_Set_Speed+0x4e>
	{
		Calculated_wheel_speeds.WheelSpeed_1 = -100;
 8003f42:	4b56      	ldr	r3, [pc, #344]	; (800409c <Motorx_Set_Speed+0x1a4>)
 8003f44:	60fb      	str	r3, [r7, #12]
	}
	if(Calculated_wheel_speeds.WheelSpeed_2 > 100)
 8003f46:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f4a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004090 <Motorx_Set_Speed+0x198>
 8003f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f56:	dd02      	ble.n	8003f5e <Motorx_Set_Speed+0x66>
	{
		Calculated_wheel_speeds.WheelSpeed_2 = 100;
 8003f58:	4b4e      	ldr	r3, [pc, #312]	; (8004094 <Motorx_Set_Speed+0x19c>)
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	e00a      	b.n	8003f74 <Motorx_Set_Speed+0x7c>
	}
	else if(Calculated_wheel_speeds.WheelSpeed_2 < (-100))
 8003f5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f62:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004098 <Motorx_Set_Speed+0x1a0>
 8003f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6e:	d501      	bpl.n	8003f74 <Motorx_Set_Speed+0x7c>
	{
		Calculated_wheel_speeds.WheelSpeed_2 = -100;
 8003f70:	4b4a      	ldr	r3, [pc, #296]	; (800409c <Motorx_Set_Speed+0x1a4>)
 8003f72:	613b      	str	r3, [r7, #16]
	}
	if(Calculated_wheel_speeds.WheelSpeed_3 > 100)
 8003f74:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f78:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004090 <Motorx_Set_Speed+0x198>
 8003f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f84:	dd02      	ble.n	8003f8c <Motorx_Set_Speed+0x94>
	{
		Calculated_wheel_speeds.WheelSpeed_3 = 100;
 8003f86:	4b43      	ldr	r3, [pc, #268]	; (8004094 <Motorx_Set_Speed+0x19c>)
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	e00a      	b.n	8003fa2 <Motorx_Set_Speed+0xaa>
	}
	else if(Calculated_wheel_speeds.WheelSpeed_3 < (-100))
 8003f8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f90:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8004098 <Motorx_Set_Speed+0x1a0>
 8003f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9c:	d501      	bpl.n	8003fa2 <Motorx_Set_Speed+0xaa>
	{
		Calculated_wheel_speeds.WheelSpeed_3 = -100;
 8003f9e:	4b3f      	ldr	r3, [pc, #252]	; (800409c <Motorx_Set_Speed+0x1a4>)
 8003fa0:	617b      	str	r3, [r7, #20]
	}
	if(Calculated_wheel_speeds.WheelSpeed_4 > 100)
 8003fa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fa6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8004090 <Motorx_Set_Speed+0x198>
 8003faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb2:	dd02      	ble.n	8003fba <Motorx_Set_Speed+0xc2>
	{
		Calculated_wheel_speeds.WheelSpeed_4 = 100;
 8003fb4:	4b37      	ldr	r3, [pc, #220]	; (8004094 <Motorx_Set_Speed+0x19c>)
 8003fb6:	61bb      	str	r3, [r7, #24]
 8003fb8:	e00a      	b.n	8003fd0 <Motorx_Set_Speed+0xd8>
	}
	else if(Calculated_wheel_speeds.WheelSpeed_4 < (-100))
 8003fba:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fbe:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004098 <Motorx_Set_Speed+0x1a0>
 8003fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fca:	d501      	bpl.n	8003fd0 <Motorx_Set_Speed+0xd8>
	{
		Calculated_wheel_speeds.WheelSpeed_4 = -100;
 8003fcc:	4b33      	ldr	r3, [pc, #204]	; (800409c <Motorx_Set_Speed+0x1a4>)
 8003fce:	61bb      	str	r3, [r7, #24]
	}

	if(ZERO_SPEED <= Calculated_wheel_speeds.WheelSpeed_1)
 8003fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fdc:	db29      	blt.n	8004032 <Motorx_Set_Speed+0x13a>
	{
		TIM_handler.TIMx = Motor1_A_TIM;
 8003fde:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <Motorx_Set_Speed+0x1a8>)
 8003fe0:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor1_A_TIM_CHANNEL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 8003fe6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003fea:	623b      	str	r3, [r7, #32]

		TIM_handler.Duty_Cicle = (uint8_t)Calculated_wheel_speeds.WheelSpeed_1;
 8003fec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff4:	edc7 7a01 	vstr	s15, [r7, #4]
 8003ff8:	793b      	ldrb	r3, [r7, #4]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	f107 031c 	add.w	r3, r7, #28
 8004008:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800400a:	f7fc fc6d 	bl	80008e8 <Change_PWM_Pulse>

		TIM_handler.TIMx = Motor1_B_TIM;
 800400e:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <Motorx_Set_Speed+0x1a8>)
 8004010:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor1_B_TIM_CHANNEL;
 8004012:	2304      	movs	r3, #4
 8004014:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 8004016:	f644 6320 	movw	r3, #20000	; 0x4e20
 800401a:	623b      	str	r3, [r7, #32]
		TIM_handler.Duty_Cicle = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 8004022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	f107 031c 	add.w	r3, r7, #28
 800402a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800402c:	f7fc fc5c 	bl	80008e8 <Change_PWM_Pulse>
		Change_PWM_Pulse(TIM_handler);
	}
#endif


}
 8004030:	e02a      	b.n	8004088 <Motorx_Set_Speed+0x190>
		TIM_handler.TIMx = Motor1_A_TIM;
 8004032:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <Motorx_Set_Speed+0x1a8>)
 8004034:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor1_A_TIM_CHANNEL;
 8004036:	2300      	movs	r3, #0
 8004038:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 800403a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800403e:	623b      	str	r3, [r7, #32]
		TIM_handler.Duty_Cicle = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	f107 031c 	add.w	r3, r7, #28
 800404e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004050:	f7fc fc4a 	bl	80008e8 <Change_PWM_Pulse>
		TIM_handler.TIMx = Motor1_B_TIM;
 8004054:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <Motorx_Set_Speed+0x1a8>)
 8004056:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor1_B_TIM_CHANNEL;
 8004058:	2304      	movs	r3, #4
 800405a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 800405c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004060:	623b      	str	r3, [r7, #32]
		TIM_handler.Duty_Cicle = (uint8_t)(Calculated_wheel_speeds.WheelSpeed_1 * -1);
 8004062:	edd7 7a03 	vldr	s15, [r7, #12]
 8004066:	eef1 7a67 	vneg.f32	s15, s15
 800406a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800406e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004072:	793b      	ldrb	r3, [r7, #4]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 800407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	f107 031c 	add.w	r3, r7, #28
 8004082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004084:	f7fc fc30 	bl	80008e8 <Change_PWM_Pulse>
}
 8004088:	bf00      	nop
 800408a:	3730      	adds	r7, #48	; 0x30
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	42c80000 	.word	0x42c80000
 8004094:	42c80000 	.word	0x42c80000
 8004098:	c2c80000 	.word	0xc2c80000
 800409c:	c2c80000 	.word	0xc2c80000
 80040a0:	40000400 	.word	0x40000400

080040a4 <Provide_Robot_Speed>:
#include "Port_config.h"

TIM_IC_Typedef config;

void Provide_Robot_Speed(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b090      	sub	sp, #64	; 0x40
 80040a8:	af00      	add	r7, sp, #0
	uint32_t Channel3_MAX;
	uint32_t Channel3_MIN;
	uint32_t Channel3_Range;
	RobotSpeed_Typedef Requested_Robot_Speed;

	Read_RC_CH1_Max(&Channel1_MAX);
 80040aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 fbe6 	bl	8005880 <Read_RC_CH1_Max>
	Read_RC_CH1_Min(&Channel1_MIN);
 80040b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 fbf1 	bl	80058a0 <Read_RC_CH1_Min>
	Read_IC_Channel1_Raw_data(&Channel1_raw_data);
 80040be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040c2:	4618      	mov	r0, r3
 80040c4:	f001 fb7c 	bl	80057c0 <Read_IC_Channel1_Raw_data>
	Read_RC_CH2_Max(&Channel2_MAX);
 80040c8:	f107 0320 	add.w	r3, r7, #32
 80040cc:	4618      	mov	r0, r3
 80040ce:	f001 fbf7 	bl	80058c0 <Read_RC_CH2_Max>
	Read_RC_CH2_Min(&Channel2_MIN);
 80040d2:	f107 031c 	add.w	r3, r7, #28
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 fc02 	bl	80058e0 <Read_RC_CH2_Min>
	Read_IC_Channel2_Raw_data(&Channel2_raw_data);
 80040dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 fb8d 	bl	8005800 <Read_IC_Channel2_Raw_data>
	Read_RC_CH3_Max(&Channel3_MAX);
 80040e6:	f107 0314 	add.w	r3, r7, #20
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 fc08 	bl	8005900 <Read_RC_CH3_Max>
	Read_RC_CH3_Min(&Channel3_MIN);
 80040f0:	f107 0310 	add.w	r3, r7, #16
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 fc13 	bl	8005920 <Read_RC_CH3_Min>
	Read_IC_Channel3_Raw_data(&Channel3_raw_data);
 80040fa:	f107 0318 	add.w	r3, r7, #24
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 fb9e 	bl	8005840 <Read_IC_Channel3_Raw_data>

	Channel1_Range = (Channel1_MAX - Channel1_MIN);
 8004104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
	Channel2_Range = (Channel2_MAX - Channel2_MIN);
 800410c:	6a3a      	ldr	r2, [r7, #32]
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	63bb      	str	r3, [r7, #56]	; 0x38
	Channel3_Range = (Channel3_MAX - Channel3_MIN);
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	637b      	str	r3, [r7, #52]	; 0x34

	if(Channel1_MAX < Channel1_raw_data)
 800411c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	429a      	cmp	r2, r3
 8004122:	d202      	bcs.n	800412a <Provide_Robot_Speed+0x86>
	{
		Channel1_raw_data = Channel1_MAX;
 8004124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004126:	633b      	str	r3, [r7, #48]	; 0x30
 8004128:	e005      	b.n	8004136 <Provide_Robot_Speed+0x92>
	}
	else if(Channel1_MIN > Channel1_raw_data)
 800412a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	429a      	cmp	r2, r3
 8004130:	d901      	bls.n	8004136 <Provide_Robot_Speed+0x92>
	{
		Channel1_raw_data = Channel1_MIN;
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if(Channel2_MAX < Channel2_raw_data)
 8004136:	6a3a      	ldr	r2, [r7, #32]
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	429a      	cmp	r2, r3
 800413c:	d202      	bcs.n	8004144 <Provide_Robot_Speed+0xa0>
	{
		Channel2_raw_data = Channel2_MAX;
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
 8004142:	e005      	b.n	8004150 <Provide_Robot_Speed+0xac>
	}
	else if(Channel2_MIN > Channel2_raw_data)
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	429a      	cmp	r2, r3
 800414a:	d901      	bls.n	8004150 <Provide_Robot_Speed+0xac>
	{
		Channel2_raw_data = Channel2_MIN;
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if(Channel2_MAX < Channel2_raw_data)
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	429a      	cmp	r2, r3
 8004156:	d202      	bcs.n	800415e <Provide_Robot_Speed+0xba>
	{
		Channel2_raw_data = Channel2_MAX;
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
 800415c:	e005      	b.n	800416a <Provide_Robot_Speed+0xc6>
	}
	else if(Channel2_MIN > Channel2_raw_data)
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	429a      	cmp	r2, r3
 8004164:	d901      	bls.n	800416a <Provide_Robot_Speed+0xc6>
	{
		Channel2_raw_data = Channel2_MIN;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
	}
	Requested_Robot_Speed.Speed_X = (((Channel1_raw_data - Channel1_MIN) * SPEED_RANGE) / Channel1_Range) + MIN_SPEED;
 800416a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	ee07 3a90 	vmov	s15, r3
 8004174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004178:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800420c <Provide_Robot_Speed+0x168>
 800417c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800418a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800418e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004210 <Provide_Robot_Speed+0x16c>
 8004192:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004196:	edc7 7a01 	vstr	s15, [r7, #4]
	Requested_Robot_Speed.Speed_Y = (((Channel2_raw_data - Channel2_MIN) * SPEED_RANGE) / Channel2_Range) + MIN_SPEED;
 800419a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800420c <Provide_Robot_Speed+0x168>
 80041ac:	ee67 6a87 	vmul.f32	s13, s15, s14
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041be:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004210 <Provide_Robot_Speed+0x16c>
 80041c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041c6:	edc7 7a02 	vstr	s15, [r7, #8]
	Requested_Robot_Speed.Angular_Speed = (float)((float)((float)(Channel3_raw_data - Channel3_MIN) * SPEED_RANGE) / Channel3_Range) + MIN_SPEED;
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	ee07 3a90 	vmov	s15, r3
 80041d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800420c <Provide_Robot_Speed+0x168>
 80041dc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	ee07 3a90 	vmov	s15, r3
 80041e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ee:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004210 <Provide_Robot_Speed+0x16c>
 80041f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041f6:	edc7 7a03 	vstr	s15, [r7, #12]

	Write_Provided_Robot_Speed(&Requested_Robot_Speed);
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 fb9f 	bl	8005940 <Write_Provided_Robot_Speed>

}
 8004202:	bf00      	nop
 8004204:	3740      	adds	r7, #64	; 0x40
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	43480000 	.word	0x43480000
 8004210:	42c80000 	.word	0x42c80000

08004214 <Remote_Control_init>:

void Remote_Control_init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
	config.TIMx = IC_1_TIM;
 8004218:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <Remote_Control_init+0xac>)
 800421a:	4a2a      	ldr	r2, [pc, #168]	; (80042c4 <Remote_Control_init+0xb0>)
 800421c:	601a      	str	r2, [r3, #0]
	config.TIM_channelx = IC_1_TIM_CHANNEL;
 800421e:	4b28      	ldr	r3, [pc, #160]	; (80042c0 <Remote_Control_init+0xac>)
 8004220:	220c      	movs	r2, #12
 8004222:	809a      	strh	r2, [r3, #4]
	config.TIMx_IRQ = IC_1_IRQn;
 8004224:	4b26      	ldr	r3, [pc, #152]	; (80042c0 <Remote_Control_init+0xac>)
 8004226:	221b      	movs	r2, #27
 8004228:	73da      	strb	r2, [r3, #15]
	config.GPIOx = IC_1_GPIO;
 800422a:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <Remote_Control_init+0xac>)
 800422c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004230:	609a      	str	r2, [r3, #8]
	config.GPIO_Pinx= IC_1_GPIO_PIN;
 8004232:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <Remote_Control_init+0xac>)
 8004234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004238:	819a      	strh	r2, [r3, #12]
	config.GPIO_AlternateFunctionx = IC_1_GPIO_AF;
 800423a:	4b21      	ldr	r3, [pc, #132]	; (80042c0 <Remote_Control_init+0xac>)
 800423c:	2201      	movs	r2, #1
 800423e:	739a      	strb	r2, [r3, #14]
	TIMx_IC_Init(config);
 8004240:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <Remote_Control_init+0xac>)
 8004242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004244:	f7fc f994 	bl	8000570 <TIMx_IC_Init>
	TIMx_IC_Start(config);
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <Remote_Control_init+0xac>)
 800424a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800424c:	f7fc fa50 	bl	80006f0 <TIMx_IC_Start>
#if (IC_IN_USE>1)
	config.TIMx = IC_2_TIM;
 8004250:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <Remote_Control_init+0xac>)
 8004252:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <Remote_Control_init+0xb4>)
 8004254:	601a      	str	r2, [r3, #0]
	config.TIM_channelx = IC_2_TIM_CHANNEL;
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <Remote_Control_init+0xac>)
 8004258:	2208      	movs	r2, #8
 800425a:	809a      	strh	r2, [r3, #4]
	config.TIMx_IRQ = IC_2_IRQn;
 800425c:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <Remote_Control_init+0xac>)
 800425e:	222e      	movs	r2, #46	; 0x2e
 8004260:	73da      	strb	r2, [r3, #15]
	config.GPIOx = IC_2_GPIO;
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <Remote_Control_init+0xac>)
 8004264:	4a19      	ldr	r2, [pc, #100]	; (80042cc <Remote_Control_init+0xb8>)
 8004266:	609a      	str	r2, [r3, #8]
	config.GPIO_Pinx= IC_2_GPIO_PIN;
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <Remote_Control_init+0xac>)
 800426a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800426e:	819a      	strh	r2, [r3, #12]
	config.GPIO_AlternateFunctionx = IC_2_GPIO_AF;
 8004270:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <Remote_Control_init+0xac>)
 8004272:	2201      	movs	r2, #1
 8004274:	739a      	strb	r2, [r3, #14]
	TIMx_IC_Init(config);
 8004276:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <Remote_Control_init+0xac>)
 8004278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800427a:	f7fc f979 	bl	8000570 <TIMx_IC_Init>
	TIMx_IC_Start(config);
 800427e:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <Remote_Control_init+0xac>)
 8004280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004282:	f7fc fa35 	bl	80006f0 <TIMx_IC_Start>
#endif
#if (IC_IN_USE>2)
	config.TIMx = IC_3_TIM;
 8004286:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <Remote_Control_init+0xac>)
 8004288:	4a0f      	ldr	r2, [pc, #60]	; (80042c8 <Remote_Control_init+0xb4>)
 800428a:	601a      	str	r2, [r3, #0]
	config.TIM_channelx = IC_3_TIM_CHANNEL;
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <Remote_Control_init+0xac>)
 800428e:	220c      	movs	r2, #12
 8004290:	809a      	strh	r2, [r3, #4]
	config.TIMx_IRQ = IC_3_IRQn;
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <Remote_Control_init+0xac>)
 8004294:	222e      	movs	r2, #46	; 0x2e
 8004296:	73da      	strb	r2, [r3, #15]
	config.GPIOx = IC_3_GPIO;
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <Remote_Control_init+0xac>)
 800429a:	4a0c      	ldr	r2, [pc, #48]	; (80042cc <Remote_Control_init+0xb8>)
 800429c:	609a      	str	r2, [r3, #8]
	config.GPIO_Pinx= IC_3_GPIO_PIN;
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <Remote_Control_init+0xac>)
 80042a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042a4:	819a      	strh	r2, [r3, #12]
	config.GPIO_AlternateFunctionx = IC_3_GPIO_AF;
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <Remote_Control_init+0xac>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	739a      	strb	r2, [r3, #14]
	TIMx_IC_Init(config);
 80042ac:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <Remote_Control_init+0xac>)
 80042ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042b0:	f7fc f95e 	bl	8000570 <TIMx_IC_Init>
	TIMx_IC_Start(config);
 80042b4:	4b02      	ldr	r3, [pc, #8]	; (80042c0 <Remote_Control_init+0xac>)
 80042b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042b8:	f7fc fa1a 	bl	80006f0 <TIMx_IC_Start>
	config.GPIO_Pinx= IC_5_GPIO_PIN;
	config.GPIO_AlternateFunctionx = IC_5_GPIO_AF;
	TIMx_IC_Init(config);
	TIMx_IC_Start(config);
#endif
}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000e00 	.word	0x20000e00
 80042c4:	40012c00 	.word	0x40012c00
 80042c8:	40013400 	.word	0x40013400
 80042cc:	48000800 	.word	0x48000800

080042d0 <Init_Wheel_Speed_Provision>:
volatile uint32_t Enc1_value;
volatile uint32_t Enc1_value_old;
volatile uint32_t Enc1_diff;

void Init_Wheel_Speed_Provision(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af02      	add	r7, sp, #8
	TIM_ENC_Typedef TIM_handler = {0};
 80042d6:	463b      	mov	r3, r7
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	60da      	str	r2, [r3, #12]
 80042e2:	611a      	str	r2, [r3, #16]
 80042e4:	615a      	str	r2, [r3, #20]

	#ifdef MOTOR1
		TIM_handler.TIMx = ENC_1A_TIM;
 80042e6:	4b16      	ldr	r3, [pc, #88]	; (8004340 <Init_Wheel_Speed_Provision+0x70>)
 80042e8:	603b      	str	r3, [r7, #0]
		TIM_handler.TIM_channelx = ENC_1A_TIM_CHANNEL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	80bb      	strh	r3, [r7, #4]
		TIM_handler.GPIOx_ch1 = ENC_1A_GPIO;
 80042ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042f2:	60bb      	str	r3, [r7, #8]
		TIM_handler.GPIOx_ch2 = ENC_1B_GPIO;
 80042f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042f8:	60fb      	str	r3, [r7, #12]
		TIM_handler.GPIO_Pinx_ch1 = ENC_1A_GPIO_PIN;
 80042fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042fe:	823b      	strh	r3, [r7, #16]
		TIM_handler.GPIO_Pinx_ch2 = ENC_1B_GPIO_PIN;
 8004300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004304:	827b      	strh	r3, [r7, #18]
		TIM_handler.GPIO_AlternateFunctionx = ENC_1A_GPIO_AF;
 8004306:	2301      	movs	r3, #1
 8004308:	753b      	strb	r3, [r7, #20]

		TIMx_ENC_Init(TIM_handler);
 800430a:	466a      	mov	r2, sp
 800430c:	f107 0310 	add.w	r3, r7, #16
 8004310:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004314:	e882 0003 	stmia.w	r2, {r0, r1}
 8004318:	463b      	mov	r3, r7
 800431a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800431c:	f7fc fb44 	bl	80009a8 <TIMx_ENC_Init>
		TIMx_ENC_Start(TIM_handler);
 8004320:	466a      	mov	r2, sp
 8004322:	f107 0310 	add.w	r3, r7, #16
 8004326:	e893 0003 	ldmia.w	r3, {r0, r1}
 800432a:	e882 0003 	stmia.w	r2, {r0, r1}
 800432e:	463b      	mov	r3, r7
 8004330:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004332:	f7fc fc71 	bl	8000c18 <TIMx_ENC_Start>
		TIM_handler.GPIO_AlternateFunctionx = ENC_2A_GPIO_AF;

		TIMx_ENC_Init(TIM_handler);
		TIMx_ENC_Start(TIM_handler);
	#endif
}
 8004336:	bf00      	nop
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40012c00 	.word	0x40012c00

08004344 <Provide_Wheel_Speeds>:


void Provide_Wheel_Speeds(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
	WheelSpeed_Typedef Provided_wheel_speeds;
	uint32_t temp_old;
	uint32_t temp_new;
	uint32_t temp_diff;
	Enc1_value_old = Enc1_value;
 800434a:	4b3f      	ldr	r3, [pc, #252]	; (8004448 <Provide_Wheel_Speeds+0x104>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3f      	ldr	r2, [pc, #252]	; (800444c <Provide_Wheel_Speeds+0x108>)
 8004350:	6013      	str	r3, [r2, #0]
	temp_old= Enc1_value_old;
 8004352:	4b3e      	ldr	r3, [pc, #248]	; (800444c <Provide_Wheel_Speeds+0x108>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	61fb      	str	r3, [r7, #28]
	Enc1_value = ENC_1_TIM_CNT;
 8004358:	4b3d      	ldr	r3, [pc, #244]	; (8004450 <Provide_Wheel_Speeds+0x10c>)
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	4a3a      	ldr	r2, [pc, #232]	; (8004448 <Provide_Wheel_Speeds+0x104>)
 800435e:	6013      	str	r3, [r2, #0]
	temp_new=Enc1_value;
 8004360:	4b39      	ldr	r3, [pc, #228]	; (8004448 <Provide_Wheel_Speeds+0x104>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	61bb      	str	r3, [r7, #24]
	if((ENC_1_TIM_DIR == FORWARD_DIR) && (Enc1_value < Enc1_value_old))
 8004366:	4b3a      	ldr	r3, [pc, #232]	; (8004450 <Provide_Wheel_Speeds+0x10c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	2b00      	cmp	r3, #0
 8004370:	d110      	bne.n	8004394 <Provide_Wheel_Speeds+0x50>
 8004372:	4b35      	ldr	r3, [pc, #212]	; (8004448 <Provide_Wheel_Speeds+0x104>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b35      	ldr	r3, [pc, #212]	; (800444c <Provide_Wheel_Speeds+0x108>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d20a      	bcs.n	8004394 <Provide_Wheel_Speeds+0x50>
	{
		Enc1_diff = Enc1_value - (0xFFFF - Enc1_value_old);
 800437e:	4b33      	ldr	r3, [pc, #204]	; (800444c <Provide_Wheel_Speeds+0x108>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b31      	ldr	r3, [pc, #196]	; (8004448 <Provide_Wheel_Speeds+0x104>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4413      	add	r3, r2
 8004388:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800438c:	3bff      	subs	r3, #255	; 0xff
 800438e:	4a31      	ldr	r2, [pc, #196]	; (8004454 <Provide_Wheel_Speeds+0x110>)
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e02b      	b.n	80043ec <Provide_Wheel_Speeds+0xa8>
	}
	else if((ENC_1_TIM_DIR == BACKWARD_DIR) && (Enc1_value > Enc1_value_old))
 8004394:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <Provide_Wheel_Speeds+0x10c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b10      	cmp	r3, #16
 800439e:	d110      	bne.n	80043c2 <Provide_Wheel_Speeds+0x7e>
 80043a0:	4b29      	ldr	r3, [pc, #164]	; (8004448 <Provide_Wheel_Speeds+0x104>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4b29      	ldr	r3, [pc, #164]	; (800444c <Provide_Wheel_Speeds+0x108>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d90a      	bls.n	80043c2 <Provide_Wheel_Speeds+0x7e>
	{
		Enc1_diff = Enc1_value_old - (0xFFFF - Enc1_value);
 80043ac:	4b26      	ldr	r3, [pc, #152]	; (8004448 <Provide_Wheel_Speeds+0x104>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b26      	ldr	r3, [pc, #152]	; (800444c <Provide_Wheel_Speeds+0x108>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80043ba:	3bff      	subs	r3, #255	; 0xff
 80043bc:	4a25      	ldr	r2, [pc, #148]	; (8004454 <Provide_Wheel_Speeds+0x110>)
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	e014      	b.n	80043ec <Provide_Wheel_Speeds+0xa8>
	}
	else if(ENC_1_TIM_DIR == BACKWARD_DIR)
 80043c2:	4b23      	ldr	r3, [pc, #140]	; (8004450 <Provide_Wheel_Speeds+0x10c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b10      	cmp	r3, #16
 80043cc:	d107      	bne.n	80043de <Provide_Wheel_Speeds+0x9a>
	{
		Enc1_diff = Enc1_value_old - Enc1_value;
 80043ce:	4b1f      	ldr	r3, [pc, #124]	; (800444c <Provide_Wheel_Speeds+0x108>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <Provide_Wheel_Speeds+0x104>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <Provide_Wheel_Speeds+0x110>)
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e006      	b.n	80043ec <Provide_Wheel_Speeds+0xa8>
	}
	else
	{
		Enc1_diff = Enc1_value - Enc1_value_old;
 80043de:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <Provide_Wheel_Speeds+0x104>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4b1a      	ldr	r3, [pc, #104]	; (800444c <Provide_Wheel_Speeds+0x108>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	4a1a      	ldr	r2, [pc, #104]	; (8004454 <Provide_Wheel_Speeds+0x110>)
 80043ea:	6013      	str	r3, [r2, #0]
	}

	temp_diff= Enc1_diff;
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <Provide_Wheel_Speeds+0x110>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	617b      	str	r3, [r7, #20]
	Provided_wheel_speeds.WheelSpeed_1= (float)((2*(float)Enc1_diff*M_PI)/(ENCODER_COUNT*MOT_TO_WHEEL_RATIO*(float)0.01))*RAD_PER_S_TO_RPM;
 80043f2:	4b18      	ldr	r3, [pc, #96]	; (8004454 <Provide_Wheel_Speeds+0x110>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004402:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004458 <Provide_Wheel_Speeds+0x114>
 8004406:	ee27 7a87 	vmul.f32	s14, s15, s14
 800440a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800440e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004412:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800445c <Provide_Wheel_Speeds+0x118>
 8004416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800441a:	edc7 7a01 	vstr	s15, [r7, #4]

	if(ENC_1_TIM_DIR == BACKWARD_DIR)
 800441e:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <Provide_Wheel_Speeds+0x10c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b10      	cmp	r3, #16
 8004428:	d105      	bne.n	8004436 <Provide_Wheel_Speeds+0xf2>
	{
		Provided_wheel_speeds.WheelSpeed_1 = Provided_wheel_speeds.WheelSpeed_1 * -1;
 800442a:	edd7 7a01 	vldr	s15, [r7, #4]
 800442e:	eef1 7a67 	vneg.f32	s15, s15
 8004432:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	Write_Provided_Wheel_Speeds(&Provided_wheel_speeds);
 8004436:	1d3b      	adds	r3, r7, #4
 8004438:	4618      	mov	r0, r3
 800443a:	f001 fac9 	bl	80059d0 <Write_Provided_Wheel_Speeds>
}
 800443e:	bf00      	nop
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000e18 	.word	0x20000e18
 800444c:	20000e14 	.word	0x20000e14
 8004450:	40012c00 	.word	0x40012c00
 8004454:	20000e10 	.word	0x20000e10
 8004458:	40490fdb 	.word	0x40490fdb
 800445c:	4118c9eb 	.word	0x4118c9eb

08004460 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800446e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004472:	2b84      	cmp	r3, #132	; 0x84
 8004474:	d005      	beq.n	8004482 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004476:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4413      	add	r3, r2
 800447e:	3303      	adds	r3, #3
 8004480:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004482:	68fb      	ldr	r3, [r7, #12]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004494:	f000 fa82 	bl	800499c <vTaskStartScheduler>
  
  return osOK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	bd80      	pop	{r7, pc}

0800449e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800449e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a0:	b087      	sub	sp, #28
 80044a2:	af02      	add	r7, sp, #8
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685c      	ldr	r4, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044b4:	b29e      	uxth	r6, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ffcf 	bl	8004460 <makeFreeRtosPriority>
 80044c2:	4602      	mov	r2, r0
 80044c4:	f107 030c 	add.w	r3, r7, #12
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	9200      	str	r2, [sp, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	4632      	mov	r2, r6
 80044d0:	4629      	mov	r1, r5
 80044d2:	4620      	mov	r0, r4
 80044d4:	f000 f8be 	bl	8004654 <xTaskCreate>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d001      	beq.n	80044e2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	e000      	b.n	80044e4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80044e2:	68fb      	ldr	r3, [r7, #12]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f103 0208 	add.w	r2, r3, #8
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004504:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f103 0208 	add.w	r2, r3, #8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f103 0208 	add.w	r2, r3, #8
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004546:	b480      	push	{r7}
 8004548:	b085      	sub	sp, #20
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	601a      	str	r2, [r3, #0]
}
 8004582:	bf00      	nop
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a4:	d103      	bne.n	80045ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	e00c      	b.n	80045c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3308      	adds	r3, #8
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	e002      	b.n	80045bc <vListInsert+0x2e>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d2f6      	bcs.n	80045b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	601a      	str	r2, [r3, #0]
}
 80045f4:	bf00      	nop
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6892      	ldr	r2, [r2, #8]
 8004616:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6852      	ldr	r2, [r2, #4]
 8004620:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	429a      	cmp	r2, r3
 800462a:	d103      	bne.n	8004634 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	1e5a      	subs	r2, r3, #1
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08c      	sub	sp, #48	; 0x30
 8004658:	af04      	add	r7, sp, #16
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fed3 	bl	8005414 <pvPortMalloc>
 800466e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00e      	beq.n	8004694 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004676:	2054      	movs	r0, #84	; 0x54
 8004678:	f000 fecc 	bl	8005414 <pvPortMalloc>
 800467c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	631a      	str	r2, [r3, #48]	; 0x30
 800468a:	e005      	b.n	8004698 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800468c:	6978      	ldr	r0, [r7, #20]
 800468e:	f000 ff83 	bl	8005598 <vPortFree>
 8004692:	e001      	b.n	8004698 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d013      	beq.n	80046c6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	2300      	movs	r3, #0
 80046a2:	9303      	str	r3, [sp, #12]
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	9302      	str	r3, [sp, #8]
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f80e 	bl	80046d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046ba:	69f8      	ldr	r0, [r7, #28]
 80046bc:	f000 f88a 	bl	80047d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046c0:	2301      	movs	r3, #1
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	e002      	b.n	80046cc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046cc:	69bb      	ldr	r3, [r7, #24]
	}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b088      	sub	sp, #32
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046ee:	3b01      	subs	r3, #1
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f023 0307 	bic.w	r3, r3, #7
 80046fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	2b00      	cmp	r3, #0
 8004706:	d009      	beq.n	800471c <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	e7fe      	b.n	800471a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800471c:	2300      	movs	r3, #0
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	e012      	b.n	8004748 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	4413      	add	r3, r2
 8004728:	7819      	ldrb	r1, [r3, #0]
 800472a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	4413      	add	r3, r2
 8004730:	3334      	adds	r3, #52	; 0x34
 8004732:	460a      	mov	r2, r1
 8004734:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d006      	beq.n	8004750 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3301      	adds	r3, #1
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	2b0f      	cmp	r3, #15
 800474c:	d9e9      	bls.n	8004722 <prvInitialiseNewTask+0x4c>
 800474e:	e000      	b.n	8004752 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004750:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	2b06      	cmp	r3, #6
 800475e:	d901      	bls.n	8004764 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004760:	2306      	movs	r3, #6
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004768:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800476e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	2200      	movs	r2, #0
 8004774:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	3304      	adds	r3, #4
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fed6 	bl	800452c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	3318      	adds	r3, #24
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fed1 	bl	800452c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	f1c3 0207 	rsb	r2, r3, #7
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800479e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	2200      	movs	r2, #0
 80047a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	68f9      	ldr	r1, [r7, #12]
 80047b2:	69b8      	ldr	r0, [r7, #24]
 80047b4:	f000 fc28 	bl	8005008 <pxPortInitialiseStack>
 80047b8:	4602      	mov	r2, r0
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80047be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047ca:	bf00      	nop
 80047cc:	3720      	adds	r7, #32
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047dc:	f000 fd3e 	bl	800525c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047e0:	4b2a      	ldr	r3, [pc, #168]	; (800488c <prvAddNewTaskToReadyList+0xb8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	4a29      	ldr	r2, [pc, #164]	; (800488c <prvAddNewTaskToReadyList+0xb8>)
 80047e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047ea:	4b29      	ldr	r3, [pc, #164]	; (8004890 <prvAddNewTaskToReadyList+0xbc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047f2:	4a27      	ldr	r2, [pc, #156]	; (8004890 <prvAddNewTaskToReadyList+0xbc>)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047f8:	4b24      	ldr	r3, [pc, #144]	; (800488c <prvAddNewTaskToReadyList+0xb8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d110      	bne.n	8004822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004800:	f000 fafa 	bl	8004df8 <prvInitialiseTaskLists>
 8004804:	e00d      	b.n	8004822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004806:	4b23      	ldr	r3, [pc, #140]	; (8004894 <prvAddNewTaskToReadyList+0xc0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800480e:	4b20      	ldr	r3, [pc, #128]	; (8004890 <prvAddNewTaskToReadyList+0xbc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	429a      	cmp	r2, r3
 800481a:	d802      	bhi.n	8004822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800481c:	4a1c      	ldr	r2, [pc, #112]	; (8004890 <prvAddNewTaskToReadyList+0xbc>)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004822:	4b1d      	ldr	r3, [pc, #116]	; (8004898 <prvAddNewTaskToReadyList+0xc4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3301      	adds	r3, #1
 8004828:	4a1b      	ldr	r2, [pc, #108]	; (8004898 <prvAddNewTaskToReadyList+0xc4>)
 800482a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	2201      	movs	r2, #1
 8004832:	409a      	lsls	r2, r3
 8004834:	4b19      	ldr	r3, [pc, #100]	; (800489c <prvAddNewTaskToReadyList+0xc8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4313      	orrs	r3, r2
 800483a:	4a18      	ldr	r2, [pc, #96]	; (800489c <prvAddNewTaskToReadyList+0xc8>)
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004842:	4613      	mov	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <prvAddNewTaskToReadyList+0xcc>)
 800484c:	441a      	add	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3304      	adds	r3, #4
 8004852:	4619      	mov	r1, r3
 8004854:	4610      	mov	r0, r2
 8004856:	f7ff fe76 	bl	8004546 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800485a:	f000 fd2d 	bl	80052b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800485e:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <prvAddNewTaskToReadyList+0xc0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00e      	beq.n	8004884 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004866:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <prvAddNewTaskToReadyList+0xbc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	429a      	cmp	r2, r3
 8004872:	d207      	bcs.n	8004884 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <prvAddNewTaskToReadyList+0xd0>)
 8004876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20000190 	.word	0x20000190
 8004890:	20000090 	.word	0x20000090
 8004894:	2000019c 	.word	0x2000019c
 8004898:	200001ac 	.word	0x200001ac
 800489c:	20000198 	.word	0x20000198
 80048a0:	20000094 	.word	0x20000094
 80048a4:	e000ed04 	.word	0xe000ed04

080048a8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08a      	sub	sp, #40	; 0x28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <vTaskDelayUntil+0x28>
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	e7fe      	b.n	80048ce <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <vTaskDelayUntil+0x42>
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	e7fe      	b.n	80048e8 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80048ea:	4b29      	ldr	r3, [pc, #164]	; (8004990 <vTaskDelayUntil+0xe8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <vTaskDelayUntil+0x5e>
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e7fe      	b.n	8004904 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8004906:	f000 f88f 	bl	8004a28 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800490a:	4b22      	ldr	r3, [pc, #136]	; (8004994 <vTaskDelayUntil+0xec>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	4413      	add	r3, r2
 8004918:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6a3a      	ldr	r2, [r7, #32]
 8004920:	429a      	cmp	r2, r3
 8004922:	d20b      	bcs.n	800493c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	429a      	cmp	r2, r3
 800492c:	d211      	bcs.n	8004952 <vTaskDelayUntil+0xaa>
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	429a      	cmp	r2, r3
 8004934:	d90d      	bls.n	8004952 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8004936:	2301      	movs	r3, #1
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
 800493a:	e00a      	b.n	8004952 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	429a      	cmp	r2, r3
 8004944:	d303      	bcc.n	800494e <vTaskDelayUntil+0xa6>
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	429a      	cmp	r2, r3
 800494c:	d901      	bls.n	8004952 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800494e:	2301      	movs	r3, #1
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	d006      	beq.n	800496c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fae8 	bl	8004f3c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800496c:	f000 f86a 	bl	8004a44 <xTaskResumeAll>
 8004970:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d107      	bne.n	8004988 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8004978:	4b07      	ldr	r3, [pc, #28]	; (8004998 <vTaskDelayUntil+0xf0>)
 800497a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004988:	bf00      	nop
 800498a:	3728      	adds	r7, #40	; 0x28
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	200001b8 	.word	0x200001b8
 8004994:	20000194 	.word	0x20000194
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80049a2:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <vTaskStartScheduler+0x74>)
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	2300      	movs	r3, #0
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	2300      	movs	r3, #0
 80049ac:	2280      	movs	r2, #128	; 0x80
 80049ae:	4919      	ldr	r1, [pc, #100]	; (8004a14 <vTaskStartScheduler+0x78>)
 80049b0:	4819      	ldr	r0, [pc, #100]	; (8004a18 <vTaskStartScheduler+0x7c>)
 80049b2:	f7ff fe4f 	bl	8004654 <xTaskCreate>
 80049b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d115      	bne.n	80049ea <vTaskStartScheduler+0x4e>
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049d0:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <vTaskStartScheduler+0x80>)
 80049d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049d8:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <vTaskStartScheduler+0x84>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80049de:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <vTaskStartScheduler+0x88>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049e4:	f000 fb9c 	bl	8005120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049e8:	e00d      	b.n	8004a06 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f0:	d109      	bne.n	8004a06 <vTaskStartScheduler+0x6a>
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	607b      	str	r3, [r7, #4]
 8004a04:	e7fe      	b.n	8004a04 <vTaskStartScheduler+0x68>
}
 8004a06:	bf00      	nop
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	200001b4 	.word	0x200001b4
 8004a14:	0800690c 	.word	0x0800690c
 8004a18:	08004dc9 	.word	0x08004dc9
 8004a1c:	200001b0 	.word	0x200001b0
 8004a20:	2000019c 	.word	0x2000019c
 8004a24:	20000194 	.word	0x20000194

08004a28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <vTaskSuspendAll+0x18>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	4a03      	ldr	r2, [pc, #12]	; (8004a40 <vTaskSuspendAll+0x18>)
 8004a34:	6013      	str	r3, [r2, #0]
}
 8004a36:	bf00      	nop
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	200001b8 	.word	0x200001b8

08004a44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a52:	4b41      	ldr	r3, [pc, #260]	; (8004b58 <xTaskResumeAll+0x114>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <xTaskResumeAll+0x2a>
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	e7fe      	b.n	8004a6c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a6e:	f000 fbf5 	bl	800525c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a72:	4b39      	ldr	r3, [pc, #228]	; (8004b58 <xTaskResumeAll+0x114>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	4a37      	ldr	r2, [pc, #220]	; (8004b58 <xTaskResumeAll+0x114>)
 8004a7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a7c:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <xTaskResumeAll+0x114>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d161      	bne.n	8004b48 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a84:	4b35      	ldr	r3, [pc, #212]	; (8004b5c <xTaskResumeAll+0x118>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d05d      	beq.n	8004b48 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a8c:	e02e      	b.n	8004aec <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004a8e:	4b34      	ldr	r3, [pc, #208]	; (8004b60 <xTaskResumeAll+0x11c>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3318      	adds	r3, #24
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fdb0 	bl	8004600 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fdab 	bl	8004600 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	2201      	movs	r2, #1
 8004ab0:	409a      	lsls	r2, r3
 8004ab2:	4b2c      	ldr	r3, [pc, #176]	; (8004b64 <xTaskResumeAll+0x120>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	4a2a      	ldr	r2, [pc, #168]	; (8004b64 <xTaskResumeAll+0x120>)
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <xTaskResumeAll+0x124>)
 8004aca:	441a      	add	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f7ff fd37 	bl	8004546 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004adc:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <xTaskResumeAll+0x128>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d302      	bcc.n	8004aec <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004ae6:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <xTaskResumeAll+0x12c>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aec:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <xTaskResumeAll+0x11c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1cc      	bne.n	8004a8e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004afa:	f000 f9f9 	bl	8004ef0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004afe:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <xTaskResumeAll+0x130>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d010      	beq.n	8004b2c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b0a:	f000 f847 	bl	8004b9c <xTaskIncrementTick>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004b14:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <xTaskResumeAll+0x12c>)
 8004b16:	2201      	movs	r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f1      	bne.n	8004b0a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004b26:	4b13      	ldr	r3, [pc, #76]	; (8004b74 <xTaskResumeAll+0x130>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b2c:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <xTaskResumeAll+0x12c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d009      	beq.n	8004b48 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b34:	2301      	movs	r3, #1
 8004b36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b38:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <xTaskResumeAll+0x134>)
 8004b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b48:	f000 fbb6 	bl	80052b8 <vPortExitCritical>

	return xAlreadyYielded;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	200001b8 	.word	0x200001b8
 8004b5c:	20000190 	.word	0x20000190
 8004b60:	20000150 	.word	0x20000150
 8004b64:	20000198 	.word	0x20000198
 8004b68:	20000094 	.word	0x20000094
 8004b6c:	20000090 	.word	0x20000090
 8004b70:	200001a4 	.word	0x200001a4
 8004b74:	200001a0 	.word	0x200001a0
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <xTaskGetTickCount+0x1c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b88:	687b      	ldr	r3, [r7, #4]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000194 	.word	0x20000194

08004b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba6:	4b50      	ldr	r3, [pc, #320]	; (8004ce8 <xTaskIncrementTick+0x14c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f040 808c 	bne.w	8004cc8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bb0:	4b4e      	ldr	r3, [pc, #312]	; (8004cec <xTaskIncrementTick+0x150>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bb8:	4a4c      	ldr	r2, [pc, #304]	; (8004cec <xTaskIncrementTick+0x150>)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d11f      	bne.n	8004c04 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bc4:	4b4a      	ldr	r3, [pc, #296]	; (8004cf0 <xTaskIncrementTick+0x154>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <xTaskIncrementTick+0x46>
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	e7fe      	b.n	8004be0 <xTaskIncrementTick+0x44>
 8004be2:	4b43      	ldr	r3, [pc, #268]	; (8004cf0 <xTaskIncrementTick+0x154>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	4b42      	ldr	r3, [pc, #264]	; (8004cf4 <xTaskIncrementTick+0x158>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a40      	ldr	r2, [pc, #256]	; (8004cf0 <xTaskIncrementTick+0x154>)
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	4a40      	ldr	r2, [pc, #256]	; (8004cf4 <xTaskIncrementTick+0x158>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4b40      	ldr	r3, [pc, #256]	; (8004cf8 <xTaskIncrementTick+0x15c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	4a3e      	ldr	r2, [pc, #248]	; (8004cf8 <xTaskIncrementTick+0x15c>)
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	f000 f976 	bl	8004ef0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c04:	4b3d      	ldr	r3, [pc, #244]	; (8004cfc <xTaskIncrementTick+0x160>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d34d      	bcc.n	8004caa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c0e:	4b38      	ldr	r3, [pc, #224]	; (8004cf0 <xTaskIncrementTick+0x154>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <xTaskIncrementTick+0x80>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <xTaskIncrementTick+0x82>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d004      	beq.n	8004c2c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c22:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <xTaskIncrementTick+0x160>)
 8004c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c28:	601a      	str	r2, [r3, #0]
					break;
 8004c2a:	e03e      	b.n	8004caa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c2c:	4b30      	ldr	r3, [pc, #192]	; (8004cf0 <xTaskIncrementTick+0x154>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d203      	bcs.n	8004c4c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c44:	4a2d      	ldr	r2, [pc, #180]	; (8004cfc <xTaskIncrementTick+0x160>)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6013      	str	r3, [r2, #0]
						break;
 8004c4a:	e02e      	b.n	8004caa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fcd5 	bl	8004600 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	3318      	adds	r3, #24
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fccc 	bl	8004600 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <xTaskIncrementTick+0x164>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <xTaskIncrementTick+0x164>)
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <xTaskIncrementTick+0x168>)
 8004c88:	441a      	add	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f7ff fc58 	bl	8004546 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <xTaskIncrementTick+0x16c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d3b4      	bcc.n	8004c0e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca8:	e7b1      	b.n	8004c0e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004caa:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <xTaskIncrementTick+0x16c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb0:	4914      	ldr	r1, [pc, #80]	; (8004d04 <xTaskIncrementTick+0x168>)
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d907      	bls.n	8004cd2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	e004      	b.n	8004cd2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004cc8:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <xTaskIncrementTick+0x170>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	4a0f      	ldr	r2, [pc, #60]	; (8004d0c <xTaskIncrementTick+0x170>)
 8004cd0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <xTaskIncrementTick+0x174>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cde:	697b      	ldr	r3, [r7, #20]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	200001b8 	.word	0x200001b8
 8004cec:	20000194 	.word	0x20000194
 8004cf0:	20000148 	.word	0x20000148
 8004cf4:	2000014c 	.word	0x2000014c
 8004cf8:	200001a8 	.word	0x200001a8
 8004cfc:	200001b0 	.word	0x200001b0
 8004d00:	20000198 	.word	0x20000198
 8004d04:	20000094 	.word	0x20000094
 8004d08:	20000090 	.word	0x20000090
 8004d0c:	200001a0 	.word	0x200001a0
 8004d10:	200001a4 	.word	0x200001a4

08004d14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d1a:	4b26      	ldr	r3, [pc, #152]	; (8004db4 <vTaskSwitchContext+0xa0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d22:	4b25      	ldr	r3, [pc, #148]	; (8004db8 <vTaskSwitchContext+0xa4>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d28:	e03e      	b.n	8004da8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004d2a:	4b23      	ldr	r3, [pc, #140]	; (8004db8 <vTaskSwitchContext+0xa4>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004d30:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <vTaskSwitchContext+0xa8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	fab3 f383 	clz	r3, r3
 8004d3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d3e:	7afb      	ldrb	r3, [r7, #11]
 8004d40:	f1c3 031f 	rsb	r3, r3, #31
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	491e      	ldr	r1, [pc, #120]	; (8004dc0 <vTaskSwitchContext+0xac>)
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <vTaskSwitchContext+0x5a>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	e7fe      	b.n	8004d6c <vTaskSwitchContext+0x58>
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4a11      	ldr	r2, [pc, #68]	; (8004dc0 <vTaskSwitchContext+0xac>)
 8004d7a:	4413      	add	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	605a      	str	r2, [r3, #4]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	3308      	adds	r3, #8
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d104      	bne.n	8004d9e <vTaskSwitchContext+0x8a>
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	605a      	str	r2, [r3, #4]
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	4a07      	ldr	r2, [pc, #28]	; (8004dc4 <vTaskSwitchContext+0xb0>)
 8004da6:	6013      	str	r3, [r2, #0]
}
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	200001b8 	.word	0x200001b8
 8004db8:	200001a4 	.word	0x200001a4
 8004dbc:	20000198 	.word	0x20000198
 8004dc0:	20000094 	.word	0x20000094
 8004dc4:	20000090 	.word	0x20000090

08004dc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dd0:	f000 f852 	bl	8004e78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <prvIdleTask+0x28>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d9f9      	bls.n	8004dd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <prvIdleTask+0x2c>)
 8004dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dec:	e7f0      	b.n	8004dd0 <prvIdleTask+0x8>
 8004dee:	bf00      	nop
 8004df0:	20000094 	.word	0x20000094
 8004df4:	e000ed04 	.word	0xe000ed04

08004df8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dfe:	2300      	movs	r3, #0
 8004e00:	607b      	str	r3, [r7, #4]
 8004e02:	e00c      	b.n	8004e1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4a12      	ldr	r2, [pc, #72]	; (8004e58 <prvInitialiseTaskLists+0x60>)
 8004e10:	4413      	add	r3, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fb6a 	bl	80044ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b06      	cmp	r3, #6
 8004e22:	d9ef      	bls.n	8004e04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e24:	480d      	ldr	r0, [pc, #52]	; (8004e5c <prvInitialiseTaskLists+0x64>)
 8004e26:	f7ff fb61 	bl	80044ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e2a:	480d      	ldr	r0, [pc, #52]	; (8004e60 <prvInitialiseTaskLists+0x68>)
 8004e2c:	f7ff fb5e 	bl	80044ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e30:	480c      	ldr	r0, [pc, #48]	; (8004e64 <prvInitialiseTaskLists+0x6c>)
 8004e32:	f7ff fb5b 	bl	80044ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e36:	480c      	ldr	r0, [pc, #48]	; (8004e68 <prvInitialiseTaskLists+0x70>)
 8004e38:	f7ff fb58 	bl	80044ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e3c:	480b      	ldr	r0, [pc, #44]	; (8004e6c <prvInitialiseTaskLists+0x74>)
 8004e3e:	f7ff fb55 	bl	80044ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e42:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <prvInitialiseTaskLists+0x78>)
 8004e44:	4a05      	ldr	r2, [pc, #20]	; (8004e5c <prvInitialiseTaskLists+0x64>)
 8004e46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <prvInitialiseTaskLists+0x7c>)
 8004e4a:	4a05      	ldr	r2, [pc, #20]	; (8004e60 <prvInitialiseTaskLists+0x68>)
 8004e4c:	601a      	str	r2, [r3, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000094 	.word	0x20000094
 8004e5c:	20000120 	.word	0x20000120
 8004e60:	20000134 	.word	0x20000134
 8004e64:	20000150 	.word	0x20000150
 8004e68:	20000164 	.word	0x20000164
 8004e6c:	2000017c 	.word	0x2000017c
 8004e70:	20000148 	.word	0x20000148
 8004e74:	2000014c 	.word	0x2000014c

08004e78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e7e:	e019      	b.n	8004eb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e80:	f000 f9ec 	bl	800525c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e84:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <prvCheckTasksWaitingTermination+0x4c>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fbb5 	bl	8004600 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <prvCheckTasksWaitingTermination+0x50>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	4a0a      	ldr	r2, [pc, #40]	; (8004ec8 <prvCheckTasksWaitingTermination+0x50>)
 8004e9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <prvCheckTasksWaitingTermination+0x54>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <prvCheckTasksWaitingTermination+0x54>)
 8004ea8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004eaa:	f000 fa05 	bl	80052b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f80e 	bl	8004ed0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <prvCheckTasksWaitingTermination+0x54>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e1      	bne.n	8004e80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000164 	.word	0x20000164
 8004ec8:	20000190 	.word	0x20000190
 8004ecc:	20000178 	.word	0x20000178

08004ed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fb5b 	bl	8005598 <vPortFree>
			vPortFree( pxTCB );
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fb58 	bl	8005598 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <prvResetNextTaskUnblockTime+0x44>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <prvResetNextTaskUnblockTime+0x14>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <prvResetNextTaskUnblockTime+0x16>
 8004f04:	2300      	movs	r3, #0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <prvResetNextTaskUnblockTime+0x48>)
 8004f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f10:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f12:	e008      	b.n	8004f26 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f14:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <prvResetNextTaskUnblockTime+0x44>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	4a05      	ldr	r2, [pc, #20]	; (8004f38 <prvResetNextTaskUnblockTime+0x48>)
 8004f24:	6013      	str	r3, [r2, #0]
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20000148 	.word	0x20000148
 8004f38:	200001b0 	.word	0x200001b0

08004f3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f46:	4b29      	ldr	r3, [pc, #164]	; (8004fec <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f4c:	4b28      	ldr	r3, [pc, #160]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3304      	adds	r3, #4
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff fb54 	bl	8004600 <uxListRemove>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10b      	bne.n	8004f76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004f5e:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	2201      	movs	r2, #1
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43da      	mvns	r2, r3
 8004f6c:	4b21      	ldr	r3, [pc, #132]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4013      	ands	r3, r2
 8004f72:	4a20      	ldr	r2, [pc, #128]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f7c:	d10a      	bne.n	8004f94 <prvAddCurrentTaskToDelayedList+0x58>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f84:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	481a      	ldr	r0, [pc, #104]	; (8004ff8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f8e:	f7ff fada 	bl	8004546 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f92:	e026      	b.n	8004fe2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f9c:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d209      	bcs.n	8004fc0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fac:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f7ff fae8 	bl	800458e <vListInsert>
}
 8004fbe:	e010      	b.n	8004fe2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f7ff fade 	bl	800458e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d202      	bcs.n	8004fe2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004fdc:	4a09      	ldr	r2, [pc, #36]	; (8005004 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	6013      	str	r3, [r2, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20000194 	.word	0x20000194
 8004ff0:	20000090 	.word	0x20000090
 8004ff4:	20000198 	.word	0x20000198
 8004ff8:	2000017c 	.word	0x2000017c
 8004ffc:	2000014c 	.word	0x2000014c
 8005000:	20000148 	.word	0x20000148
 8005004:	200001b0 	.word	0x200001b0

08005008 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3b04      	subs	r3, #4
 8005018:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3b04      	subs	r3, #4
 8005026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f023 0201 	bic.w	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3b04      	subs	r3, #4
 8005036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005038:	4a0c      	ldr	r2, [pc, #48]	; (800506c <pxPortInitialiseStack+0x64>)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3b14      	subs	r3, #20
 8005042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3b04      	subs	r3, #4
 800504e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f06f 0202 	mvn.w	r2, #2
 8005056:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3b20      	subs	r3, #32
 800505c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800505e:	68fb      	ldr	r3, [r7, #12]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	08005071 	.word	0x08005071

08005070 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800507a:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <prvTaskExitError+0x50>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005082:	d009      	beq.n	8005098 <prvTaskExitError+0x28>
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	e7fe      	b.n	8005096 <prvTaskExitError+0x26>
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050aa:	bf00      	nop
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0fc      	beq.n	80050ac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000008 	.word	0x20000008
	...

080050d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <pxCurrentTCBConst2>)
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	6808      	ldr	r0, [r1, #0]
 80050d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050da:	f380 8809 	msr	PSP, r0
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f04f 0000 	mov.w	r0, #0
 80050e6:	f380 8811 	msr	BASEPRI, r0
 80050ea:	4770      	bx	lr
 80050ec:	f3af 8000 	nop.w

080050f0 <pxCurrentTCBConst2>:
 80050f0:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop

080050f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050f8:	4808      	ldr	r0, [pc, #32]	; (800511c <prvPortStartFirstTask+0x24>)
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	6800      	ldr	r0, [r0, #0]
 80050fe:	f380 8808 	msr	MSP, r0
 8005102:	f04f 0000 	mov.w	r0, #0
 8005106:	f380 8814 	msr	CONTROL, r0
 800510a:	b662      	cpsie	i
 800510c:	b661      	cpsie	f
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	df00      	svc	0
 8005118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800511a:	bf00      	nop
 800511c:	e000ed08 	.word	0xe000ed08

08005120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005126:	4b44      	ldr	r3, [pc, #272]	; (8005238 <xPortStartScheduler+0x118>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a44      	ldr	r2, [pc, #272]	; (800523c <xPortStartScheduler+0x11c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d109      	bne.n	8005144 <xPortStartScheduler+0x24>
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	e7fe      	b.n	8005142 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005144:	4b3c      	ldr	r3, [pc, #240]	; (8005238 <xPortStartScheduler+0x118>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a3d      	ldr	r2, [pc, #244]	; (8005240 <xPortStartScheduler+0x120>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d109      	bne.n	8005162 <xPortStartScheduler+0x42>
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e7fe      	b.n	8005160 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005162:	4b38      	ldr	r3, [pc, #224]	; (8005244 <xPortStartScheduler+0x124>)
 8005164:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	22ff      	movs	r2, #255	; 0xff
 8005172:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005184:	b2da      	uxtb	r2, r3
 8005186:	4b30      	ldr	r3, [pc, #192]	; (8005248 <xPortStartScheduler+0x128>)
 8005188:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800518a:	4b30      	ldr	r3, [pc, #192]	; (800524c <xPortStartScheduler+0x12c>)
 800518c:	2207      	movs	r2, #7
 800518e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005190:	e009      	b.n	80051a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005192:	4b2e      	ldr	r3, [pc, #184]	; (800524c <xPortStartScheduler+0x12c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3b01      	subs	r3, #1
 8005198:	4a2c      	ldr	r2, [pc, #176]	; (800524c <xPortStartScheduler+0x12c>)
 800519a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051a6:	78fb      	ldrb	r3, [r7, #3]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	2b80      	cmp	r3, #128	; 0x80
 80051b0:	d0ef      	beq.n	8005192 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051b2:	4b26      	ldr	r3, [pc, #152]	; (800524c <xPortStartScheduler+0x12c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f1c3 0307 	rsb	r3, r3, #7
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d009      	beq.n	80051d2 <xPortStartScheduler+0xb2>
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	e7fe      	b.n	80051d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051d2:	4b1e      	ldr	r3, [pc, #120]	; (800524c <xPortStartScheduler+0x12c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	021b      	lsls	r3, r3, #8
 80051d8:	4a1c      	ldr	r2, [pc, #112]	; (800524c <xPortStartScheduler+0x12c>)
 80051da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051dc:	4b1b      	ldr	r3, [pc, #108]	; (800524c <xPortStartScheduler+0x12c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051e4:	4a19      	ldr	r2, [pc, #100]	; (800524c <xPortStartScheduler+0x12c>)
 80051e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051f0:	4b17      	ldr	r3, [pc, #92]	; (8005250 <xPortStartScheduler+0x130>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a16      	ldr	r2, [pc, #88]	; (8005250 <xPortStartScheduler+0x130>)
 80051f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051fc:	4b14      	ldr	r3, [pc, #80]	; (8005250 <xPortStartScheduler+0x130>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a13      	ldr	r2, [pc, #76]	; (8005250 <xPortStartScheduler+0x130>)
 8005202:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005206:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005208:	f000 f8d6 	bl	80053b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800520c:	4b11      	ldr	r3, [pc, #68]	; (8005254 <xPortStartScheduler+0x134>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005212:	f000 f8f5 	bl	8005400 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005216:	4b10      	ldr	r3, [pc, #64]	; (8005258 <xPortStartScheduler+0x138>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a0f      	ldr	r2, [pc, #60]	; (8005258 <xPortStartScheduler+0x138>)
 800521c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005220:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005222:	f7ff ff69 	bl	80050f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005226:	f7ff fd75 	bl	8004d14 <vTaskSwitchContext>
	prvTaskExitError();
 800522a:	f7ff ff21 	bl	8005070 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	e000ed00 	.word	0xe000ed00
 800523c:	410fc271 	.word	0x410fc271
 8005240:	410fc270 	.word	0x410fc270
 8005244:	e000e400 	.word	0xe000e400
 8005248:	200001bc 	.word	0x200001bc
 800524c:	200001c0 	.word	0x200001c0
 8005250:	e000ed20 	.word	0xe000ed20
 8005254:	20000008 	.word	0x20000008
 8005258:	e000ef34 	.word	0xe000ef34

0800525c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005274:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <vPortEnterCritical+0x54>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3301      	adds	r3, #1
 800527a:	4a0d      	ldr	r2, [pc, #52]	; (80052b0 <vPortEnterCritical+0x54>)
 800527c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800527e:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <vPortEnterCritical+0x54>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d10e      	bne.n	80052a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005286:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <vPortEnterCritical+0x58>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d009      	beq.n	80052a4 <vPortEnterCritical+0x48>
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	e7fe      	b.n	80052a2 <vPortEnterCritical+0x46>
	}
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	20000008 	.word	0x20000008
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052be:	4b11      	ldr	r3, [pc, #68]	; (8005304 <vPortExitCritical+0x4c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <vPortExitCritical+0x22>
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	607b      	str	r3, [r7, #4]
 80052d8:	e7fe      	b.n	80052d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80052da:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <vPortExitCritical+0x4c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3b01      	subs	r3, #1
 80052e0:	4a08      	ldr	r2, [pc, #32]	; (8005304 <vPortExitCritical+0x4c>)
 80052e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052e4:	4b07      	ldr	r3, [pc, #28]	; (8005304 <vPortExitCritical+0x4c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <vPortExitCritical+0x3e>
 80052ec:	2300      	movs	r3, #0
 80052ee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	20000008 	.word	0x20000008
	...

08005310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005310:	f3ef 8009 	mrs	r0, PSP
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	4b15      	ldr	r3, [pc, #84]	; (8005370 <pxCurrentTCBConst>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	f01e 0f10 	tst.w	lr, #16
 8005320:	bf08      	it	eq
 8005322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532a:	6010      	str	r0, [r2, #0]
 800532c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005334:	f380 8811 	msr	BASEPRI, r0
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f7ff fce8 	bl	8004d14 <vTaskSwitchContext>
 8005344:	f04f 0000 	mov.w	r0, #0
 8005348:	f380 8811 	msr	BASEPRI, r0
 800534c:	bc09      	pop	{r0, r3}
 800534e:	6819      	ldr	r1, [r3, #0]
 8005350:	6808      	ldr	r0, [r1, #0]
 8005352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005356:	f01e 0f10 	tst.w	lr, #16
 800535a:	bf08      	it	eq
 800535c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005360:	f380 8809 	msr	PSP, r0
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	f3af 8000 	nop.w

08005370 <pxCurrentTCBConst>:
 8005370:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop

08005378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005390:	f7ff fc04 	bl	8004b9c <xTaskIncrementTick>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <SysTick_Handler+0x3c>)
 800539c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	2300      	movs	r3, #0
 80053a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <vPortSetupTimerInterrupt+0x34>)
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053c2:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <vPortSetupTimerInterrupt+0x38>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053c8:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <vPortSetupTimerInterrupt+0x3c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a0a      	ldr	r2, [pc, #40]	; (80053f8 <vPortSetupTimerInterrupt+0x40>)
 80053ce:	fba2 2303 	umull	r2, r3, r2, r3
 80053d2:	099b      	lsrs	r3, r3, #6
 80053d4:	4a09      	ldr	r2, [pc, #36]	; (80053fc <vPortSetupTimerInterrupt+0x44>)
 80053d6:	3b01      	subs	r3, #1
 80053d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053da:	4b04      	ldr	r3, [pc, #16]	; (80053ec <vPortSetupTimerInterrupt+0x34>)
 80053dc:	2207      	movs	r2, #7
 80053de:	601a      	str	r2, [r3, #0]
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	e000e010 	.word	0xe000e010
 80053f0:	e000e018 	.word	0xe000e018
 80053f4:	2000000c 	.word	0x2000000c
 80053f8:	10624dd3 	.word	0x10624dd3
 80053fc:	e000e014 	.word	0xe000e014

08005400 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005400:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005410 <vPortEnableVFP+0x10>
 8005404:	6801      	ldr	r1, [r0, #0]
 8005406:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800540a:	6001      	str	r1, [r0, #0]
 800540c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800540e:	bf00      	nop
 8005410:	e000ed88 	.word	0xe000ed88

08005414 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	; 0x28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800541c:	2300      	movs	r3, #0
 800541e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005420:	f7ff fb02 	bl	8004a28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005424:	4b57      	ldr	r3, [pc, #348]	; (8005584 <pvPortMalloc+0x170>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800542c:	f000 f90c 	bl	8005648 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005430:	4b55      	ldr	r3, [pc, #340]	; (8005588 <pvPortMalloc+0x174>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	f040 808c 	bne.w	8005556 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01c      	beq.n	800547e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005444:	2208      	movs	r2, #8
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4413      	add	r3, r2
 800544a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	2b00      	cmp	r3, #0
 8005454:	d013      	beq.n	800547e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f023 0307 	bic.w	r3, r3, #7
 800545c:	3308      	adds	r3, #8
 800545e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	2b00      	cmp	r3, #0
 8005468:	d009      	beq.n	800547e <pvPortMalloc+0x6a>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e7fe      	b.n	800547c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d068      	beq.n	8005556 <pvPortMalloc+0x142>
 8005484:	4b41      	ldr	r3, [pc, #260]	; (800558c <pvPortMalloc+0x178>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	429a      	cmp	r2, r3
 800548c:	d863      	bhi.n	8005556 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800548e:	4b40      	ldr	r3, [pc, #256]	; (8005590 <pvPortMalloc+0x17c>)
 8005490:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005492:	4b3f      	ldr	r3, [pc, #252]	; (8005590 <pvPortMalloc+0x17c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005498:	e004      	b.n	80054a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d903      	bls.n	80054b6 <pvPortMalloc+0xa2>
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f1      	bne.n	800549a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054b6:	4b33      	ldr	r3, [pc, #204]	; (8005584 <pvPortMalloc+0x170>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054bc:	429a      	cmp	r2, r3
 80054be:	d04a      	beq.n	8005556 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2208      	movs	r2, #8
 80054c6:	4413      	add	r3, r2
 80054c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	1ad2      	subs	r2, r2, r3
 80054da:	2308      	movs	r3, #8
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	429a      	cmp	r2, r3
 80054e0:	d91e      	bls.n	8005520 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4413      	add	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d009      	beq.n	8005508 <pvPortMalloc+0xf4>
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	e7fe      	b.n	8005506 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800551a:	69b8      	ldr	r0, [r7, #24]
 800551c:	f000 f8f6 	bl	800570c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005520:	4b1a      	ldr	r3, [pc, #104]	; (800558c <pvPortMalloc+0x178>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	4a18      	ldr	r2, [pc, #96]	; (800558c <pvPortMalloc+0x178>)
 800552c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800552e:	4b17      	ldr	r3, [pc, #92]	; (800558c <pvPortMalloc+0x178>)
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b18      	ldr	r3, [pc, #96]	; (8005594 <pvPortMalloc+0x180>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d203      	bcs.n	8005542 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800553a:	4b14      	ldr	r3, [pc, #80]	; (800558c <pvPortMalloc+0x178>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a15      	ldr	r2, [pc, #84]	; (8005594 <pvPortMalloc+0x180>)
 8005540:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	4b10      	ldr	r3, [pc, #64]	; (8005588 <pvPortMalloc+0x174>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	431a      	orrs	r2, r3
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005556:	f7ff fa75 	bl	8004a44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	2b00      	cmp	r3, #0
 8005562:	d009      	beq.n	8005578 <pvPortMalloc+0x164>
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e7fe      	b.n	8005576 <pvPortMalloc+0x162>
	return pvReturn;
 8005578:	69fb      	ldr	r3, [r7, #28]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3728      	adds	r7, #40	; 0x28
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000d84 	.word	0x20000d84
 8005588:	20000d90 	.word	0x20000d90
 800558c:	20000d88 	.word	0x20000d88
 8005590:	20000d7c 	.word	0x20000d7c
 8005594:	20000d8c 	.word	0x20000d8c

08005598 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d046      	beq.n	8005638 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055aa:	2308      	movs	r3, #8
 80055ac:	425b      	negs	r3, r3
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4413      	add	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	4b20      	ldr	r3, [pc, #128]	; (8005640 <vPortFree+0xa8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4013      	ands	r3, r2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <vPortFree+0x42>
 80055c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e7fe      	b.n	80055d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <vPortFree+0x5e>
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	60bb      	str	r3, [r7, #8]
 80055f4:	e7fe      	b.n	80055f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	4b11      	ldr	r3, [pc, #68]	; (8005640 <vPortFree+0xa8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4013      	ands	r3, r2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d019      	beq.n	8005638 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d115      	bne.n	8005638 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <vPortFree+0xa8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	43db      	mvns	r3, r3
 8005616:	401a      	ands	r2, r3
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800561c:	f7ff fa04 	bl	8004a28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	4b07      	ldr	r3, [pc, #28]	; (8005644 <vPortFree+0xac>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4413      	add	r3, r2
 800562a:	4a06      	ldr	r2, [pc, #24]	; (8005644 <vPortFree+0xac>)
 800562c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800562e:	6938      	ldr	r0, [r7, #16]
 8005630:	f000 f86c 	bl	800570c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005634:	f7ff fa06 	bl	8004a44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005638:	bf00      	nop
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20000d90 	.word	0x20000d90
 8005644:	20000d88 	.word	0x20000d88

08005648 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800564e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005652:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005654:	4b27      	ldr	r3, [pc, #156]	; (80056f4 <prvHeapInit+0xac>)
 8005656:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00c      	beq.n	800567c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3307      	adds	r3, #7
 8005666:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0307 	bic.w	r3, r3, #7
 800566e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	4a1f      	ldr	r2, [pc, #124]	; (80056f4 <prvHeapInit+0xac>)
 8005678:	4413      	add	r3, r2
 800567a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005680:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <prvHeapInit+0xb0>)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005686:	4b1c      	ldr	r3, [pc, #112]	; (80056f8 <prvHeapInit+0xb0>)
 8005688:	2200      	movs	r2, #0
 800568a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	4413      	add	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005694:	2208      	movs	r2, #8
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	1a9b      	subs	r3, r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0307 	bic.w	r3, r3, #7
 80056a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4a15      	ldr	r2, [pc, #84]	; (80056fc <prvHeapInit+0xb4>)
 80056a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056aa:	4b14      	ldr	r3, [pc, #80]	; (80056fc <prvHeapInit+0xb4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2200      	movs	r2, #0
 80056b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056b2:	4b12      	ldr	r3, [pc, #72]	; (80056fc <prvHeapInit+0xb4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	1ad2      	subs	r2, r2, r3
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <prvHeapInit+0xb4>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	4a0a      	ldr	r2, [pc, #40]	; (8005700 <prvHeapInit+0xb8>)
 80056d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4a09      	ldr	r2, [pc, #36]	; (8005704 <prvHeapInit+0xbc>)
 80056de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056e0:	4b09      	ldr	r3, [pc, #36]	; (8005708 <prvHeapInit+0xc0>)
 80056e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056e6:	601a      	str	r2, [r3, #0]
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	200001c4 	.word	0x200001c4
 80056f8:	20000d7c 	.word	0x20000d7c
 80056fc:	20000d84 	.word	0x20000d84
 8005700:	20000d8c 	.word	0x20000d8c
 8005704:	20000d88 	.word	0x20000d88
 8005708:	20000d90 	.word	0x20000d90

0800570c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005714:	4b28      	ldr	r3, [pc, #160]	; (80057b8 <prvInsertBlockIntoFreeList+0xac>)
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e002      	b.n	8005720 <prvInsertBlockIntoFreeList+0x14>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	429a      	cmp	r2, r3
 8005728:	d8f7      	bhi.n	800571a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	4413      	add	r3, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	429a      	cmp	r2, r3
 800573a:	d108      	bne.n	800574e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	441a      	add	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	441a      	add	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d118      	bne.n	8005794 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	4b15      	ldr	r3, [pc, #84]	; (80057bc <prvInsertBlockIntoFreeList+0xb0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d00d      	beq.n	800578a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	441a      	add	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	e008      	b.n	800579c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800578a:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <prvInsertBlockIntoFreeList+0xb0>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	e003      	b.n	800579c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d002      	beq.n	80057aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000d7c 	.word	0x20000d7c
 80057bc:	20000d84 	.word	0x20000d84

080057c0 <Read_IC_Channel1_Raw_data>:
WheelSpeed_Typedef WheelSpeedProvider_Calculated_WheelSpeeds;



void Read_IC_Channel1_Raw_data(uint32_t * data)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	(* data) = Timer_IC_Channel1_Raw_data;
 80057c8:	4b04      	ldr	r3, [pc, #16]	; (80057dc <Read_IC_Channel1_Raw_data+0x1c>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	601a      	str	r2, [r3, #0]
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	20000e20 	.word	0x20000e20

080057e0 <Write_IC_Channel1_Raw_data>:

void Write_IC_Channel1_Raw_data(uint32_t * data)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel1_Raw_data = (* data);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a03      	ldr	r2, [pc, #12]	; (80057fc <Write_IC_Channel1_Raw_data+0x1c>)
 80057ee:	6013      	str	r3, [r2, #0]
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	20000e20 	.word	0x20000e20

08005800 <Read_IC_Channel2_Raw_data>:

void Read_IC_Channel2_Raw_data(uint32_t * data)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	(* data) = Timer_IC_Channel2_Raw_data;
 8005808:	4b04      	ldr	r3, [pc, #16]	; (800581c <Read_IC_Channel2_Raw_data+0x1c>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	601a      	str	r2, [r3, #0]
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	20000e3c 	.word	0x20000e3c

08005820 <Write_IC_Channel2_Raw_data>:

void Write_IC_Channel2_Raw_data(uint32_t * data)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel2_Raw_data = (* data);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a03      	ldr	r2, [pc, #12]	; (800583c <Write_IC_Channel2_Raw_data+0x1c>)
 800582e:	6013      	str	r3, [r2, #0]
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	20000e3c 	.word	0x20000e3c

08005840 <Read_IC_Channel3_Raw_data>:

void Read_IC_Channel3_Raw_data(uint32_t * data)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
	(* data) = Timer_IC_Channel3_Raw_data;
 8005848:	4b04      	ldr	r3, [pc, #16]	; (800585c <Read_IC_Channel3_Raw_data+0x1c>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	601a      	str	r2, [r3, #0]
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	20000e24 	.word	0x20000e24

08005860 <Write_IC_Channel3_Raw_data>:

void Write_IC_Channel3_Raw_data(uint32_t * data)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel3_Raw_data = (* data);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a03      	ldr	r2, [pc, #12]	; (800587c <Write_IC_Channel3_Raw_data+0x1c>)
 800586e:	6013      	str	r3, [r2, #0]
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	20000e24 	.word	0x20000e24

08005880 <Read_RC_CH1_Max>:
{
	Button_Pressed = (* data);
}

void Read_RC_CH1_Max(uint32_t * data)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	 (* data) = RemoteControl_CH1_Max;
 8005888:	4b04      	ldr	r3, [pc, #16]	; (800589c <Read_RC_CH1_Max+0x1c>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	601a      	str	r2, [r3, #0]
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20000e48 	.word	0x20000e48

080058a0 <Read_RC_CH1_Min>:
{
	RemoteControl_CH1_Max = (* data);
}

void Read_RC_CH1_Min(uint32_t * data)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
	 (* data) = RemoteControl_CH1_Min;
 80058a8:	4b04      	ldr	r3, [pc, #16]	; (80058bc <Read_RC_CH1_Min+0x1c>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	601a      	str	r2, [r3, #0]
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	20000e44 	.word	0x20000e44

080058c0 <Read_RC_CH2_Max>:
{
	RemoteControl_CH1_Min = (* data);
}

void Read_RC_CH2_Max(uint32_t * data)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
	 (* data) = RemoteControl_CH2_Max;
 80058c8:	4b04      	ldr	r3, [pc, #16]	; (80058dc <Read_RC_CH2_Max+0x1c>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	601a      	str	r2, [r3, #0]
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	20000e28 	.word	0x20000e28

080058e0 <Read_RC_CH2_Min>:
{
	RemoteControl_CH2_Max = (* data);
}

void Read_RC_CH2_Min(uint32_t * data)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	 (* data) = RemoteControl_CH2_Min;
 80058e8:	4b04      	ldr	r3, [pc, #16]	; (80058fc <Read_RC_CH2_Min+0x1c>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	601a      	str	r2, [r3, #0]
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	20000e1c 	.word	0x20000e1c

08005900 <Read_RC_CH3_Max>:
{
	RemoteControl_CH2_Min = (* data);
}

void Read_RC_CH3_Max(uint32_t * data)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	 (* data) = RemoteControl_CH3_Max;
 8005908:	4b04      	ldr	r3, [pc, #16]	; (800591c <Read_RC_CH3_Max+0x1c>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	20000e68 	.word	0x20000e68

08005920 <Read_RC_CH3_Min>:
{
	RemoteControl_CH3_Max = (* data);
}

void Read_RC_CH3_Min(uint32_t * data)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	 (* data) = RemoteControl_CH3_Min;
 8005928:	4b04      	ldr	r3, [pc, #16]	; (800593c <Read_RC_CH3_Min+0x1c>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	601a      	str	r2, [r3, #0]
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	20000e40 	.word	0x20000e40

08005940 <Write_Provided_Robot_Speed>:
{
	(* data) = RemoteControl_Provided_Robot_Speed;
}

void Write_Provided_Robot_Speed(RobotSpeed_Typedef * data)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
	RemoteControl_Provided_Robot_Speed = (* data);
 8005948:	4b05      	ldr	r3, [pc, #20]	; (8005960 <Write_Provided_Robot_Speed+0x20>)
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	ca07      	ldmia	r2, {r0, r1, r2}
 800594e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20000e5c 	.word	0x20000e5c

08005964 <Read_Calculated_Wheel_Speeds>:


void Read_Calculated_Wheel_Speeds(WheelSpeed_Typedef * data)
{
 8005964:	b490      	push	{r4, r7}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	(* data) = WheelSpeedCalculation_Calculated_WheelSpeeds;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a05      	ldr	r2, [pc, #20]	; (8005984 <Read_Calculated_Wheel_Speeds+0x20>)
 8005970:	461c      	mov	r4, r3
 8005972:	4613      	mov	r3, r2
 8005974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005976:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bc90      	pop	{r4, r7}
 8005982:	4770      	bx	lr
 8005984:	20000e4c 	.word	0x20000e4c

08005988 <Write_Calculated_Wheel_Speeds>:

void Write_Calculated_Wheel_Speeds(WheelSpeed_Typedef * data)
{
 8005988:	b490      	push	{r4, r7}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	WheelSpeedCalculation_Calculated_WheelSpeeds = (* data);
 8005990:	4a05      	ldr	r2, [pc, #20]	; (80059a8 <Write_Calculated_Wheel_Speeds+0x20>)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4614      	mov	r4, r2
 8005996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc90      	pop	{r4, r7}
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	20000e4c 	.word	0x20000e4c

080059ac <Read_Provided_Wheel_Speeds>:

void Read_Provided_Wheel_Speeds(WheelSpeed_Typedef * data)
{
 80059ac:	b490      	push	{r4, r7}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	(* data) = WheelSpeedProvider_Calculated_WheelSpeeds;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a05      	ldr	r2, [pc, #20]	; (80059cc <Read_Provided_Wheel_Speeds+0x20>)
 80059b8:	461c      	mov	r4, r3
 80059ba:	4613      	mov	r3, r2
 80059bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc90      	pop	{r4, r7}
 80059ca:	4770      	bx	lr
 80059cc:	20000e2c 	.word	0x20000e2c

080059d0 <Write_Provided_Wheel_Speeds>:

void Write_Provided_Wheel_Speeds(WheelSpeed_Typedef * data)
{
 80059d0:	b490      	push	{r4, r7}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	WheelSpeedProvider_Calculated_WheelSpeeds = (* data);
 80059d8:	4a05      	ldr	r2, [pc, #20]	; (80059f0 <Write_Provided_Wheel_Speeds+0x20>)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4614      	mov	r4, r2
 80059de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80059e4:	bf00      	nop
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bc90      	pop	{r4, r7}
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20000e2c 	.word	0x20000e2c

080059f4 <Init_System_Startup>:
#include "Initialize_System.h"

TIM_HandleTypeDef htim1;

void Init_System_Startup(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
	Remote_Control_init();
 80059f8:	f7fe fc0c 	bl	8004214 <Remote_Control_init>
	Init_Wheel_Speed_Provision();
 80059fc:	f7fe fc68 	bl	80042d0 <Init_Wheel_Speed_Provision>
	//Motor_Init();
	//Motor_Start();
	//Calibrate_Remote_Control();
}
 8005a00:	bf00      	nop
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a04:	b5b0      	push	{r4, r5, r7, lr}
 8005a06:	b094      	sub	sp, #80	; 0x50
 8005a08:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a0a:	f7fb f91b 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a0e:	f000 f84f 	bl	8005ab0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a12:	f000 f8f3 	bl	8005bfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005a16:	f000 f8c1 	bl	8005b9c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Init_System_Startup();
 8005a1a:	f7ff ffeb 	bl	80059f4 <Init_System_Startup>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MwPeriodicTask */
  osThreadDef(MwPeriodicTask, StartMwPeriodicTask, osPriorityNormal, 0, 128);
 8005a1e:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <main+0x90>)
 8005a20:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8005a24:	461d      	mov	r5, r3
 8005a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a2a:	682b      	ldr	r3, [r5, #0]
 8005a2c:	6023      	str	r3, [r4, #0]
  MwPeriodicTaskHandle = osThreadCreate(osThread(MwPeriodicTask), NULL);
 8005a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a32:	2100      	movs	r1, #0
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fe fd32 	bl	800449e <osThreadCreate>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <main+0x94>)
 8005a3e:	601a      	str	r2, [r3, #0]

  /* definition and creation of LowLevelPeriodi */
  osThreadDef(LowLevelPeriodi, StartLowLevelPeriodicTask, osPriorityRealtime, 0, 128);
 8005a40:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <main+0x98>)
 8005a42:	f107 0418 	add.w	r4, r7, #24
 8005a46:	461d      	mov	r5, r3
 8005a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	6023      	str	r3, [r4, #0]
  LowLevelPeriodiHandle = osThreadCreate(osThread(LowLevelPeriodi), NULL);
 8005a50:	f107 0318 	add.w	r3, r7, #24
 8005a54:	2100      	movs	r1, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe fd21 	bl	800449e <osThreadCreate>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	4b10      	ldr	r3, [pc, #64]	; (8005aa0 <main+0x9c>)
 8005a60:	601a      	str	r2, [r3, #0]

  /* definition and creation of AppPeriodicTask */
  osThreadDef(AppPeriodicTask, StartAppPeriodicTask, osPriorityAboveNormal, 0, 128);
 8005a62:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <main+0xa0>)
 8005a64:	1d3c      	adds	r4, r7, #4
 8005a66:	461d      	mov	r5, r3
 8005a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	6023      	str	r3, [r4, #0]
  AppPeriodicTaskHandle = osThreadCreate(osThread(AppPeriodicTask), NULL);
 8005a70:	1d3b      	adds	r3, r7, #4
 8005a72:	2100      	movs	r1, #0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fe fd12 	bl	800449e <osThreadCreate>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <main+0xa4>)
 8005a7e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005a80:	f7fe fd06 	bl	8004490 <osKernelStart>
  while (1)
  {
	  //Provide_Robot_Speed();
	  //Calculate_Wheel_Speeds();
	  //Motorx_Set_Speed();
	  Provide_Wheel_Speeds();
 8005a84:	f7fe fc5e 	bl	8004344 <Provide_Wheel_Speeds>
	  get_sys_count++;
 8005a88:	4b08      	ldr	r3, [pc, #32]	; (8005aac <main+0xa8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	4a07      	ldr	r2, [pc, #28]	; (8005aac <main+0xa8>)
 8005a90:	6013      	str	r3, [r2, #0]
	  Provide_Wheel_Speeds();
 8005a92:	e7f7      	b.n	8005a84 <main+0x80>
 8005a94:	08006924 	.word	0x08006924
 8005a98:	20000e70 	.word	0x20000e70
 8005a9c:	08006948 	.word	0x08006948
 8005aa0:	20000e78 	.word	0x20000e78
 8005aa4:	0800696c 	.word	0x0800696c
 8005aa8:	20000e74 	.word	0x20000e74
 8005aac:	20000d94 	.word	0x20000d94

08005ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b0b8      	sub	sp, #224	; 0xe0
 8005ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ab6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005aba:	2244      	movs	r2, #68	; 0x44
 8005abc:	2100      	movs	r1, #0
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fb13 	bl	80060ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ac4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	605a      	str	r2, [r3, #4]
 8005ace:	609a      	str	r2, [r3, #8]
 8005ad0:	60da      	str	r2, [r3, #12]
 8005ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	2288      	movs	r2, #136	; 0x88
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fb05 	bl	80060ea <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005aee:	2310      	movs	r3, #16
 8005af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005af4:	2302      	movs	r3, #2
 8005af6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005afa:	2302      	movs	r3, #2
 8005afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005b00:	2301      	movs	r3, #1
 8005b02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005b06:	2308      	movs	r3, #8
 8005b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005b0c:	2307      	movs	r3, #7
 8005b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005b12:	2302      	movs	r3, #2
 8005b14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fb fbba 	bl	800129c <HAL_RCC_OscConfig>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005b2e:	f000 f933 	bl	8005d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b32:	230f      	movs	r3, #15
 8005b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005b44:	2300      	movs	r3, #0
 8005b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005b50:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005b54:	2103      	movs	r1, #3
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fb ff50 	bl	80019fc <HAL_RCC_ClockConfig>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8005b62:	f000 f919 	bl	8005d98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005b66:	2302      	movs	r3, #2
 8005b68:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b6e:	463b      	mov	r3, r7
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fc f979 	bl	8001e68 <HAL_RCCEx_PeriphCLKConfig>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8005b7c:	f000 f90c 	bl	8005d98 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005b80:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005b84:	f7fb fb34 	bl	80011f0 <HAL_PWREx_ControlVoltageScaling>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8005b8e:	f000 f903 	bl	8005d98 <Error_Handler>
  }
}
 8005b92:	bf00      	nop
 8005b94:	37e0      	adds	r7, #224	; 0xe0
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <MX_USART2_UART_Init+0x58>)
 8005ba2:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <MX_USART2_UART_Init+0x5c>)
 8005ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005ba6:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <MX_USART2_UART_Init+0x58>)
 8005ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005bae:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <MX_USART2_UART_Init+0x58>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005bb4:	4b0f      	ldr	r3, [pc, #60]	; (8005bf4 <MX_USART2_UART_Init+0x58>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005bba:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <MX_USART2_UART_Init+0x58>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8005bc0:	4b0c      	ldr	r3, [pc, #48]	; (8005bf4 <MX_USART2_UART_Init+0x58>)
 8005bc2:	2208      	movs	r2, #8
 8005bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bc6:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <MX_USART2_UART_Init+0x58>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bcc:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <MX_USART2_UART_Init+0x58>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005bd2:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <MX_USART2_UART_Init+0x58>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005bd8:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <MX_USART2_UART_Init+0x58>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005bde:	4805      	ldr	r0, [pc, #20]	; (8005bf4 <MX_USART2_UART_Init+0x58>)
 8005be0:	f7fd fc30 	bl	8003444 <HAL_UART_Init>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005bea:	f000 f8d5 	bl	8005d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005bee:	bf00      	nop
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000e7c 	.word	0x20000e7c
 8005bf8:	40004400 	.word	0x40004400

08005bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c02:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <MX_GPIO_Init+0x2c>)
 8005c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c06:	4a08      	ldr	r2, [pc, #32]	; (8005c28 <MX_GPIO_Init+0x2c>)
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <MX_GPIO_Init+0x2c>)
 8005c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	607b      	str	r3, [r7, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]

}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40021000 	.word	0x40021000

08005c2c <StartMwPeriodicTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartMwPeriodicTask */
void StartMwPeriodicTask(void const * argument)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b092      	sub	sp, #72	; 0x48
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	uint32_t last_data;
	const TickType_t xFrequency = 1000;
 8005c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8005c3a:	f7fe ff9f 	bl	8004b7c <xTaskGetTickCount>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Infinite loop */
  for(;;)
  {
	vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8005c42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe fe2d 	bl	80048a8 <vTaskDelayUntil>
	char aTxBuffer[32];
	WheelSpeed_Typedef Provided_wheel_speeds;
	uint32_t Data_to_send;
    Read_Provided_Wheel_Speeds(&Provided_wheel_speeds);
 8005c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff feaa 	bl	80059ac <Read_Provided_Wheel_Speeds>
    if(Provided_wheel_speeds.WheelSpeed_1 < 0)
 8005c58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005c5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c64:	d51c      	bpl.n	8005ca0 <StartMwPeriodicTask+0x74>
    {
    	Data_to_send=(uint32_t)(Provided_wheel_speeds.WheelSpeed_1*-1);
 8005c66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005c6a:	eef1 7a67 	vneg.f32	s15, s15
 8005c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c72:	ee17 3a90 	vmov	r3, s15
 8005c76:	643b      	str	r3, [r7, #64]	; 0x40
    	if(last_data!=Data_to_send)
 8005c78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d029      	beq.n	8005cd4 <StartMwPeriodicTask+0xa8>
    	{
    		HAL_UART_Transmit(&huart2, (uint32_t *) &aTxBuffer, sprintf(aTxBuffer, "Speed: - %d\n", Data_to_send) , 100);
 8005c80:	f107 0308 	add.w	r3, r7, #8
 8005c84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c86:	4915      	ldr	r1, [pc, #84]	; (8005cdc <StartMwPeriodicTask+0xb0>)
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fa37 	bl	80060fc <siprintf>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	f107 0108 	add.w	r1, r7, #8
 8005c96:	2364      	movs	r3, #100	; 0x64
 8005c98:	4811      	ldr	r0, [pc, #68]	; (8005ce0 <StartMwPeriodicTask+0xb4>)
 8005c9a:	f7fd fc21 	bl	80034e0 <HAL_UART_Transmit>
 8005c9e:	e019      	b.n	8005cd4 <StartMwPeriodicTask+0xa8>
    	}
    }
    else
    {
    	Data_to_send=(uint32_t)Provided_wheel_speeds.WheelSpeed_1;
 8005ca0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ca8:	ee17 3a90 	vmov	r3, s15
 8005cac:	643b      	str	r3, [r7, #64]	; 0x40
    	if(last_data!=Data_to_send)
 8005cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d00e      	beq.n	8005cd4 <StartMwPeriodicTask+0xa8>
    	{
    		HAL_UART_Transmit(&huart2, (uint32_t *) &aTxBuffer, sprintf(aTxBuffer, "Speed:  %d\n", Data_to_send) , 100);
 8005cb6:	f107 0308 	add.w	r3, r7, #8
 8005cba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cbc:	4909      	ldr	r1, [pc, #36]	; (8005ce4 <StartMwPeriodicTask+0xb8>)
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fa1c 	bl	80060fc <siprintf>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	f107 0108 	add.w	r1, r7, #8
 8005ccc:	2364      	movs	r3, #100	; 0x64
 8005cce:	4804      	ldr	r0, [pc, #16]	; (8005ce0 <StartMwPeriodicTask+0xb4>)
 8005cd0:	f7fd fc06 	bl	80034e0 <HAL_UART_Transmit>
    	}

    }
    last_data=Data_to_send;
 8005cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd6:	647b      	str	r3, [r7, #68]	; 0x44
  {
 8005cd8:	e7b3      	b.n	8005c42 <StartMwPeriodicTask+0x16>
 8005cda:	bf00      	nop
 8005cdc:	08006980 	.word	0x08006980
 8005ce0:	20000e7c 	.word	0x20000e7c
 8005ce4:	08006990 	.word	0x08006990

08005ce8 <StartLowLevelPeriodicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowLevelPeriodicTask */
void StartLowLevelPeriodicTask(void const * argument)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLowLevelPeriodicTask */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;
 8005cf0:	230a      	movs	r3, #10
 8005cf2:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8005cf4:	f7fe ff42 	bl	8004b7c <xTaskGetTickCount>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */

  for(;;)
  {
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8005cfc:	f107 0308 	add.w	r3, r7, #8
 8005d00:	68f9      	ldr	r1, [r7, #12]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe fdd0 	bl	80048a8 <vTaskDelayUntil>

	  Provide_Robot_Speed();
 8005d08:	f7fe f9cc 	bl	80040a4 <Provide_Robot_Speed>
	  Provide_Wheel_Speeds();
 8005d0c:	f7fe fb1a 	bl	8004344 <Provide_Wheel_Speeds>
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8005d10:	e7f4      	b.n	8005cfc <StartLowLevelPeriodicTask+0x14>
	...

08005d14 <StartAppPeriodicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAppPeriodicTask */
void StartAppPeriodicTask(void const * argument)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAppPeriodicTask */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000;
 8005d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d20:	61fb      	str	r3, [r7, #28]
	WheelSpeed_Typedef Calculated_wheel_speeds;

		// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8005d22:	f7fe ff2b 	bl	8004b7c <xTaskGetTickCount>
 8005d26:	4603      	mov	r3, r0
 8005d28:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8005d2a:	f107 0318 	add.w	r3, r7, #24
 8005d2e:	69f9      	ldr	r1, [r7, #28]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fe fdb9 	bl	80048a8 <vTaskDelayUntil>
	  Calculated_wheel_speeds.WheelSpeed_1++;
 8005d36:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d42:	edc7 7a02 	vstr	s15, [r7, #8]
	  if(Calculated_wheel_speeds.WheelSpeed_1 == 100)
 8005d46:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d4a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005d6c <StartAppPeriodicTask+0x58>
 8005d4e:	eef4 7a47 	vcmp.f32	s15, s14
 8005d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d56:	d101      	bne.n	8005d5c <StartAppPeriodicTask+0x48>
	  {
		  Calculated_wheel_speeds.WheelSpeed_1=-100;
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <StartAppPeriodicTask+0x5c>)
 8005d5a:	60bb      	str	r3, [r7, #8]
	  }
	  Write_Calculated_Wheel_Speeds(&Calculated_wheel_speeds);
 8005d5c:	f107 0308 	add.w	r3, r7, #8
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fe11 	bl	8005988 <Write_Calculated_Wheel_Speeds>


	  Motorx_Set_Speed();
 8005d66:	f7fe f8c7 	bl	8003ef8 <Motorx_Set_Speed>
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8005d6a:	e7de      	b.n	8005d2a <StartAppPeriodicTask+0x16>
 8005d6c:	42c80000 	.word	0x42c80000
 8005d70:	c2c80000 	.word	0xc2c80000

08005d74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a04      	ldr	r2, [pc, #16]	; (8005d94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d101      	bne.n	8005d8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005d86:	f7fa ff7d 	bl	8000c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005d8a:	bf00      	nop
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40001400 	.word	0x40001400

08005d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1);
 8005d9c:	e7fe      	b.n	8005d9c <Error_Handler+0x4>
	...

08005da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005da6:	4b11      	ldr	r3, [pc, #68]	; (8005dec <HAL_MspInit+0x4c>)
 8005da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005daa:	4a10      	ldr	r2, [pc, #64]	; (8005dec <HAL_MspInit+0x4c>)
 8005dac:	f043 0301 	orr.w	r3, r3, #1
 8005db0:	6613      	str	r3, [r2, #96]	; 0x60
 8005db2:	4b0e      	ldr	r3, [pc, #56]	; (8005dec <HAL_MspInit+0x4c>)
 8005db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	607b      	str	r3, [r7, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dbe:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <HAL_MspInit+0x4c>)
 8005dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc2:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <HAL_MspInit+0x4c>)
 8005dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8005dca:	4b08      	ldr	r3, [pc, #32]	; (8005dec <HAL_MspInit+0x4c>)
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	210f      	movs	r1, #15
 8005dda:	f06f 0001 	mvn.w	r0, #1
 8005dde:	f7fb f827 	bl	8000e30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40021000 	.word	0x40021000

08005df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08a      	sub	sp, #40	; 0x28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005df8:	f107 0314 	add.w	r3, r7, #20
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	605a      	str	r2, [r3, #4]
 8005e02:	609a      	str	r2, [r3, #8]
 8005e04:	60da      	str	r2, [r3, #12]
 8005e06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <HAL_UART_MspInit+0x7c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d128      	bne.n	8005e64 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e12:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <HAL_UART_MspInit+0x80>)
 8005e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e16:	4a16      	ldr	r2, [pc, #88]	; (8005e70 <HAL_UART_MspInit+0x80>)
 8005e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8005e1e:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <HAL_UART_MspInit+0x80>)
 8005e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e26:	613b      	str	r3, [r7, #16]
 8005e28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e2a:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <HAL_UART_MspInit+0x80>)
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2e:	4a10      	ldr	r2, [pc, #64]	; (8005e70 <HAL_UART_MspInit+0x80>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e36:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <HAL_UART_MspInit+0x80>)
 8005e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005e42:	230c      	movs	r3, #12
 8005e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e46:	2302      	movs	r3, #2
 8005e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e52:	2307      	movs	r3, #7
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e56:	f107 0314 	add.w	r3, r7, #20
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e60:	f7fb f810 	bl	8000e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005e64:	bf00      	nop
 8005e66:	3728      	adds	r7, #40	; 0x28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	40004400 	.word	0x40004400
 8005e70:	40021000 	.word	0x40021000

08005e74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08c      	sub	sp, #48	; 0x30
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8005e84:	2200      	movs	r2, #0
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	2037      	movs	r0, #55	; 0x37
 8005e8a:	f7fa ffd1 	bl	8000e30 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8005e8e:	2037      	movs	r0, #55	; 0x37
 8005e90:	f7fa ffea 	bl	8000e68 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005e94:	4b1e      	ldr	r3, [pc, #120]	; (8005f10 <HAL_InitTick+0x9c>)
 8005e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e98:	4a1d      	ldr	r2, [pc, #116]	; (8005f10 <HAL_InitTick+0x9c>)
 8005e9a:	f043 0320 	orr.w	r3, r3, #32
 8005e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8005ea0:	4b1b      	ldr	r3, [pc, #108]	; (8005f10 <HAL_InitTick+0x9c>)
 8005ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005eac:	f107 0210 	add.w	r2, r7, #16
 8005eb0:	f107 0314 	add.w	r3, r7, #20
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fb ff44 	bl	8001d44 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005ebc:	f7fb ff16 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8005ec0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <HAL_InitTick+0xa0>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	0c9b      	lsrs	r3, r3, #18
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8005ed0:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <HAL_InitTick+0xa4>)
 8005ed2:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <HAL_InitTick+0xa8>)
 8005ed4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8005ed6:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <HAL_InitTick+0xa4>)
 8005ed8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005edc:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8005ede:	4a0e      	ldr	r2, [pc, #56]	; (8005f18 <HAL_InitTick+0xa4>)
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8005ee4:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <HAL_InitTick+0xa4>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eea:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <HAL_InitTick+0xa4>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8005ef0:	4809      	ldr	r0, [pc, #36]	; (8005f18 <HAL_InitTick+0xa4>)
 8005ef2:	f7fc fc69 	bl	80027c8 <HAL_TIM_Base_Init>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8005efc:	4806      	ldr	r0, [pc, #24]	; (8005f18 <HAL_InitTick+0xa4>)
 8005efe:	f7fc fc99 	bl	8002834 <HAL_TIM_Base_Start_IT>
 8005f02:	4603      	mov	r3, r0
 8005f04:	e000      	b.n	8005f08 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3730      	adds	r7, #48	; 0x30
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40021000 	.word	0x40021000
 8005f14:	431bde83 	.word	0x431bde83
 8005f18:	20000efc 	.word	0x20000efc
 8005f1c:	40001400 	.word	0x40001400

08005f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005f24:	bf00      	nop
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f32:	e7fe      	b.n	8005f32 <HardFault_Handler+0x4>

08005f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f38:	e7fe      	b.n	8005f38 <MemManage_Handler+0x4>

08005f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f3e:	e7fe      	b.n	8005f3e <BusFault_Handler+0x4>

08005f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f44:	e7fe      	b.n	8005f44 <UsageFault_Handler+0x4>

08005f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f46:	b480      	push	{r7}
 8005f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f4a:	bf00      	nop
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005f58:	4802      	ldr	r0, [pc, #8]	; (8005f64 <TIM7_IRQHandler+0x10>)
 8005f5a:	f7fc fdf8 	bl	8002b4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005f5e:	bf00      	nop
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000efc 	.word	0x20000efc

08005f68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005f70:	4b11      	ldr	r3, [pc, #68]	; (8005fb8 <_sbrk+0x50>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <_sbrk+0x16>
		heap_end = &end;
 8005f78:	4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <_sbrk+0x50>)
 8005f7a:	4a10      	ldr	r2, [pc, #64]	; (8005fbc <_sbrk+0x54>)
 8005f7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005f7e:	4b0e      	ldr	r3, [pc, #56]	; (8005fb8 <_sbrk+0x50>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <_sbrk+0x50>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	466a      	mov	r2, sp
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d907      	bls.n	8005fa2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005f92:	f000 f875 	bl	8006080 <__errno>
 8005f96:	4602      	mov	r2, r0
 8005f98:	230c      	movs	r3, #12
 8005f9a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fa0:	e006      	b.n	8005fb0 <_sbrk+0x48>
	}

	heap_end += incr;
 8005fa2:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <_sbrk+0x50>)
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4413      	add	r3, r2
 8005faa:	4a03      	ldr	r2, [pc, #12]	; (8005fb8 <_sbrk+0x50>)
 8005fac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005fae:	68fb      	ldr	r3, [r7, #12]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20000d98 	.word	0x20000d98
 8005fbc:	20000f40 	.word	0x20000f40

08005fc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005fc4:	4b17      	ldr	r3, [pc, #92]	; (8006024 <SystemInit+0x64>)
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fca:	4a16      	ldr	r2, [pc, #88]	; (8006024 <SystemInit+0x64>)
 8005fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005fd4:	4b14      	ldr	r3, [pc, #80]	; (8006028 <SystemInit+0x68>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a13      	ldr	r2, [pc, #76]	; (8006028 <SystemInit+0x68>)
 8005fda:	f043 0301 	orr.w	r3, r3, #1
 8005fde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005fe0:	4b11      	ldr	r3, [pc, #68]	; (8006028 <SystemInit+0x68>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005fe6:	4b10      	ldr	r3, [pc, #64]	; (8006028 <SystemInit+0x68>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a0f      	ldr	r2, [pc, #60]	; (8006028 <SystemInit+0x68>)
 8005fec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005ff0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005ff4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005ff6:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <SystemInit+0x68>)
 8005ff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ffc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <SystemInit+0x68>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a09      	ldr	r2, [pc, #36]	; (8006028 <SystemInit+0x68>)
 8006004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006008:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800600a:	4b07      	ldr	r3, [pc, #28]	; (8006028 <SystemInit+0x68>)
 800600c:	2200      	movs	r2, #0
 800600e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006010:	4b04      	ldr	r3, [pc, #16]	; (8006024 <SystemInit+0x64>)
 8006012:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006016:	609a      	str	r2, [r3, #8]
#endif
}
 8006018:	bf00      	nop
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	e000ed00 	.word	0xe000ed00
 8006028:	40021000 	.word	0x40021000

0800602c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800602c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006064 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006030:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006032:	e003      	b.n	800603c <LoopCopyDataInit>

08006034 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006034:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006036:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006038:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800603a:	3104      	adds	r1, #4

0800603c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800603c:	480b      	ldr	r0, [pc, #44]	; (800606c <LoopForever+0xa>)
	ldr	r3, =_edata
 800603e:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006040:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006042:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006044:	d3f6      	bcc.n	8006034 <CopyDataInit>
	ldr	r2, =_sbss
 8006046:	4a0b      	ldr	r2, [pc, #44]	; (8006074 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006048:	e002      	b.n	8006050 <LoopFillZerobss>

0800604a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800604a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800604c:	f842 3b04 	str.w	r3, [r2], #4

08006050 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006050:	4b09      	ldr	r3, [pc, #36]	; (8006078 <LoopForever+0x16>)
	cmp	r2, r3
 8006052:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006054:	d3f9      	bcc.n	800604a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006056:	f7ff ffb3 	bl	8005fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800605a:	f000 f817 	bl	800608c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800605e:	f7ff fcd1 	bl	8005a04 <main>

08006062 <LoopForever>:

LoopForever:
    b LoopForever
 8006062:	e7fe      	b.n	8006062 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006064:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006068:	08006a28 	.word	0x08006a28
	ldr	r0, =_sdata
 800606c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006070:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8006074:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8006078:	20000f40 	.word	0x20000f40

0800607c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800607c:	e7fe      	b.n	800607c <ADC1_2_IRQHandler>
	...

08006080 <__errno>:
 8006080:	4b01      	ldr	r3, [pc, #4]	; (8006088 <__errno+0x8>)
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	20000010 	.word	0x20000010

0800608c <__libc_init_array>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	4e0d      	ldr	r6, [pc, #52]	; (80060c4 <__libc_init_array+0x38>)
 8006090:	4c0d      	ldr	r4, [pc, #52]	; (80060c8 <__libc_init_array+0x3c>)
 8006092:	1ba4      	subs	r4, r4, r6
 8006094:	10a4      	asrs	r4, r4, #2
 8006096:	2500      	movs	r5, #0
 8006098:	42a5      	cmp	r5, r4
 800609a:	d109      	bne.n	80060b0 <__libc_init_array+0x24>
 800609c:	4e0b      	ldr	r6, [pc, #44]	; (80060cc <__libc_init_array+0x40>)
 800609e:	4c0c      	ldr	r4, [pc, #48]	; (80060d0 <__libc_init_array+0x44>)
 80060a0:	f000 fc28 	bl	80068f4 <_init>
 80060a4:	1ba4      	subs	r4, r4, r6
 80060a6:	10a4      	asrs	r4, r4, #2
 80060a8:	2500      	movs	r5, #0
 80060aa:	42a5      	cmp	r5, r4
 80060ac:	d105      	bne.n	80060ba <__libc_init_array+0x2e>
 80060ae:	bd70      	pop	{r4, r5, r6, pc}
 80060b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060b4:	4798      	blx	r3
 80060b6:	3501      	adds	r5, #1
 80060b8:	e7ee      	b.n	8006098 <__libc_init_array+0xc>
 80060ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060be:	4798      	blx	r3
 80060c0:	3501      	adds	r5, #1
 80060c2:	e7f2      	b.n	80060aa <__libc_init_array+0x1e>
 80060c4:	08006a20 	.word	0x08006a20
 80060c8:	08006a20 	.word	0x08006a20
 80060cc:	08006a20 	.word	0x08006a20
 80060d0:	08006a24 	.word	0x08006a24

080060d4 <memcpy>:
 80060d4:	b510      	push	{r4, lr}
 80060d6:	1e43      	subs	r3, r0, #1
 80060d8:	440a      	add	r2, r1
 80060da:	4291      	cmp	r1, r2
 80060dc:	d100      	bne.n	80060e0 <memcpy+0xc>
 80060de:	bd10      	pop	{r4, pc}
 80060e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060e8:	e7f7      	b.n	80060da <memcpy+0x6>

080060ea <memset>:
 80060ea:	4402      	add	r2, r0
 80060ec:	4603      	mov	r3, r0
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d100      	bne.n	80060f4 <memset+0xa>
 80060f2:	4770      	bx	lr
 80060f4:	f803 1b01 	strb.w	r1, [r3], #1
 80060f8:	e7f9      	b.n	80060ee <memset+0x4>
	...

080060fc <siprintf>:
 80060fc:	b40e      	push	{r1, r2, r3}
 80060fe:	b500      	push	{lr}
 8006100:	b09c      	sub	sp, #112	; 0x70
 8006102:	ab1d      	add	r3, sp, #116	; 0x74
 8006104:	9002      	str	r0, [sp, #8]
 8006106:	9006      	str	r0, [sp, #24]
 8006108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800610c:	4809      	ldr	r0, [pc, #36]	; (8006134 <siprintf+0x38>)
 800610e:	9107      	str	r1, [sp, #28]
 8006110:	9104      	str	r1, [sp, #16]
 8006112:	4909      	ldr	r1, [pc, #36]	; (8006138 <siprintf+0x3c>)
 8006114:	f853 2b04 	ldr.w	r2, [r3], #4
 8006118:	9105      	str	r1, [sp, #20]
 800611a:	6800      	ldr	r0, [r0, #0]
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	a902      	add	r1, sp, #8
 8006120:	f000 f866 	bl	80061f0 <_svfiprintf_r>
 8006124:	9b02      	ldr	r3, [sp, #8]
 8006126:	2200      	movs	r2, #0
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	b01c      	add	sp, #112	; 0x70
 800612c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006130:	b003      	add	sp, #12
 8006132:	4770      	bx	lr
 8006134:	20000010 	.word	0x20000010
 8006138:	ffff0208 	.word	0xffff0208

0800613c <__ssputs_r>:
 800613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006140:	688e      	ldr	r6, [r1, #8]
 8006142:	429e      	cmp	r6, r3
 8006144:	4682      	mov	sl, r0
 8006146:	460c      	mov	r4, r1
 8006148:	4690      	mov	r8, r2
 800614a:	4699      	mov	r9, r3
 800614c:	d837      	bhi.n	80061be <__ssputs_r+0x82>
 800614e:	898a      	ldrh	r2, [r1, #12]
 8006150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006154:	d031      	beq.n	80061ba <__ssputs_r+0x7e>
 8006156:	6825      	ldr	r5, [r4, #0]
 8006158:	6909      	ldr	r1, [r1, #16]
 800615a:	1a6f      	subs	r7, r5, r1
 800615c:	6965      	ldr	r5, [r4, #20]
 800615e:	2302      	movs	r3, #2
 8006160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006164:	fb95 f5f3 	sdiv	r5, r5, r3
 8006168:	f109 0301 	add.w	r3, r9, #1
 800616c:	443b      	add	r3, r7
 800616e:	429d      	cmp	r5, r3
 8006170:	bf38      	it	cc
 8006172:	461d      	movcc	r5, r3
 8006174:	0553      	lsls	r3, r2, #21
 8006176:	d530      	bpl.n	80061da <__ssputs_r+0x9e>
 8006178:	4629      	mov	r1, r5
 800617a:	f000 fb21 	bl	80067c0 <_malloc_r>
 800617e:	4606      	mov	r6, r0
 8006180:	b950      	cbnz	r0, 8006198 <__ssputs_r+0x5c>
 8006182:	230c      	movs	r3, #12
 8006184:	f8ca 3000 	str.w	r3, [sl]
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006198:	463a      	mov	r2, r7
 800619a:	6921      	ldr	r1, [r4, #16]
 800619c:	f7ff ff9a 	bl	80060d4 <memcpy>
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061aa:	81a3      	strh	r3, [r4, #12]
 80061ac:	6126      	str	r6, [r4, #16]
 80061ae:	6165      	str	r5, [r4, #20]
 80061b0:	443e      	add	r6, r7
 80061b2:	1bed      	subs	r5, r5, r7
 80061b4:	6026      	str	r6, [r4, #0]
 80061b6:	60a5      	str	r5, [r4, #8]
 80061b8:	464e      	mov	r6, r9
 80061ba:	454e      	cmp	r6, r9
 80061bc:	d900      	bls.n	80061c0 <__ssputs_r+0x84>
 80061be:	464e      	mov	r6, r9
 80061c0:	4632      	mov	r2, r6
 80061c2:	4641      	mov	r1, r8
 80061c4:	6820      	ldr	r0, [r4, #0]
 80061c6:	f000 fa93 	bl	80066f0 <memmove>
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	1b9b      	subs	r3, r3, r6
 80061ce:	60a3      	str	r3, [r4, #8]
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	441e      	add	r6, r3
 80061d4:	6026      	str	r6, [r4, #0]
 80061d6:	2000      	movs	r0, #0
 80061d8:	e7dc      	b.n	8006194 <__ssputs_r+0x58>
 80061da:	462a      	mov	r2, r5
 80061dc:	f000 fb4a 	bl	8006874 <_realloc_r>
 80061e0:	4606      	mov	r6, r0
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d1e2      	bne.n	80061ac <__ssputs_r+0x70>
 80061e6:	6921      	ldr	r1, [r4, #16]
 80061e8:	4650      	mov	r0, sl
 80061ea:	f000 fa9b 	bl	8006724 <_free_r>
 80061ee:	e7c8      	b.n	8006182 <__ssputs_r+0x46>

080061f0 <_svfiprintf_r>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	461d      	mov	r5, r3
 80061f6:	898b      	ldrh	r3, [r1, #12]
 80061f8:	061f      	lsls	r7, r3, #24
 80061fa:	b09d      	sub	sp, #116	; 0x74
 80061fc:	4680      	mov	r8, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	4616      	mov	r6, r2
 8006202:	d50f      	bpl.n	8006224 <_svfiprintf_r+0x34>
 8006204:	690b      	ldr	r3, [r1, #16]
 8006206:	b96b      	cbnz	r3, 8006224 <_svfiprintf_r+0x34>
 8006208:	2140      	movs	r1, #64	; 0x40
 800620a:	f000 fad9 	bl	80067c0 <_malloc_r>
 800620e:	6020      	str	r0, [r4, #0]
 8006210:	6120      	str	r0, [r4, #16]
 8006212:	b928      	cbnz	r0, 8006220 <_svfiprintf_r+0x30>
 8006214:	230c      	movs	r3, #12
 8006216:	f8c8 3000 	str.w	r3, [r8]
 800621a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800621e:	e0c8      	b.n	80063b2 <_svfiprintf_r+0x1c2>
 8006220:	2340      	movs	r3, #64	; 0x40
 8006222:	6163      	str	r3, [r4, #20]
 8006224:	2300      	movs	r3, #0
 8006226:	9309      	str	r3, [sp, #36]	; 0x24
 8006228:	2320      	movs	r3, #32
 800622a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800622e:	2330      	movs	r3, #48	; 0x30
 8006230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006234:	9503      	str	r5, [sp, #12]
 8006236:	f04f 0b01 	mov.w	fp, #1
 800623a:	4637      	mov	r7, r6
 800623c:	463d      	mov	r5, r7
 800623e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006242:	b10b      	cbz	r3, 8006248 <_svfiprintf_r+0x58>
 8006244:	2b25      	cmp	r3, #37	; 0x25
 8006246:	d13e      	bne.n	80062c6 <_svfiprintf_r+0xd6>
 8006248:	ebb7 0a06 	subs.w	sl, r7, r6
 800624c:	d00b      	beq.n	8006266 <_svfiprintf_r+0x76>
 800624e:	4653      	mov	r3, sl
 8006250:	4632      	mov	r2, r6
 8006252:	4621      	mov	r1, r4
 8006254:	4640      	mov	r0, r8
 8006256:	f7ff ff71 	bl	800613c <__ssputs_r>
 800625a:	3001      	adds	r0, #1
 800625c:	f000 80a4 	beq.w	80063a8 <_svfiprintf_r+0x1b8>
 8006260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006262:	4453      	add	r3, sl
 8006264:	9309      	str	r3, [sp, #36]	; 0x24
 8006266:	783b      	ldrb	r3, [r7, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 809d 	beq.w	80063a8 <_svfiprintf_r+0x1b8>
 800626e:	2300      	movs	r3, #0
 8006270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006278:	9304      	str	r3, [sp, #16]
 800627a:	9307      	str	r3, [sp, #28]
 800627c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006280:	931a      	str	r3, [sp, #104]	; 0x68
 8006282:	462f      	mov	r7, r5
 8006284:	2205      	movs	r2, #5
 8006286:	f817 1b01 	ldrb.w	r1, [r7], #1
 800628a:	4850      	ldr	r0, [pc, #320]	; (80063cc <_svfiprintf_r+0x1dc>)
 800628c:	f7f9 ffa0 	bl	80001d0 <memchr>
 8006290:	9b04      	ldr	r3, [sp, #16]
 8006292:	b9d0      	cbnz	r0, 80062ca <_svfiprintf_r+0xda>
 8006294:	06d9      	lsls	r1, r3, #27
 8006296:	bf44      	itt	mi
 8006298:	2220      	movmi	r2, #32
 800629a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800629e:	071a      	lsls	r2, r3, #28
 80062a0:	bf44      	itt	mi
 80062a2:	222b      	movmi	r2, #43	; 0x2b
 80062a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062a8:	782a      	ldrb	r2, [r5, #0]
 80062aa:	2a2a      	cmp	r2, #42	; 0x2a
 80062ac:	d015      	beq.n	80062da <_svfiprintf_r+0xea>
 80062ae:	9a07      	ldr	r2, [sp, #28]
 80062b0:	462f      	mov	r7, r5
 80062b2:	2000      	movs	r0, #0
 80062b4:	250a      	movs	r5, #10
 80062b6:	4639      	mov	r1, r7
 80062b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062bc:	3b30      	subs	r3, #48	; 0x30
 80062be:	2b09      	cmp	r3, #9
 80062c0:	d94d      	bls.n	800635e <_svfiprintf_r+0x16e>
 80062c2:	b1b8      	cbz	r0, 80062f4 <_svfiprintf_r+0x104>
 80062c4:	e00f      	b.n	80062e6 <_svfiprintf_r+0xf6>
 80062c6:	462f      	mov	r7, r5
 80062c8:	e7b8      	b.n	800623c <_svfiprintf_r+0x4c>
 80062ca:	4a40      	ldr	r2, [pc, #256]	; (80063cc <_svfiprintf_r+0x1dc>)
 80062cc:	1a80      	subs	r0, r0, r2
 80062ce:	fa0b f000 	lsl.w	r0, fp, r0
 80062d2:	4318      	orrs	r0, r3
 80062d4:	9004      	str	r0, [sp, #16]
 80062d6:	463d      	mov	r5, r7
 80062d8:	e7d3      	b.n	8006282 <_svfiprintf_r+0x92>
 80062da:	9a03      	ldr	r2, [sp, #12]
 80062dc:	1d11      	adds	r1, r2, #4
 80062de:	6812      	ldr	r2, [r2, #0]
 80062e0:	9103      	str	r1, [sp, #12]
 80062e2:	2a00      	cmp	r2, #0
 80062e4:	db01      	blt.n	80062ea <_svfiprintf_r+0xfa>
 80062e6:	9207      	str	r2, [sp, #28]
 80062e8:	e004      	b.n	80062f4 <_svfiprintf_r+0x104>
 80062ea:	4252      	negs	r2, r2
 80062ec:	f043 0302 	orr.w	r3, r3, #2
 80062f0:	9207      	str	r2, [sp, #28]
 80062f2:	9304      	str	r3, [sp, #16]
 80062f4:	783b      	ldrb	r3, [r7, #0]
 80062f6:	2b2e      	cmp	r3, #46	; 0x2e
 80062f8:	d10c      	bne.n	8006314 <_svfiprintf_r+0x124>
 80062fa:	787b      	ldrb	r3, [r7, #1]
 80062fc:	2b2a      	cmp	r3, #42	; 0x2a
 80062fe:	d133      	bne.n	8006368 <_svfiprintf_r+0x178>
 8006300:	9b03      	ldr	r3, [sp, #12]
 8006302:	1d1a      	adds	r2, r3, #4
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	9203      	str	r2, [sp, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	bfb8      	it	lt
 800630c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006310:	3702      	adds	r7, #2
 8006312:	9305      	str	r3, [sp, #20]
 8006314:	4d2e      	ldr	r5, [pc, #184]	; (80063d0 <_svfiprintf_r+0x1e0>)
 8006316:	7839      	ldrb	r1, [r7, #0]
 8006318:	2203      	movs	r2, #3
 800631a:	4628      	mov	r0, r5
 800631c:	f7f9 ff58 	bl	80001d0 <memchr>
 8006320:	b138      	cbz	r0, 8006332 <_svfiprintf_r+0x142>
 8006322:	2340      	movs	r3, #64	; 0x40
 8006324:	1b40      	subs	r0, r0, r5
 8006326:	fa03 f000 	lsl.w	r0, r3, r0
 800632a:	9b04      	ldr	r3, [sp, #16]
 800632c:	4303      	orrs	r3, r0
 800632e:	3701      	adds	r7, #1
 8006330:	9304      	str	r3, [sp, #16]
 8006332:	7839      	ldrb	r1, [r7, #0]
 8006334:	4827      	ldr	r0, [pc, #156]	; (80063d4 <_svfiprintf_r+0x1e4>)
 8006336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800633a:	2206      	movs	r2, #6
 800633c:	1c7e      	adds	r6, r7, #1
 800633e:	f7f9 ff47 	bl	80001d0 <memchr>
 8006342:	2800      	cmp	r0, #0
 8006344:	d038      	beq.n	80063b8 <_svfiprintf_r+0x1c8>
 8006346:	4b24      	ldr	r3, [pc, #144]	; (80063d8 <_svfiprintf_r+0x1e8>)
 8006348:	bb13      	cbnz	r3, 8006390 <_svfiprintf_r+0x1a0>
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	3307      	adds	r3, #7
 800634e:	f023 0307 	bic.w	r3, r3, #7
 8006352:	3308      	adds	r3, #8
 8006354:	9303      	str	r3, [sp, #12]
 8006356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006358:	444b      	add	r3, r9
 800635a:	9309      	str	r3, [sp, #36]	; 0x24
 800635c:	e76d      	b.n	800623a <_svfiprintf_r+0x4a>
 800635e:	fb05 3202 	mla	r2, r5, r2, r3
 8006362:	2001      	movs	r0, #1
 8006364:	460f      	mov	r7, r1
 8006366:	e7a6      	b.n	80062b6 <_svfiprintf_r+0xc6>
 8006368:	2300      	movs	r3, #0
 800636a:	3701      	adds	r7, #1
 800636c:	9305      	str	r3, [sp, #20]
 800636e:	4619      	mov	r1, r3
 8006370:	250a      	movs	r5, #10
 8006372:	4638      	mov	r0, r7
 8006374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006378:	3a30      	subs	r2, #48	; 0x30
 800637a:	2a09      	cmp	r2, #9
 800637c:	d903      	bls.n	8006386 <_svfiprintf_r+0x196>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0c8      	beq.n	8006314 <_svfiprintf_r+0x124>
 8006382:	9105      	str	r1, [sp, #20]
 8006384:	e7c6      	b.n	8006314 <_svfiprintf_r+0x124>
 8006386:	fb05 2101 	mla	r1, r5, r1, r2
 800638a:	2301      	movs	r3, #1
 800638c:	4607      	mov	r7, r0
 800638e:	e7f0      	b.n	8006372 <_svfiprintf_r+0x182>
 8006390:	ab03      	add	r3, sp, #12
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	4622      	mov	r2, r4
 8006396:	4b11      	ldr	r3, [pc, #68]	; (80063dc <_svfiprintf_r+0x1ec>)
 8006398:	a904      	add	r1, sp, #16
 800639a:	4640      	mov	r0, r8
 800639c:	f3af 8000 	nop.w
 80063a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80063a4:	4681      	mov	r9, r0
 80063a6:	d1d6      	bne.n	8006356 <_svfiprintf_r+0x166>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	065b      	lsls	r3, r3, #25
 80063ac:	f53f af35 	bmi.w	800621a <_svfiprintf_r+0x2a>
 80063b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063b2:	b01d      	add	sp, #116	; 0x74
 80063b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b8:	ab03      	add	r3, sp, #12
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	4622      	mov	r2, r4
 80063be:	4b07      	ldr	r3, [pc, #28]	; (80063dc <_svfiprintf_r+0x1ec>)
 80063c0:	a904      	add	r1, sp, #16
 80063c2:	4640      	mov	r0, r8
 80063c4:	f000 f882 	bl	80064cc <_printf_i>
 80063c8:	e7ea      	b.n	80063a0 <_svfiprintf_r+0x1b0>
 80063ca:	bf00      	nop
 80063cc:	080069e4 	.word	0x080069e4
 80063d0:	080069ea 	.word	0x080069ea
 80063d4:	080069ee 	.word	0x080069ee
 80063d8:	00000000 	.word	0x00000000
 80063dc:	0800613d 	.word	0x0800613d

080063e0 <_printf_common>:
 80063e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	4691      	mov	r9, r2
 80063e6:	461f      	mov	r7, r3
 80063e8:	688a      	ldr	r2, [r1, #8]
 80063ea:	690b      	ldr	r3, [r1, #16]
 80063ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063f0:	4293      	cmp	r3, r2
 80063f2:	bfb8      	it	lt
 80063f4:	4613      	movlt	r3, r2
 80063f6:	f8c9 3000 	str.w	r3, [r9]
 80063fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063fe:	4606      	mov	r6, r0
 8006400:	460c      	mov	r4, r1
 8006402:	b112      	cbz	r2, 800640a <_printf_common+0x2a>
 8006404:	3301      	adds	r3, #1
 8006406:	f8c9 3000 	str.w	r3, [r9]
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	0699      	lsls	r1, r3, #26
 800640e:	bf42      	ittt	mi
 8006410:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006414:	3302      	addmi	r3, #2
 8006416:	f8c9 3000 	strmi.w	r3, [r9]
 800641a:	6825      	ldr	r5, [r4, #0]
 800641c:	f015 0506 	ands.w	r5, r5, #6
 8006420:	d107      	bne.n	8006432 <_printf_common+0x52>
 8006422:	f104 0a19 	add.w	sl, r4, #25
 8006426:	68e3      	ldr	r3, [r4, #12]
 8006428:	f8d9 2000 	ldr.w	r2, [r9]
 800642c:	1a9b      	subs	r3, r3, r2
 800642e:	42ab      	cmp	r3, r5
 8006430:	dc28      	bgt.n	8006484 <_printf_common+0xa4>
 8006432:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006436:	6822      	ldr	r2, [r4, #0]
 8006438:	3300      	adds	r3, #0
 800643a:	bf18      	it	ne
 800643c:	2301      	movne	r3, #1
 800643e:	0692      	lsls	r2, r2, #26
 8006440:	d42d      	bmi.n	800649e <_printf_common+0xbe>
 8006442:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006446:	4639      	mov	r1, r7
 8006448:	4630      	mov	r0, r6
 800644a:	47c0      	blx	r8
 800644c:	3001      	adds	r0, #1
 800644e:	d020      	beq.n	8006492 <_printf_common+0xb2>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	68e5      	ldr	r5, [r4, #12]
 8006454:	f8d9 2000 	ldr.w	r2, [r9]
 8006458:	f003 0306 	and.w	r3, r3, #6
 800645c:	2b04      	cmp	r3, #4
 800645e:	bf08      	it	eq
 8006460:	1aad      	subeq	r5, r5, r2
 8006462:	68a3      	ldr	r3, [r4, #8]
 8006464:	6922      	ldr	r2, [r4, #16]
 8006466:	bf0c      	ite	eq
 8006468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800646c:	2500      	movne	r5, #0
 800646e:	4293      	cmp	r3, r2
 8006470:	bfc4      	itt	gt
 8006472:	1a9b      	subgt	r3, r3, r2
 8006474:	18ed      	addgt	r5, r5, r3
 8006476:	f04f 0900 	mov.w	r9, #0
 800647a:	341a      	adds	r4, #26
 800647c:	454d      	cmp	r5, r9
 800647e:	d11a      	bne.n	80064b6 <_printf_common+0xd6>
 8006480:	2000      	movs	r0, #0
 8006482:	e008      	b.n	8006496 <_printf_common+0xb6>
 8006484:	2301      	movs	r3, #1
 8006486:	4652      	mov	r2, sl
 8006488:	4639      	mov	r1, r7
 800648a:	4630      	mov	r0, r6
 800648c:	47c0      	blx	r8
 800648e:	3001      	adds	r0, #1
 8006490:	d103      	bne.n	800649a <_printf_common+0xba>
 8006492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649a:	3501      	adds	r5, #1
 800649c:	e7c3      	b.n	8006426 <_printf_common+0x46>
 800649e:	18e1      	adds	r1, r4, r3
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	2030      	movs	r0, #48	; 0x30
 80064a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064a8:	4422      	add	r2, r4
 80064aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064b2:	3302      	adds	r3, #2
 80064b4:	e7c5      	b.n	8006442 <_printf_common+0x62>
 80064b6:	2301      	movs	r3, #1
 80064b8:	4622      	mov	r2, r4
 80064ba:	4639      	mov	r1, r7
 80064bc:	4630      	mov	r0, r6
 80064be:	47c0      	blx	r8
 80064c0:	3001      	adds	r0, #1
 80064c2:	d0e6      	beq.n	8006492 <_printf_common+0xb2>
 80064c4:	f109 0901 	add.w	r9, r9, #1
 80064c8:	e7d8      	b.n	800647c <_printf_common+0x9c>
	...

080064cc <_printf_i>:
 80064cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80064d4:	460c      	mov	r4, r1
 80064d6:	7e09      	ldrb	r1, [r1, #24]
 80064d8:	b085      	sub	sp, #20
 80064da:	296e      	cmp	r1, #110	; 0x6e
 80064dc:	4617      	mov	r7, r2
 80064de:	4606      	mov	r6, r0
 80064e0:	4698      	mov	r8, r3
 80064e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064e4:	f000 80b3 	beq.w	800664e <_printf_i+0x182>
 80064e8:	d822      	bhi.n	8006530 <_printf_i+0x64>
 80064ea:	2963      	cmp	r1, #99	; 0x63
 80064ec:	d036      	beq.n	800655c <_printf_i+0x90>
 80064ee:	d80a      	bhi.n	8006506 <_printf_i+0x3a>
 80064f0:	2900      	cmp	r1, #0
 80064f2:	f000 80b9 	beq.w	8006668 <_printf_i+0x19c>
 80064f6:	2958      	cmp	r1, #88	; 0x58
 80064f8:	f000 8083 	beq.w	8006602 <_printf_i+0x136>
 80064fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006500:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006504:	e032      	b.n	800656c <_printf_i+0xa0>
 8006506:	2964      	cmp	r1, #100	; 0x64
 8006508:	d001      	beq.n	800650e <_printf_i+0x42>
 800650a:	2969      	cmp	r1, #105	; 0x69
 800650c:	d1f6      	bne.n	80064fc <_printf_i+0x30>
 800650e:	6820      	ldr	r0, [r4, #0]
 8006510:	6813      	ldr	r3, [r2, #0]
 8006512:	0605      	lsls	r5, r0, #24
 8006514:	f103 0104 	add.w	r1, r3, #4
 8006518:	d52a      	bpl.n	8006570 <_printf_i+0xa4>
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6011      	str	r1, [r2, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	da03      	bge.n	800652a <_printf_i+0x5e>
 8006522:	222d      	movs	r2, #45	; 0x2d
 8006524:	425b      	negs	r3, r3
 8006526:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800652a:	486f      	ldr	r0, [pc, #444]	; (80066e8 <_printf_i+0x21c>)
 800652c:	220a      	movs	r2, #10
 800652e:	e039      	b.n	80065a4 <_printf_i+0xd8>
 8006530:	2973      	cmp	r1, #115	; 0x73
 8006532:	f000 809d 	beq.w	8006670 <_printf_i+0x1a4>
 8006536:	d808      	bhi.n	800654a <_printf_i+0x7e>
 8006538:	296f      	cmp	r1, #111	; 0x6f
 800653a:	d020      	beq.n	800657e <_printf_i+0xb2>
 800653c:	2970      	cmp	r1, #112	; 0x70
 800653e:	d1dd      	bne.n	80064fc <_printf_i+0x30>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	f043 0320 	orr.w	r3, r3, #32
 8006546:	6023      	str	r3, [r4, #0]
 8006548:	e003      	b.n	8006552 <_printf_i+0x86>
 800654a:	2975      	cmp	r1, #117	; 0x75
 800654c:	d017      	beq.n	800657e <_printf_i+0xb2>
 800654e:	2978      	cmp	r1, #120	; 0x78
 8006550:	d1d4      	bne.n	80064fc <_printf_i+0x30>
 8006552:	2378      	movs	r3, #120	; 0x78
 8006554:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006558:	4864      	ldr	r0, [pc, #400]	; (80066ec <_printf_i+0x220>)
 800655a:	e055      	b.n	8006608 <_printf_i+0x13c>
 800655c:	6813      	ldr	r3, [r2, #0]
 800655e:	1d19      	adds	r1, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6011      	str	r1, [r2, #0]
 8006564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800656c:	2301      	movs	r3, #1
 800656e:	e08c      	b.n	800668a <_printf_i+0x1be>
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6011      	str	r1, [r2, #0]
 8006574:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006578:	bf18      	it	ne
 800657a:	b21b      	sxthne	r3, r3
 800657c:	e7cf      	b.n	800651e <_printf_i+0x52>
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	6825      	ldr	r5, [r4, #0]
 8006582:	1d18      	adds	r0, r3, #4
 8006584:	6010      	str	r0, [r2, #0]
 8006586:	0628      	lsls	r0, r5, #24
 8006588:	d501      	bpl.n	800658e <_printf_i+0xc2>
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	e002      	b.n	8006594 <_printf_i+0xc8>
 800658e:	0668      	lsls	r0, r5, #25
 8006590:	d5fb      	bpl.n	800658a <_printf_i+0xbe>
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	4854      	ldr	r0, [pc, #336]	; (80066e8 <_printf_i+0x21c>)
 8006596:	296f      	cmp	r1, #111	; 0x6f
 8006598:	bf14      	ite	ne
 800659a:	220a      	movne	r2, #10
 800659c:	2208      	moveq	r2, #8
 800659e:	2100      	movs	r1, #0
 80065a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065a4:	6865      	ldr	r5, [r4, #4]
 80065a6:	60a5      	str	r5, [r4, #8]
 80065a8:	2d00      	cmp	r5, #0
 80065aa:	f2c0 8095 	blt.w	80066d8 <_printf_i+0x20c>
 80065ae:	6821      	ldr	r1, [r4, #0]
 80065b0:	f021 0104 	bic.w	r1, r1, #4
 80065b4:	6021      	str	r1, [r4, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d13d      	bne.n	8006636 <_printf_i+0x16a>
 80065ba:	2d00      	cmp	r5, #0
 80065bc:	f040 808e 	bne.w	80066dc <_printf_i+0x210>
 80065c0:	4665      	mov	r5, ip
 80065c2:	2a08      	cmp	r2, #8
 80065c4:	d10b      	bne.n	80065de <_printf_i+0x112>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	07db      	lsls	r3, r3, #31
 80065ca:	d508      	bpl.n	80065de <_printf_i+0x112>
 80065cc:	6923      	ldr	r3, [r4, #16]
 80065ce:	6862      	ldr	r2, [r4, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	bfde      	ittt	le
 80065d4:	2330      	movle	r3, #48	; 0x30
 80065d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065da:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80065de:	ebac 0305 	sub.w	r3, ip, r5
 80065e2:	6123      	str	r3, [r4, #16]
 80065e4:	f8cd 8000 	str.w	r8, [sp]
 80065e8:	463b      	mov	r3, r7
 80065ea:	aa03      	add	r2, sp, #12
 80065ec:	4621      	mov	r1, r4
 80065ee:	4630      	mov	r0, r6
 80065f0:	f7ff fef6 	bl	80063e0 <_printf_common>
 80065f4:	3001      	adds	r0, #1
 80065f6:	d14d      	bne.n	8006694 <_printf_i+0x1c8>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065fc:	b005      	add	sp, #20
 80065fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006602:	4839      	ldr	r0, [pc, #228]	; (80066e8 <_printf_i+0x21c>)
 8006604:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006608:	6813      	ldr	r3, [r2, #0]
 800660a:	6821      	ldr	r1, [r4, #0]
 800660c:	1d1d      	adds	r5, r3, #4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6015      	str	r5, [r2, #0]
 8006612:	060a      	lsls	r2, r1, #24
 8006614:	d50b      	bpl.n	800662e <_printf_i+0x162>
 8006616:	07ca      	lsls	r2, r1, #31
 8006618:	bf44      	itt	mi
 800661a:	f041 0120 	orrmi.w	r1, r1, #32
 800661e:	6021      	strmi	r1, [r4, #0]
 8006620:	b91b      	cbnz	r3, 800662a <_printf_i+0x15e>
 8006622:	6822      	ldr	r2, [r4, #0]
 8006624:	f022 0220 	bic.w	r2, r2, #32
 8006628:	6022      	str	r2, [r4, #0]
 800662a:	2210      	movs	r2, #16
 800662c:	e7b7      	b.n	800659e <_printf_i+0xd2>
 800662e:	064d      	lsls	r5, r1, #25
 8006630:	bf48      	it	mi
 8006632:	b29b      	uxthmi	r3, r3
 8006634:	e7ef      	b.n	8006616 <_printf_i+0x14a>
 8006636:	4665      	mov	r5, ip
 8006638:	fbb3 f1f2 	udiv	r1, r3, r2
 800663c:	fb02 3311 	mls	r3, r2, r1, r3
 8006640:	5cc3      	ldrb	r3, [r0, r3]
 8006642:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006646:	460b      	mov	r3, r1
 8006648:	2900      	cmp	r1, #0
 800664a:	d1f5      	bne.n	8006638 <_printf_i+0x16c>
 800664c:	e7b9      	b.n	80065c2 <_printf_i+0xf6>
 800664e:	6813      	ldr	r3, [r2, #0]
 8006650:	6825      	ldr	r5, [r4, #0]
 8006652:	6961      	ldr	r1, [r4, #20]
 8006654:	1d18      	adds	r0, r3, #4
 8006656:	6010      	str	r0, [r2, #0]
 8006658:	0628      	lsls	r0, r5, #24
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	d501      	bpl.n	8006662 <_printf_i+0x196>
 800665e:	6019      	str	r1, [r3, #0]
 8006660:	e002      	b.n	8006668 <_printf_i+0x19c>
 8006662:	066a      	lsls	r2, r5, #25
 8006664:	d5fb      	bpl.n	800665e <_printf_i+0x192>
 8006666:	8019      	strh	r1, [r3, #0]
 8006668:	2300      	movs	r3, #0
 800666a:	6123      	str	r3, [r4, #16]
 800666c:	4665      	mov	r5, ip
 800666e:	e7b9      	b.n	80065e4 <_printf_i+0x118>
 8006670:	6813      	ldr	r3, [r2, #0]
 8006672:	1d19      	adds	r1, r3, #4
 8006674:	6011      	str	r1, [r2, #0]
 8006676:	681d      	ldr	r5, [r3, #0]
 8006678:	6862      	ldr	r2, [r4, #4]
 800667a:	2100      	movs	r1, #0
 800667c:	4628      	mov	r0, r5
 800667e:	f7f9 fda7 	bl	80001d0 <memchr>
 8006682:	b108      	cbz	r0, 8006688 <_printf_i+0x1bc>
 8006684:	1b40      	subs	r0, r0, r5
 8006686:	6060      	str	r0, [r4, #4]
 8006688:	6863      	ldr	r3, [r4, #4]
 800668a:	6123      	str	r3, [r4, #16]
 800668c:	2300      	movs	r3, #0
 800668e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006692:	e7a7      	b.n	80065e4 <_printf_i+0x118>
 8006694:	6923      	ldr	r3, [r4, #16]
 8006696:	462a      	mov	r2, r5
 8006698:	4639      	mov	r1, r7
 800669a:	4630      	mov	r0, r6
 800669c:	47c0      	blx	r8
 800669e:	3001      	adds	r0, #1
 80066a0:	d0aa      	beq.n	80065f8 <_printf_i+0x12c>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	079b      	lsls	r3, r3, #30
 80066a6:	d413      	bmi.n	80066d0 <_printf_i+0x204>
 80066a8:	68e0      	ldr	r0, [r4, #12]
 80066aa:	9b03      	ldr	r3, [sp, #12]
 80066ac:	4298      	cmp	r0, r3
 80066ae:	bfb8      	it	lt
 80066b0:	4618      	movlt	r0, r3
 80066b2:	e7a3      	b.n	80065fc <_printf_i+0x130>
 80066b4:	2301      	movs	r3, #1
 80066b6:	464a      	mov	r2, r9
 80066b8:	4639      	mov	r1, r7
 80066ba:	4630      	mov	r0, r6
 80066bc:	47c0      	blx	r8
 80066be:	3001      	adds	r0, #1
 80066c0:	d09a      	beq.n	80065f8 <_printf_i+0x12c>
 80066c2:	3501      	adds	r5, #1
 80066c4:	68e3      	ldr	r3, [r4, #12]
 80066c6:	9a03      	ldr	r2, [sp, #12]
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	42ab      	cmp	r3, r5
 80066cc:	dcf2      	bgt.n	80066b4 <_printf_i+0x1e8>
 80066ce:	e7eb      	b.n	80066a8 <_printf_i+0x1dc>
 80066d0:	2500      	movs	r5, #0
 80066d2:	f104 0919 	add.w	r9, r4, #25
 80066d6:	e7f5      	b.n	80066c4 <_printf_i+0x1f8>
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1ac      	bne.n	8006636 <_printf_i+0x16a>
 80066dc:	7803      	ldrb	r3, [r0, #0]
 80066de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066e6:	e76c      	b.n	80065c2 <_printf_i+0xf6>
 80066e8:	080069f5 	.word	0x080069f5
 80066ec:	08006a06 	.word	0x08006a06

080066f0 <memmove>:
 80066f0:	4288      	cmp	r0, r1
 80066f2:	b510      	push	{r4, lr}
 80066f4:	eb01 0302 	add.w	r3, r1, r2
 80066f8:	d807      	bhi.n	800670a <memmove+0x1a>
 80066fa:	1e42      	subs	r2, r0, #1
 80066fc:	4299      	cmp	r1, r3
 80066fe:	d00a      	beq.n	8006716 <memmove+0x26>
 8006700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006704:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006708:	e7f8      	b.n	80066fc <memmove+0xc>
 800670a:	4283      	cmp	r3, r0
 800670c:	d9f5      	bls.n	80066fa <memmove+0xa>
 800670e:	1881      	adds	r1, r0, r2
 8006710:	1ad2      	subs	r2, r2, r3
 8006712:	42d3      	cmn	r3, r2
 8006714:	d100      	bne.n	8006718 <memmove+0x28>
 8006716:	bd10      	pop	{r4, pc}
 8006718:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800671c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006720:	e7f7      	b.n	8006712 <memmove+0x22>
	...

08006724 <_free_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4605      	mov	r5, r0
 8006728:	2900      	cmp	r1, #0
 800672a:	d045      	beq.n	80067b8 <_free_r+0x94>
 800672c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006730:	1f0c      	subs	r4, r1, #4
 8006732:	2b00      	cmp	r3, #0
 8006734:	bfb8      	it	lt
 8006736:	18e4      	addlt	r4, r4, r3
 8006738:	f000 f8d2 	bl	80068e0 <__malloc_lock>
 800673c:	4a1f      	ldr	r2, [pc, #124]	; (80067bc <_free_r+0x98>)
 800673e:	6813      	ldr	r3, [r2, #0]
 8006740:	4610      	mov	r0, r2
 8006742:	b933      	cbnz	r3, 8006752 <_free_r+0x2e>
 8006744:	6063      	str	r3, [r4, #4]
 8006746:	6014      	str	r4, [r2, #0]
 8006748:	4628      	mov	r0, r5
 800674a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800674e:	f000 b8c8 	b.w	80068e2 <__malloc_unlock>
 8006752:	42a3      	cmp	r3, r4
 8006754:	d90c      	bls.n	8006770 <_free_r+0x4c>
 8006756:	6821      	ldr	r1, [r4, #0]
 8006758:	1862      	adds	r2, r4, r1
 800675a:	4293      	cmp	r3, r2
 800675c:	bf04      	itt	eq
 800675e:	681a      	ldreq	r2, [r3, #0]
 8006760:	685b      	ldreq	r3, [r3, #4]
 8006762:	6063      	str	r3, [r4, #4]
 8006764:	bf04      	itt	eq
 8006766:	1852      	addeq	r2, r2, r1
 8006768:	6022      	streq	r2, [r4, #0]
 800676a:	6004      	str	r4, [r0, #0]
 800676c:	e7ec      	b.n	8006748 <_free_r+0x24>
 800676e:	4613      	mov	r3, r2
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	b10a      	cbz	r2, 8006778 <_free_r+0x54>
 8006774:	42a2      	cmp	r2, r4
 8006776:	d9fa      	bls.n	800676e <_free_r+0x4a>
 8006778:	6819      	ldr	r1, [r3, #0]
 800677a:	1858      	adds	r0, r3, r1
 800677c:	42a0      	cmp	r0, r4
 800677e:	d10b      	bne.n	8006798 <_free_r+0x74>
 8006780:	6820      	ldr	r0, [r4, #0]
 8006782:	4401      	add	r1, r0
 8006784:	1858      	adds	r0, r3, r1
 8006786:	4282      	cmp	r2, r0
 8006788:	6019      	str	r1, [r3, #0]
 800678a:	d1dd      	bne.n	8006748 <_free_r+0x24>
 800678c:	6810      	ldr	r0, [r2, #0]
 800678e:	6852      	ldr	r2, [r2, #4]
 8006790:	605a      	str	r2, [r3, #4]
 8006792:	4401      	add	r1, r0
 8006794:	6019      	str	r1, [r3, #0]
 8006796:	e7d7      	b.n	8006748 <_free_r+0x24>
 8006798:	d902      	bls.n	80067a0 <_free_r+0x7c>
 800679a:	230c      	movs	r3, #12
 800679c:	602b      	str	r3, [r5, #0]
 800679e:	e7d3      	b.n	8006748 <_free_r+0x24>
 80067a0:	6820      	ldr	r0, [r4, #0]
 80067a2:	1821      	adds	r1, r4, r0
 80067a4:	428a      	cmp	r2, r1
 80067a6:	bf04      	itt	eq
 80067a8:	6811      	ldreq	r1, [r2, #0]
 80067aa:	6852      	ldreq	r2, [r2, #4]
 80067ac:	6062      	str	r2, [r4, #4]
 80067ae:	bf04      	itt	eq
 80067b0:	1809      	addeq	r1, r1, r0
 80067b2:	6021      	streq	r1, [r4, #0]
 80067b4:	605c      	str	r4, [r3, #4]
 80067b6:	e7c7      	b.n	8006748 <_free_r+0x24>
 80067b8:	bd38      	pop	{r3, r4, r5, pc}
 80067ba:	bf00      	nop
 80067bc:	20000d9c 	.word	0x20000d9c

080067c0 <_malloc_r>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	1ccd      	adds	r5, r1, #3
 80067c4:	f025 0503 	bic.w	r5, r5, #3
 80067c8:	3508      	adds	r5, #8
 80067ca:	2d0c      	cmp	r5, #12
 80067cc:	bf38      	it	cc
 80067ce:	250c      	movcc	r5, #12
 80067d0:	2d00      	cmp	r5, #0
 80067d2:	4606      	mov	r6, r0
 80067d4:	db01      	blt.n	80067da <_malloc_r+0x1a>
 80067d6:	42a9      	cmp	r1, r5
 80067d8:	d903      	bls.n	80067e2 <_malloc_r+0x22>
 80067da:	230c      	movs	r3, #12
 80067dc:	6033      	str	r3, [r6, #0]
 80067de:	2000      	movs	r0, #0
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
 80067e2:	f000 f87d 	bl	80068e0 <__malloc_lock>
 80067e6:	4a21      	ldr	r2, [pc, #132]	; (800686c <_malloc_r+0xac>)
 80067e8:	6814      	ldr	r4, [r2, #0]
 80067ea:	4621      	mov	r1, r4
 80067ec:	b991      	cbnz	r1, 8006814 <_malloc_r+0x54>
 80067ee:	4c20      	ldr	r4, [pc, #128]	; (8006870 <_malloc_r+0xb0>)
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	b91b      	cbnz	r3, 80067fc <_malloc_r+0x3c>
 80067f4:	4630      	mov	r0, r6
 80067f6:	f000 f863 	bl	80068c0 <_sbrk_r>
 80067fa:	6020      	str	r0, [r4, #0]
 80067fc:	4629      	mov	r1, r5
 80067fe:	4630      	mov	r0, r6
 8006800:	f000 f85e 	bl	80068c0 <_sbrk_r>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d124      	bne.n	8006852 <_malloc_r+0x92>
 8006808:	230c      	movs	r3, #12
 800680a:	6033      	str	r3, [r6, #0]
 800680c:	4630      	mov	r0, r6
 800680e:	f000 f868 	bl	80068e2 <__malloc_unlock>
 8006812:	e7e4      	b.n	80067de <_malloc_r+0x1e>
 8006814:	680b      	ldr	r3, [r1, #0]
 8006816:	1b5b      	subs	r3, r3, r5
 8006818:	d418      	bmi.n	800684c <_malloc_r+0x8c>
 800681a:	2b0b      	cmp	r3, #11
 800681c:	d90f      	bls.n	800683e <_malloc_r+0x7e>
 800681e:	600b      	str	r3, [r1, #0]
 8006820:	50cd      	str	r5, [r1, r3]
 8006822:	18cc      	adds	r4, r1, r3
 8006824:	4630      	mov	r0, r6
 8006826:	f000 f85c 	bl	80068e2 <__malloc_unlock>
 800682a:	f104 000b 	add.w	r0, r4, #11
 800682e:	1d23      	adds	r3, r4, #4
 8006830:	f020 0007 	bic.w	r0, r0, #7
 8006834:	1ac3      	subs	r3, r0, r3
 8006836:	d0d3      	beq.n	80067e0 <_malloc_r+0x20>
 8006838:	425a      	negs	r2, r3
 800683a:	50e2      	str	r2, [r4, r3]
 800683c:	e7d0      	b.n	80067e0 <_malloc_r+0x20>
 800683e:	428c      	cmp	r4, r1
 8006840:	684b      	ldr	r3, [r1, #4]
 8006842:	bf16      	itet	ne
 8006844:	6063      	strne	r3, [r4, #4]
 8006846:	6013      	streq	r3, [r2, #0]
 8006848:	460c      	movne	r4, r1
 800684a:	e7eb      	b.n	8006824 <_malloc_r+0x64>
 800684c:	460c      	mov	r4, r1
 800684e:	6849      	ldr	r1, [r1, #4]
 8006850:	e7cc      	b.n	80067ec <_malloc_r+0x2c>
 8006852:	1cc4      	adds	r4, r0, #3
 8006854:	f024 0403 	bic.w	r4, r4, #3
 8006858:	42a0      	cmp	r0, r4
 800685a:	d005      	beq.n	8006868 <_malloc_r+0xa8>
 800685c:	1a21      	subs	r1, r4, r0
 800685e:	4630      	mov	r0, r6
 8006860:	f000 f82e 	bl	80068c0 <_sbrk_r>
 8006864:	3001      	adds	r0, #1
 8006866:	d0cf      	beq.n	8006808 <_malloc_r+0x48>
 8006868:	6025      	str	r5, [r4, #0]
 800686a:	e7db      	b.n	8006824 <_malloc_r+0x64>
 800686c:	20000d9c 	.word	0x20000d9c
 8006870:	20000da0 	.word	0x20000da0

08006874 <_realloc_r>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	4607      	mov	r7, r0
 8006878:	4614      	mov	r4, r2
 800687a:	460e      	mov	r6, r1
 800687c:	b921      	cbnz	r1, 8006888 <_realloc_r+0x14>
 800687e:	4611      	mov	r1, r2
 8006880:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006884:	f7ff bf9c 	b.w	80067c0 <_malloc_r>
 8006888:	b922      	cbnz	r2, 8006894 <_realloc_r+0x20>
 800688a:	f7ff ff4b 	bl	8006724 <_free_r>
 800688e:	4625      	mov	r5, r4
 8006890:	4628      	mov	r0, r5
 8006892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006894:	f000 f826 	bl	80068e4 <_malloc_usable_size_r>
 8006898:	42a0      	cmp	r0, r4
 800689a:	d20f      	bcs.n	80068bc <_realloc_r+0x48>
 800689c:	4621      	mov	r1, r4
 800689e:	4638      	mov	r0, r7
 80068a0:	f7ff ff8e 	bl	80067c0 <_malloc_r>
 80068a4:	4605      	mov	r5, r0
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d0f2      	beq.n	8006890 <_realloc_r+0x1c>
 80068aa:	4631      	mov	r1, r6
 80068ac:	4622      	mov	r2, r4
 80068ae:	f7ff fc11 	bl	80060d4 <memcpy>
 80068b2:	4631      	mov	r1, r6
 80068b4:	4638      	mov	r0, r7
 80068b6:	f7ff ff35 	bl	8006724 <_free_r>
 80068ba:	e7e9      	b.n	8006890 <_realloc_r+0x1c>
 80068bc:	4635      	mov	r5, r6
 80068be:	e7e7      	b.n	8006890 <_realloc_r+0x1c>

080068c0 <_sbrk_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4c06      	ldr	r4, [pc, #24]	; (80068dc <_sbrk_r+0x1c>)
 80068c4:	2300      	movs	r3, #0
 80068c6:	4605      	mov	r5, r0
 80068c8:	4608      	mov	r0, r1
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	f7ff fb4c 	bl	8005f68 <_sbrk>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d102      	bne.n	80068da <_sbrk_r+0x1a>
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	b103      	cbz	r3, 80068da <_sbrk_r+0x1a>
 80068d8:	602b      	str	r3, [r5, #0]
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	20000f3c 	.word	0x20000f3c

080068e0 <__malloc_lock>:
 80068e0:	4770      	bx	lr

080068e2 <__malloc_unlock>:
 80068e2:	4770      	bx	lr

080068e4 <_malloc_usable_size_r>:
 80068e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068e8:	1f18      	subs	r0, r3, #4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	bfbc      	itt	lt
 80068ee:	580b      	ldrlt	r3, [r1, r0]
 80068f0:	18c0      	addlt	r0, r0, r3
 80068f2:	4770      	bx	lr

080068f4 <_init>:
 80068f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f6:	bf00      	nop
 80068f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fa:	bc08      	pop	{r3}
 80068fc:	469e      	mov	lr, r3
 80068fe:	4770      	bx	lr

08006900 <_fini>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	bf00      	nop
 8006904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006906:	bc08      	pop	{r3}
 8006908:	469e      	mov	lr, r3
 800690a:	4770      	bx	lr
