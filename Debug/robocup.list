
robocup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003108  08003108  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003108  08003108  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003108  08003108  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  0800311c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  0800311c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0e0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c57  00000000  00000000  0002d11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c68  00000000  00000000  0002ed78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  0002f9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002632f  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa88  00000000  00000000  0005686f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e990f  00000000  00000000  000612f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014ac06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003280  00000000  00000000  0014ac84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030b0 	.word	0x080030b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080030b0 	.word	0x080030b0

080001c8 <HAL_TIM_IC_CaptureCallback>:
	TIM_handler.Instance = config.TIMx;
	HAL_TIM_IC_Stop_IT(&TIM_handler, config.TIM_channelx);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t value2;
	uint32_t Diff_value;
	if((htim->Instance == IC_1_TIM) && (htim->Channel == IC_1_TIM_ACT_CHANNEL))
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a68      	ldr	r2, [pc, #416]	; (8000378 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 80001d6:	4293      	cmp	r3, r2
 80001d8:	d13f      	bne.n	800025a <HAL_TIM_IC_CaptureCallback+0x92>
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	7f1b      	ldrb	r3, [r3, #28]
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d13b      	bne.n	800025a <HAL_TIM_IC_CaptureCallback+0x92>
	{
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 80001e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e6:	691b      	ldr	r3, [r3, #16]
 80001e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d00a      	beq.n	8000206 <HAL_TIM_IC_CaptureCallback+0x3e>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_1_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_1_TIM_CHANNEL);
 80001f0:	2100      	movs	r1, #0
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f001 fe56 	bl	8001ea4 <HAL_TIM_ReadCapturedValue>
 80001f8:	4602      	mov	r2, r0
 80001fa:	4b60      	ldr	r3, [pc, #384]	; (800037c <HAL_TIM_IC_CaptureCallback+0x1b4>)
 80001fc:	601a      	str	r2, [r3, #0]
			TIM_IC_1_CaptureIndex = 1;
 80001fe:	4b60      	ldr	r3, [pc, #384]	; (8000380 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000200:	2201      	movs	r2, #1
 8000202:	601a      	str	r2, [r3, #0]
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 8000204:	e0b1      	b.n	800036a <HAL_TIM_IC_CaptureCallback+0x1a2>
		}
		else if(TIM_IC_1_CaptureIndex == 1)
 8000206:	4b5e      	ldr	r3, [pc, #376]	; (8000380 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2b01      	cmp	r3, #1
 800020c:	f040 80ad 	bne.w	800036a <HAL_TIM_IC_CaptureCallback+0x1a2>
		{
			 /* Get the 2nd Input Capture value */
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_1_TIM_CHANNEL);
 8000210:	2100      	movs	r1, #0
 8000212:	6878      	ldr	r0, [r7, #4]
 8000214:	f001 fe46 	bl	8001ea4 <HAL_TIM_ReadCapturedValue>
 8000218:	60f8      	str	r0, [r7, #12]

			 /* Capture computation */
			 if (value2 > TIM_IC_1_Value_1)
 800021a:	4b58      	ldr	r3, [pc, #352]	; (800037c <HAL_TIM_IC_CaptureCallback+0x1b4>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	68fa      	ldr	r2, [r7, #12]
 8000220:	429a      	cmp	r2, r3
 8000222:	d905      	bls.n	8000230 <HAL_TIM_IC_CaptureCallback+0x68>
			 {
				 Diff_value = (value2 - TIM_IC_1_Value_1);
 8000224:	4b55      	ldr	r3, [pc, #340]	; (800037c <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	68fa      	ldr	r2, [r7, #12]
 800022a:	1ad3      	subs	r3, r2, r3
 800022c:	60bb      	str	r3, [r7, #8]
 800022e:	e00b      	b.n	8000248 <HAL_TIM_IC_CaptureCallback+0x80>
			 }
			 else if (value2 < TIM_IC_1_Value_1)
 8000230:	4b52      	ldr	r3, [pc, #328]	; (800037c <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	68fa      	ldr	r2, [r7, #12]
 8000236:	429a      	cmp	r2, r3
 8000238:	d206      	bcs.n	8000248 <HAL_TIM_IC_CaptureCallback+0x80>
			 {
				 /* 0xFFFF is max TIM1_CCRx value */
				 Diff_value = ((65535 - TIM_IC_1_Value_1) + value2) + 1;
 800023a:	4b50      	ldr	r3, [pc, #320]	; (800037c <HAL_TIM_IC_CaptureCallback+0x1b4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	68fa      	ldr	r2, [r7, #12]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000246:	60bb      	str	r3, [r7, #8]
			 }
			 Write_IC_Channel1_Raw_data(&Diff_value);
 8000248:	f107 0308 	add.w	r3, r7, #8
 800024c:	4618      	mov	r0, r3
 800024e:	f002 fc77 	bl	8002b40 <Write_IC_Channel1_Raw_data>
			 TIM_IC_1_CaptureIndex = 0;
 8000252:	4b4b      	ldr	r3, [pc, #300]	; (8000380 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 8000258:	e087      	b.n	800036a <HAL_TIM_IC_CaptureCallback+0x1a2>
		}
	}
#if (IC_IN_USE>1)
	else if((htim->Instance == IC_2_TIM) && (htim->Channel == IC_2_TIM_ACT_CHANNEL))
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a46      	ldr	r2, [pc, #280]	; (8000378 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d13e      	bne.n	80002e2 <HAL_TIM_IC_CaptureCallback+0x11a>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	7f1b      	ldrb	r3, [r3, #28]
 8000268:	2b02      	cmp	r3, #2
 800026a:	d13a      	bne.n	80002e2 <HAL_TIM_IC_CaptureCallback+0x11a>
	{
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 800026c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000270:	691b      	ldr	r3, [r3, #16]
 8000272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000276:	2b00      	cmp	r3, #0
 8000278:	d00a      	beq.n	8000290 <HAL_TIM_IC_CaptureCallback+0xc8>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_2_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_2_TIM_CHANNEL);
 800027a:	2104      	movs	r1, #4
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f001 fe11 	bl	8001ea4 <HAL_TIM_ReadCapturedValue>
 8000282:	4602      	mov	r2, r0
 8000284:	4b3f      	ldr	r3, [pc, #252]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000286:	601a      	str	r2, [r3, #0]
			TIM_IC_2_CaptureIndex = 1;
 8000288:	4b3f      	ldr	r3, [pc, #252]	; (8000388 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 800028a:	2201      	movs	r2, #1
 800028c:	601a      	str	r2, [r3, #0]
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 800028e:	e06e      	b.n	800036e <HAL_TIM_IC_CaptureCallback+0x1a6>
		}
		else if(TIM_IC_2_CaptureIndex == 1)
 8000290:	4b3d      	ldr	r3, [pc, #244]	; (8000388 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d16a      	bne.n	800036e <HAL_TIM_IC_CaptureCallback+0x1a6>
		{
			 /* Get the 2nd Input Capture value */
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_2_TIM_CHANNEL);
 8000298:	2104      	movs	r1, #4
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f001 fe02 	bl	8001ea4 <HAL_TIM_ReadCapturedValue>
 80002a0:	60f8      	str	r0, [r7, #12]

			 /* Capture computation */
			 if (value2 > TIM_IC_2_Value_1)
 80002a2:	4b38      	ldr	r3, [pc, #224]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d905      	bls.n	80002b8 <HAL_TIM_IC_CaptureCallback+0xf0>
			 {
				 Diff_value = (value2 - TIM_IC_2_Value_1);
 80002ac:	4b35      	ldr	r3, [pc, #212]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	68fa      	ldr	r2, [r7, #12]
 80002b2:	1ad3      	subs	r3, r2, r3
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	e00b      	b.n	80002d0 <HAL_TIM_IC_CaptureCallback+0x108>
			 }
			 else if (value2 < TIM_IC_2_Value_1)
 80002b8:	4b32      	ldr	r3, [pc, #200]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d206      	bcs.n	80002d0 <HAL_TIM_IC_CaptureCallback+0x108>
			 {
				 /* 0xFFFF is max TIM1_CCRx value */
				 Diff_value = ((65535 - TIM_IC_2_Value_1) + value2) + 1;
 80002c2:	4b30      	ldr	r3, [pc, #192]	; (8000384 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	1ad3      	subs	r3, r2, r3
 80002ca:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80002ce:	60bb      	str	r3, [r7, #8]
			 }
			 Write_IC_Channel2_Raw_data(&Diff_value);
 80002d0:	f107 0308 	add.w	r3, r7, #8
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 fc43 	bl	8002b60 <Write_IC_Channel2_Raw_data>
			 TIM_IC_2_CaptureIndex = 0;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 80002e0:	e045      	b.n	800036e <HAL_TIM_IC_CaptureCallback+0x1a6>
		}
	}
#endif
#if (IC_IN_USE>2)
	else if((htim->Instance == IC_3_TIM) && (htim->Channel == IC_3_TIM_ACT_CHANNEL))
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a24      	ldr	r2, [pc, #144]	; (8000378 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d141      	bne.n	8000370 <HAL_TIM_IC_CaptureCallback+0x1a8>
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	7f1b      	ldrb	r3, [r3, #28]
 80002f0:	2b04      	cmp	r3, #4
 80002f2:	d13d      	bne.n	8000370 <HAL_TIM_IC_CaptureCallback+0x1a8>
	{
		if(IC_3_GPIO->IDR & IC_3_GPIO_PIN)
 80002f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d00a      	beq.n	8000318 <HAL_TIM_IC_CaptureCallback+0x150>
		{
			/* Get the 1st Input Capture value */
			TIM_IC_3_Value_1 = HAL_TIM_ReadCapturedValue(htim, IC_3_TIM_CHANNEL);
 8000302:	2108      	movs	r1, #8
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f001 fdcd 	bl	8001ea4 <HAL_TIM_ReadCapturedValue>
 800030a:	4602      	mov	r2, r0
 800030c:	4b1f      	ldr	r3, [pc, #124]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800030e:	601a      	str	r2, [r3, #0]
			TIM_IC_3_CaptureIndex = 1;
 8000310:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000312:	2201      	movs	r2, #1
 8000314:	601a      	str	r2, [r3, #0]
		}
	}
#endif


}
 8000316:	e02b      	b.n	8000370 <HAL_TIM_IC_CaptureCallback+0x1a8>
		else if(TIM_IC_3_CaptureIndex == 1)
 8000318:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d127      	bne.n	8000370 <HAL_TIM_IC_CaptureCallback+0x1a8>
			value2 = HAL_TIM_ReadCapturedValue(htim, IC_3_TIM_CHANNEL);
 8000320:	2108      	movs	r1, #8
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f001 fdbe 	bl	8001ea4 <HAL_TIM_ReadCapturedValue>
 8000328:	60f8      	str	r0, [r7, #12]
			 if (value2 > TIM_IC_3_Value_1)
 800032a:	4b18      	ldr	r3, [pc, #96]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	68fa      	ldr	r2, [r7, #12]
 8000330:	429a      	cmp	r2, r3
 8000332:	d905      	bls.n	8000340 <HAL_TIM_IC_CaptureCallback+0x178>
				 Diff_value = (value2 - TIM_IC_3_Value_1);
 8000334:	4b15      	ldr	r3, [pc, #84]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	68fa      	ldr	r2, [r7, #12]
 800033a:	1ad3      	subs	r3, r2, r3
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	e00b      	b.n	8000358 <HAL_TIM_IC_CaptureCallback+0x190>
			 else if (value2 < TIM_IC_3_Value_1)
 8000340:	4b12      	ldr	r3, [pc, #72]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	68fa      	ldr	r2, [r7, #12]
 8000346:	429a      	cmp	r2, r3
 8000348:	d206      	bcs.n	8000358 <HAL_TIM_IC_CaptureCallback+0x190>
				 Diff_value = ((65535 - TIM_IC_3_Value_1) + value2) + 1;
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	1ad3      	subs	r3, r2, r3
 8000352:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000356:	60bb      	str	r3, [r7, #8]
			 Write_IC_Channel3_Raw_data(&Diff_value);
 8000358:	f107 0308 	add.w	r3, r7, #8
 800035c:	4618      	mov	r0, r3
 800035e:	f002 fc0f 	bl	8002b80 <Write_IC_Channel3_Raw_data>
			 TIM_IC_3_CaptureIndex = 0;
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
}
 8000368:	e002      	b.n	8000370 <HAL_TIM_IC_CaptureCallback+0x1a8>
		if(IC_1_GPIO->IDR & IC_1_GPIO_PIN)
 800036a:	bf00      	nop
 800036c:	e000      	b.n	8000370 <HAL_TIM_IC_CaptureCallback+0x1a8>
		if(IC_2_GPIO->IDR & IC_2_GPIO_PIN)
 800036e:	bf00      	nop
}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40012c00 	.word	0x40012c00
 800037c:	20000058 	.word	0x20000058
 8000380:	20000060 	.word	0x20000060
 8000384:	200000a8 	.word	0x200000a8
 8000388:	20000064 	.word	0x20000064
 800038c:	2000005c 	.word	0x2000005c
 8000390:	200000ac 	.word	0x200000ac

08000394 <TIMx_PWM_Init>:
#include "Timer_PWM.h"



void TIMx_PWM_Init(TIM_PWM_Typedef config)
{
 8000394:	b084      	sub	sp, #16
 8000396:	b580      	push	{r7, lr}
 8000398:	b0a4      	sub	sp, #144	; 0x90
 800039a:	af00      	add	r7, sp, #0
 800039c:	f107 0c98 	add.w	ip, r7, #152	; 0x98
 80003a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80003b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
 80003c0:	615a      	str	r2, [r3, #20]
 80003c2:	619a      	str	r2, [r3, #24]
	uint32_t uhPrescalerValue;
	uint32_t Period_Value;
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80003c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	611a      	str	r2, [r3, #16]
	TIM_HandleTypeDef TIM_handler = {0};
 80003d4:	f107 030c 	add.w	r3, r7, #12
 80003d8:	2240      	movs	r2, #64	; 0x40
 80003da:	2100      	movs	r1, #0
 80003dc:	4618      	mov	r0, r3
 80003de:	f002 fe5f 	bl	80030a0 <memset>

	uhPrescalerValue = (uint32_t)(SystemCoreClock / TIMx_PWM_CLK) - 1;
 80003e2:	4b51      	ldr	r3, [pc, #324]	; (8000528 <TIMx_PWM_Init+0x194>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a51      	ldr	r2, [pc, #324]	; (800052c <TIMx_PWM_Init+0x198>)
 80003e8:	fba2 2303 	umull	r2, r3, r2, r3
 80003ec:	0d9b      	lsrs	r3, r3, #22
 80003ee:	3b01      	subs	r3, #1
 80003f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	Period_Value = (uint32_t)(TIMx_PWM_CLK / config.Frequency) - 1;
 80003f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80003f8:	4a4d      	ldr	r2, [pc, #308]	; (8000530 <TIMx_PWM_Init+0x19c>)
 80003fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80003fe:	3b01      	subs	r3, #1
 8000400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	TIM_handler.Instance				= config.TIMx;
 8000404:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000408:	60fb      	str	r3, [r7, #12]
	TIM_handler.Init.Prescaler       	= uhPrescalerValue;
 800040a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800040e:	613b      	str	r3, [r7, #16]
	TIM_handler.Init.Period          	= Period_Value;
 8000410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000414:	61bb      	str	r3, [r7, #24]
	TIM_handler.Init.CounterMode 		= TIM_COUNTERMODE_UP;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]
	TIM_handler.Init.ClockDivision 		= TIM_CLOCKDIVISION_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	61fb      	str	r3, [r7, #28]
	TIM_handler.Init.AutoReloadPreload 	= TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_TIM_PWM_Init(&TIM_handler) != HAL_OK)
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	4618      	mov	r0, r3
 8000428:	f001 fa80 	bl	800192c <HAL_TIM_PWM_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <TIMx_PWM_Init+0xa2>
	{
		Error_Handler();
 8000432:	f002 fd4f 	bl	8002ed4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000436:	2300      	movs	r3, #0
 8000438:	67fb      	str	r3, [r7, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_TIMEx_MasterConfigSynchronization(&TIM_handler, &sMasterConfig) != HAL_OK)
 8000440:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000444:	f107 030c 	add.w	r3, r7, #12
 8000448:	4611      	mov	r1, r2
 800044a:	4618      	mov	r0, r3
 800044c:	f002 f92c 	bl	80026a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <TIMx_PWM_Init+0xc6>
	{
		Error_Handler();
 8000456:	f002 fd3d 	bl	8002ed4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800045a:	2360      	movs	r3, #96	; 0x60
 800045c:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.Pulse = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000462:	2300      	movs	r3, #0
 8000464:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	673b      	str	r3, [r7, #112]	; 0x70
	if (HAL_TIM_PWM_ConfigChannel(&TIM_handler, &sConfigOC, config.TIM_channelx) != HAL_OK)
 800046a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800046e:	461a      	mov	r2, r3
 8000470:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000474:	f107 030c 	add.w	r3, r7, #12
 8000478:	4618      	mov	r0, r3
 800047a:	f001 fbfb 	bl	8001c74 <HAL_TIM_PWM_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <TIMx_PWM_Init+0xf4>
	{
		Error_Handler();
 8000484:	f002 fd26 	bl	8002ed4 <Error_Handler>
	}

	if(config.GPIOx == GPIOA)
 8000488:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800048c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000490:	d10c      	bne.n	80004ac <TIMx_PWM_Init+0x118>
	{

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000492:	4b28      	ldr	r3, [pc, #160]	; (8000534 <TIMx_PWM_Init+0x1a0>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	4a27      	ldr	r2, [pc, #156]	; (8000534 <TIMx_PWM_Init+0x1a0>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049e:	4b25      	ldr	r3, [pc, #148]	; (8000534 <TIMx_PWM_Init+0x1a0>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	e022      	b.n	80004f2 <TIMx_PWM_Init+0x15e>
	}
	else if(config.GPIOx == GPIOB)
 80004ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80004b0:	4a21      	ldr	r2, [pc, #132]	; (8000538 <TIMx_PWM_Init+0x1a4>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d10c      	bne.n	80004d0 <TIMx_PWM_Init+0x13c>
	{

	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b6:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <TIMx_PWM_Init+0x1a0>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	4a1e      	ldr	r2, [pc, #120]	; (8000534 <TIMx_PWM_Init+0x1a0>)
 80004bc:	f043 0302 	orr.w	r3, r3, #2
 80004c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <TIMx_PWM_Init+0x1a0>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	f003 0302 	and.w	r3, r3, #2
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	e010      	b.n	80004f2 <TIMx_PWM_Init+0x15e>
	}
	else if(config.GPIOx == GPIOC)
 80004d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80004d4:	4a19      	ldr	r2, [pc, #100]	; (800053c <TIMx_PWM_Init+0x1a8>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d10b      	bne.n	80004f2 <TIMx_PWM_Init+0x15e>
	{

	    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <TIMx_PWM_Init+0x1a0>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a15      	ldr	r2, [pc, #84]	; (8000534 <TIMx_PWM_Init+0x1a0>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <TIMx_PWM_Init+0x1a0>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]
	}
	GPIO_InitStruct.Alternate = config.GPIO_AlternateFunctionx;
 80004f2:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 80004f6:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_InitStruct.Pin = config.GPIO_Pinx;
 80004f8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80004fc:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fe:	2302      	movs	r3, #2
 8000500:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2300      	movs	r3, #0
 8000508:	65bb      	str	r3, [r7, #88]	; 0x58

	HAL_GPIO_Init(config.GPIOx, &GPIO_InitStruct);
 800050a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800050e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000512:	4611      	mov	r1, r2
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fa51 	bl	80009bc <HAL_GPIO_Init>

}
 800051a:	bf00      	nop
 800051c:	3790      	adds	r7, #144	; 0x90
 800051e:	46bd      	mov	sp, r7
 8000520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000524:	b004      	add	sp, #16
 8000526:	4770      	bx	lr
 8000528:	20000008 	.word	0x20000008
 800052c:	431bde83 	.word	0x431bde83
 8000530:	00f42400 	.word	0x00f42400
 8000534:	40021000 	.word	0x40021000
 8000538:	48000400 	.word	0x48000400
 800053c:	48000800 	.word	0x48000800

08000540 <TIMx_PWM_Start>:

void TIMx_PWM_Start(TIM_PWM_Typedef config)
{
 8000540:	b084      	sub	sp, #16
 8000542:	b580      	push	{r7, lr}
 8000544:	b090      	sub	sp, #64	; 0x40
 8000546:	af00      	add	r7, sp, #0
 8000548:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 800054c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_HandleTypeDef TIM_handler = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2240      	movs	r2, #64	; 0x40
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fda2 	bl	80030a0 <memset>

	TIM_handler.Instance = config.TIMx;
 800055c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800055e:	603b      	str	r3, [r7, #0]
	HAL_TIM_PWM_Start(&TIM_handler, config.TIM_channelx);
 8000560:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000564:	461a      	mov	r2, r3
 8000566:	463b      	mov	r3, r7
 8000568:	4611      	mov	r1, r2
 800056a:	4618      	mov	r0, r3
 800056c:	f001 fa0a 	bl	8001984 <HAL_TIM_PWM_Start>
}
 8000570:	bf00      	nop
 8000572:	3740      	adds	r7, #64	; 0x40
 8000574:	46bd      	mov	sp, r7
 8000576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800057a:	b004      	add	sp, #16
 800057c:	4770      	bx	lr
	...

08000580 <Change_PWM_Pulse>:
}



void Change_PWM_Pulse(TIM_PWM_Typedef config)
{
 8000580:	b084      	sub	sp, #16
 8000582:	b580      	push	{r7, lr}
 8000584:	b092      	sub	sp, #72	; 0x48
 8000586:	af00      	add	r7, sp, #0
 8000588:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 800058c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	TIM_HandleTypeDef TIM_handler = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2240      	movs	r2, #64	; 0x40
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fd82 	bl	80030a0 <memset>
	uint32_t Period_Value;
	uint32_t Pulse_Value;
	TIM_handler.Instance = config.TIMx;
 800059c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800059e:	603b      	str	r3, [r7, #0]
	Period_Value = (uint32_t)(TIMx_PWM_CLK / config.Frequency) - 1;
 80005a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005a2:	4a25      	ldr	r2, [pc, #148]	; (8000638 <Change_PWM_Pulse+0xb8>)
 80005a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a8:	3b01      	subs	r3, #1
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
	if(config.Duty_Cicle == 0)
 80005ac:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d102      	bne.n	80005ba <Change_PWM_Pulse+0x3a>
	{
		Pulse_Value = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
 80005b8:	e00b      	b.n	80005d2 <Change_PWM_Pulse+0x52>
	}
	else
	{
		Pulse_Value = (uint32_t)((Period_Value * config.Duty_Cicle) / 100 - 1);
 80005ba:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80005be:	461a      	mov	r2, r3
 80005c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005c2:	fb03 f302 	mul.w	r3, r3, r2
 80005c6:	4a1d      	ldr	r2, [pc, #116]	; (800063c <Change_PWM_Pulse+0xbc>)
 80005c8:	fba2 2303 	umull	r2, r3, r2, r3
 80005cc:	095b      	lsrs	r3, r3, #5
 80005ce:	3b01      	subs	r3, #1
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 80005d2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d103      	bne.n	80005e2 <Change_PWM_Pulse+0x62>
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80005de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005e0:	e022      	b.n	8000628 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 80005e2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d103      	bne.n	80005f2 <Change_PWM_Pulse+0x72>
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80005ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005f0:	e01a      	b.n	8000628 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 80005f2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80005f6:	2b08      	cmp	r3, #8
 80005f8:	d103      	bne.n	8000602 <Change_PWM_Pulse+0x82>
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80005fe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000600:	e012      	b.n	8000628 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 8000602:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000606:	2b0c      	cmp	r3, #12
 8000608:	d103      	bne.n	8000612 <Change_PWM_Pulse+0x92>
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800060e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000610:	e00a      	b.n	8000628 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 8000612:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000616:	2b10      	cmp	r3, #16
 8000618:	d103      	bne.n	8000622 <Change_PWM_Pulse+0xa2>
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800061e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000620:	e002      	b.n	8000628 <Change_PWM_Pulse+0xa8>
	__HAL_TIM_SET_COMPARE(&TIM_handler, config.TIM_channelx, Pulse_Value);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000626:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000628:	bf00      	nop
 800062a:	3748      	adds	r7, #72	; 0x48
 800062c:	46bd      	mov	sp, r7
 800062e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000632:	b004      	add	sp, #16
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	00f42400 	.word	0x00f42400
 800063c:	51eb851f 	.word	0x51eb851f

08000640 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8000640:	b480      	push	{r7}
 8000642:	b087      	sub	sp, #28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	if ((htim->Instance == TIM1))
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <HAL_TIM_PWM_MspInit+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d10c      	bne.n	800066c <HAL_TIM_PWM_MspInit+0x2c>
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM1_CLK_ENABLE();
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <HAL_TIM_PWM_MspInit+0x84>)
 8000654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000656:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <HAL_TIM_PWM_MspInit+0x84>)
 8000658:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800065c:	6613      	str	r3, [r2, #96]	; 0x60
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <HAL_TIM_PWM_MspInit+0x84>)
 8000660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697b      	ldr	r3, [r7, #20]
	else if ((htim->Instance == TIM3))
	{
		/* Peripheral clock enable */
	    __HAL_RCC_TIM3_CLK_ENABLE();
	}
}
 800066a:	e022      	b.n	80006b2 <HAL_TIM_PWM_MspInit+0x72>
	else if ((htim->Instance == TIM2))
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000674:	d10c      	bne.n	8000690 <HAL_TIM_PWM_MspInit+0x50>
	    __HAL_RCC_TIM2_CLK_ENABLE();
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <HAL_TIM_PWM_MspInit+0x84>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <HAL_TIM_PWM_MspInit+0x84>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6593      	str	r3, [r2, #88]	; 0x58
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <HAL_TIM_PWM_MspInit+0x84>)
 8000684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
}
 800068e:	e010      	b.n	80006b2 <HAL_TIM_PWM_MspInit+0x72>
	else if ((htim->Instance == TIM3))
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <HAL_TIM_PWM_MspInit+0x88>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d10b      	bne.n	80006b2 <HAL_TIM_PWM_MspInit+0x72>
	    __HAL_RCC_TIM3_CLK_ENABLE();
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <HAL_TIM_PWM_MspInit+0x84>)
 800069c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069e:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <HAL_TIM_PWM_MspInit+0x84>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	6593      	str	r3, [r2, #88]	; 0x58
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <HAL_TIM_PWM_MspInit+0x84>)
 80006a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
}
 80006b2:	bf00      	nop
 80006b4:	371c      	adds	r7, #28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40012c00 	.word	0x40012c00
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40000400 	.word	0x40000400

080006cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006d2:	2300      	movs	r3, #0
 80006d4:	71fb      	strb	r3, [r7, #7]
#if (INSTRUCTION_CACHE_ENABLE == 0)
   __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_Init+0x3c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <HAL_Init+0x3c>)
 80006dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006e0:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e2:	2003      	movs	r0, #3
 80006e4:	f000 f928 	bl	8000938 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 f80f 	bl	800070c <HAL_InitTick>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d002      	beq.n	80006fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80006f4:	2301      	movs	r3, #1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	e001      	b.n	80006fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006fa:	f002 fbef 	bl	8002edc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006fe:	79fb      	ldrb	r3, [r7, #7]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40022000 	.word	0x40022000

0800070c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_InitTick+0x68>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d022      	beq.n	8000766 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <HAL_InitTick+0x6c>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <HAL_InitTick+0x68>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800072c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000730:	fbb2 f3f3 	udiv	r3, r2, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f934 	bl	80009a2 <HAL_SYSTICK_Config>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10f      	bne.n	8000760 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b0f      	cmp	r3, #15
 8000744:	d809      	bhi.n	800075a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000746:	2200      	movs	r2, #0
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800074e:	f000 f8fe 	bl	800094e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <HAL_InitTick+0x70>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	e007      	b.n	800076a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e004      	b.n	800076a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	e001      	b.n	800076a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000004 	.word	0x20000004
 8000778:	20000008 	.word	0x20000008
 800077c:	20000000 	.word	0x20000000

08000780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <HAL_GetTick+0x14>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	200000b0 	.word	0x200000b0

08000798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b4:	4013      	ands	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ca:	4a04      	ldr	r2, [pc, #16]	; (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	60d3      	str	r3, [r2, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <__NVIC_GetPriorityGrouping+0x18>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	f003 0307 	and.w	r3, r3, #7
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	db0b      	blt.n	8000826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 021f 	and.w	r2, r3, #31
 8000814:	4907      	ldr	r1, [pc, #28]	; (8000834 <__NVIC_EnableIRQ+0x38>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	095b      	lsrs	r3, r3, #5
 800081c:	2001      	movs	r0, #1
 800081e:	fa00 f202 	lsl.w	r2, r0, r2
 8000822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000e100 	.word	0xe000e100

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db0a      	blt.n	8000862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	490c      	ldr	r1, [pc, #48]	; (8000884 <__NVIC_SetPriority+0x4c>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	440b      	add	r3, r1
 800085c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000860:	e00a      	b.n	8000878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4908      	ldr	r1, [pc, #32]	; (8000888 <__NVIC_SetPriority+0x50>)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f003 030f 	and.w	r3, r3, #15
 800086e:	3b04      	subs	r3, #4
 8000870:	0112      	lsls	r2, r2, #4
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	440b      	add	r3, r1
 8000876:	761a      	strb	r2, [r3, #24]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000e100 	.word	0xe000e100
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f1c3 0307 	rsb	r3, r3, #7
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	bf28      	it	cs
 80008aa:	2304      	movcs	r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3304      	adds	r3, #4
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d902      	bls.n	80008bc <NVIC_EncodePriority+0x30>
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3b03      	subs	r3, #3
 80008ba:	e000      	b.n	80008be <NVIC_EncodePriority+0x32>
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43da      	mvns	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	401a      	ands	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	43d9      	mvns	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	4313      	orrs	r3, r2
         );
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	; 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000904:	d301      	bcc.n	800090a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000906:	2301      	movs	r3, #1
 8000908:	e00f      	b.n	800092a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <SysTick_Config+0x40>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000912:	210f      	movs	r1, #15
 8000914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000918:	f7ff ff8e 	bl	8000838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <SysTick_Config+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <SysTick_Config+0x40>)
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e000e010 	.word	0xe000e010

08000938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff29 	bl	8000798 <__NVIC_SetPriorityGrouping>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000960:	f7ff ff3e 	bl	80007e0 <__NVIC_GetPriorityGrouping>
 8000964:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	6978      	ldr	r0, [r7, #20]
 800096c:	f7ff ff8e 	bl	800088c <NVIC_EncodePriority>
 8000970:	4602      	mov	r2, r0
 8000972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff5d 	bl	8000838 <__NVIC_SetPriority>
}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff31 	bl	80007fc <__NVIC_EnableIRQ>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffa2 	bl	80008f4 <SysTick_Config>
 80009b0:	4603      	mov	r3, r0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009bc:	b480      	push	{r7}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ca:	e17f      	b.n	8000ccc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	2101      	movs	r1, #1
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	fa01 f303 	lsl.w	r3, r1, r3
 80009d8:	4013      	ands	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f000 8171 	beq.w	8000cc6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d003      	beq.n	80009f4 <HAL_GPIO_Init+0x38>
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b12      	cmp	r3, #18
 80009f2:	d123      	bne.n	8000a3c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	08da      	lsrs	r2, r3, #3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3208      	adds	r2, #8
 80009fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f003 0307 	and.w	r3, r3, #7
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	691a      	ldr	r2, [r3, #16]
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	08da      	lsrs	r2, r3, #3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3208      	adds	r2, #8
 8000a36:	6939      	ldr	r1, [r7, #16]
 8000a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0203 	and.w	r2, r3, #3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d00b      	beq.n	8000a90 <HAL_GPIO_Init+0xd4>
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d007      	beq.n	8000a90 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a84:	2b11      	cmp	r3, #17
 8000a86:	d003      	beq.n	8000a90 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2b12      	cmp	r3, #18
 8000a8e:	d130      	bne.n	8000af2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68da      	ldr	r2, [r3, #12]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	091b      	lsrs	r3, r3, #4
 8000adc:	f003 0201 	and.w	r2, r3, #1
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d118      	bne.n	8000b30 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b04:	2201      	movs	r2, #1
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	08db      	lsrs	r3, r3, #3
 8000b1a:	f003 0201 	and.w	r2, r3, #1
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f000 80ac 	beq.w	8000cc6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b5e      	ldr	r3, [pc, #376]	; (8000ce8 <HAL_GPIO_Init+0x32c>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	4a5d      	ldr	r2, [pc, #372]	; (8000ce8 <HAL_GPIO_Init+0x32c>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7a:	4b5b      	ldr	r3, [pc, #364]	; (8000ce8 <HAL_GPIO_Init+0x32c>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b86:	4a59      	ldr	r2, [pc, #356]	; (8000cec <HAL_GPIO_Init+0x330>)
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	089b      	lsrs	r3, r3, #2
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f003 0303 	and.w	r3, r3, #3
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	220f      	movs	r2, #15
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bb0:	d025      	beq.n	8000bfe <HAL_GPIO_Init+0x242>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a4e      	ldr	r2, [pc, #312]	; (8000cf0 <HAL_GPIO_Init+0x334>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d01f      	beq.n	8000bfa <HAL_GPIO_Init+0x23e>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a4d      	ldr	r2, [pc, #308]	; (8000cf4 <HAL_GPIO_Init+0x338>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d019      	beq.n	8000bf6 <HAL_GPIO_Init+0x23a>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a4c      	ldr	r2, [pc, #304]	; (8000cf8 <HAL_GPIO_Init+0x33c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d013      	beq.n	8000bf2 <HAL_GPIO_Init+0x236>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a4b      	ldr	r2, [pc, #300]	; (8000cfc <HAL_GPIO_Init+0x340>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d00d      	beq.n	8000bee <HAL_GPIO_Init+0x232>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a4a      	ldr	r2, [pc, #296]	; (8000d00 <HAL_GPIO_Init+0x344>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d007      	beq.n	8000bea <HAL_GPIO_Init+0x22e>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a49      	ldr	r2, [pc, #292]	; (8000d04 <HAL_GPIO_Init+0x348>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_GPIO_Init+0x22a>
 8000be2:	2306      	movs	r3, #6
 8000be4:	e00c      	b.n	8000c00 <HAL_GPIO_Init+0x244>
 8000be6:	2307      	movs	r3, #7
 8000be8:	e00a      	b.n	8000c00 <HAL_GPIO_Init+0x244>
 8000bea:	2305      	movs	r3, #5
 8000bec:	e008      	b.n	8000c00 <HAL_GPIO_Init+0x244>
 8000bee:	2304      	movs	r3, #4
 8000bf0:	e006      	b.n	8000c00 <HAL_GPIO_Init+0x244>
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e004      	b.n	8000c00 <HAL_GPIO_Init+0x244>
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	e002      	b.n	8000c00 <HAL_GPIO_Init+0x244>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e000      	b.n	8000c00 <HAL_GPIO_Init+0x244>
 8000bfe:	2300      	movs	r3, #0
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	f002 0203 	and.w	r2, r2, #3
 8000c06:	0092      	lsls	r2, r2, #2
 8000c08:	4093      	lsls	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c10:	4936      	ldr	r1, [pc, #216]	; (8000cec <HAL_GPIO_Init+0x330>)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	3302      	adds	r3, #2
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c1e:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <HAL_GPIO_Init+0x34c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	43db      	mvns	r3, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c42:	4a31      	ldr	r2, [pc, #196]	; (8000d08 <HAL_GPIO_Init+0x34c>)
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000c48:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <HAL_GPIO_Init+0x34c>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c6c:	4a26      	ldr	r2, [pc, #152]	; (8000d08 <HAL_GPIO_Init+0x34c>)
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c72:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <HAL_GPIO_Init+0x34c>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <HAL_GPIO_Init+0x34c>)
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <HAL_GPIO_Init+0x34c>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cc0:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <HAL_GPIO_Init+0x34c>)
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f47f ae78 	bne.w	80009cc <HAL_GPIO_Init+0x10>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	371c      	adds	r7, #28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	48000400 	.word	0x48000400
 8000cf4:	48000800 	.word	0x48000800
 8000cf8:	48000c00 	.word	0x48000c00
 8000cfc:	48001000 	.word	0x48001000
 8000d00:	48001400 	.word	0x48001400
 8000d04:	48001800 	.word	0x48001800
 8000d08:	40010400 	.word	0x40010400

08000d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d1c:	787b      	ldrb	r3, [r7, #1]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d28:	e002      	b.n	8000d30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d2a:	887a      	ldrh	r2, [r7, #2]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d48:	695a      	ldr	r2, [r3, #20]
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d006      	beq.n	8000d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 f88c 	bl	8002e78 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40010400 	.word	0x40010400

08000d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40007000 	.word	0x40007000

08000d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d96:	d130      	bne.n	8000dfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000da4:	d038      	beq.n	8000e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da6:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2232      	movs	r2, #50	; 0x32
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	0c9b      	lsrs	r3, r3, #18
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dcc:	e002      	b.n	8000dd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de0:	d102      	bne.n	8000de8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1f2      	bne.n	8000dce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000df4:	d110      	bne.n	8000e18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e00f      	b.n	8000e1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e06:	d007      	beq.n	8000e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e10:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40007000 	.word	0x40007000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	431bde83 	.word	0x431bde83

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e39d      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e46:	4ba4      	ldr	r3, [pc, #656]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e50:	4ba1      	ldr	r3, [pc, #644]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 80e1 	beq.w	800102a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d007      	beq.n	8000e7e <HAL_RCC_OscConfig+0x4a>
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	2b0c      	cmp	r3, #12
 8000e72:	f040 8088 	bne.w	8000f86 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	f040 8084 	bne.w	8000f86 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e7e:	4b96      	ldr	r3, [pc, #600]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d005      	beq.n	8000e96 <HAL_RCC_OscConfig+0x62>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e375      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a1a      	ldr	r2, [r3, #32]
 8000e9a:	4b8f      	ldr	r3, [pc, #572]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x7c>
 8000ea6:	4b8c      	ldr	r3, [pc, #560]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eae:	e005      	b.n	8000ebc <HAL_RCC_OscConfig+0x88>
 8000eb0:	4b89      	ldr	r3, [pc, #548]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d223      	bcs.n	8000f08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fcd1 	bl	800186c <RCC_SetFlashLatencyFromMSIRange>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e356      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ed4:	4b80      	ldr	r3, [pc, #512]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a7f      	ldr	r2, [pc, #508]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b7d      	ldr	r3, [pc, #500]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	497a      	ldr	r1, [pc, #488]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ef2:	4b79      	ldr	r3, [pc, #484]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	4975      	ldr	r1, [pc, #468]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	604b      	str	r3, [r1, #4]
 8000f06:	e022      	b.n	8000f4e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f08:	4b73      	ldr	r3, [pc, #460]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a72      	ldr	r2, [pc, #456]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000f0e:	f043 0308 	orr.w	r3, r3, #8
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b70      	ldr	r3, [pc, #448]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	496d      	ldr	r1, [pc, #436]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f26:	4b6c      	ldr	r3, [pc, #432]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	4968      	ldr	r1, [pc, #416]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fc94 	bl	800186c <RCC_SetFlashLatencyFromMSIRange>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e319      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f4e:	f000 fc03 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8000f52:	4601      	mov	r1, r0
 8000f54:	4b60      	ldr	r3, [pc, #384]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	091b      	lsrs	r3, r3, #4
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	4a5f      	ldr	r2, [pc, #380]	; (80010dc <HAL_RCC_OscConfig+0x2a8>)
 8000f60:	5cd3      	ldrb	r3, [r2, r3]
 8000f62:	f003 031f 	and.w	r3, r3, #31
 8000f66:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6a:	4a5d      	ldr	r2, [pc, #372]	; (80010e0 <HAL_RCC_OscConfig+0x2ac>)
 8000f6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f6e:	4b5d      	ldr	r3, [pc, #372]	; (80010e4 <HAL_RCC_OscConfig+0x2b0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fbca 	bl	800070c <HAL_InitTick>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d052      	beq.n	8001028 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	e2fd      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d032      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f8e:	4b52      	ldr	r3, [pc, #328]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a51      	ldr	r2, [pc, #324]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fbf1 	bl	8000780 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fa2:	f7ff fbed 	bl	8000780 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e2e6      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fb4:	4b48      	ldr	r3, [pc, #288]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fc0:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a44      	ldr	r2, [pc, #272]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	493f      	ldr	r1, [pc, #252]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fde:	4b3e      	ldr	r3, [pc, #248]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	493a      	ldr	r1, [pc, #232]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	604b      	str	r3, [r1, #4]
 8000ff2:	e01a      	b.n	800102a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ff4:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a37      	ldr	r2, [pc, #220]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000ffa:	f023 0301 	bic.w	r3, r3, #1
 8000ffe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001000:	f7ff fbbe 	bl	8000780 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001008:	f7ff fbba 	bl	8000780 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e2b3      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0x1d4>
 8001026:	e000      	b.n	800102a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001028:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d074      	beq.n	8001120 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2b08      	cmp	r3, #8
 800103a:	d005      	beq.n	8001048 <HAL_RCC_OscConfig+0x214>
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b0c      	cmp	r3, #12
 8001040:	d10e      	bne.n	8001060 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d10b      	bne.n	8001060 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d064      	beq.n	800111e <HAL_RCC_OscConfig+0x2ea>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d160      	bne.n	800111e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e290      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001068:	d106      	bne.n	8001078 <HAL_RCC_OscConfig+0x244>
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8001070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e01d      	b.n	80010b4 <HAL_RCC_OscConfig+0x280>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0x268>
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8001088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8001094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e00b      	b.n	80010b4 <HAL_RCC_OscConfig+0x280>
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 80010a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 80010ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d01c      	beq.n	80010f6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010bc:	f7ff fb60 	bl	8000780 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010c2:	e011      	b.n	80010e8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fb5c 	bl	8000780 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d90a      	bls.n	80010e8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e255      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
 80010dc:	080030c8 	.word	0x080030c8
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010e8:	4bae      	ldr	r3, [pc, #696]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0e7      	beq.n	80010c4 <HAL_RCC_OscConfig+0x290>
 80010f4:	e014      	b.n	8001120 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f6:	f7ff fb43 	bl	8000780 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010fe:	f7ff fb3f 	bl	8000780 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b64      	cmp	r3, #100	; 0x64
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e238      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001110:	4ba4      	ldr	r3, [pc, #656]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f0      	bne.n	80010fe <HAL_RCC_OscConfig+0x2ca>
 800111c:	e000      	b.n	8001120 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d060      	beq.n	80011ee <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2b04      	cmp	r3, #4
 8001130:	d005      	beq.n	800113e <HAL_RCC_OscConfig+0x30a>
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	2b0c      	cmp	r3, #12
 8001136:	d119      	bne.n	800116c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d116      	bne.n	800116c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800113e:	4b99      	ldr	r3, [pc, #612]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <HAL_RCC_OscConfig+0x322>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e215      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001156:	4b93      	ldr	r3, [pc, #588]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	061b      	lsls	r3, r3, #24
 8001164:	498f      	ldr	r1, [pc, #572]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001166:	4313      	orrs	r3, r2
 8001168:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800116a:	e040      	b.n	80011ee <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d023      	beq.n	80011bc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001174:	4b8b      	ldr	r3, [pc, #556]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a8a      	ldr	r2, [pc, #552]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001180:	f7ff fafe 	bl	8000780 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001188:	f7ff fafa 	bl	8000780 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e1f3      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800119a:	4b82      	ldr	r3, [pc, #520]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	4b7f      	ldr	r3, [pc, #508]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	061b      	lsls	r3, r3, #24
 80011b4:	497b      	ldr	r1, [pc, #492]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
 80011ba:	e018      	b.n	80011ee <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011bc:	4b79      	ldr	r3, [pc, #484]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a78      	ldr	r2, [pc, #480]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 80011c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fada 	bl	8000780 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d0:	f7ff fad6 	bl	8000780 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e1cf      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011e2:	4b70      	ldr	r3, [pc, #448]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d03c      	beq.n	8001274 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d01c      	beq.n	800123c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001202:	4b68      	ldr	r3, [pc, #416]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001208:	4a66      	ldr	r2, [pc, #408]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001212:	f7ff fab5 	bl	8000780 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121a:	f7ff fab1 	bl	8000780 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e1aa      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800122c:	4b5d      	ldr	r3, [pc, #372]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 800122e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0ef      	beq.n	800121a <HAL_RCC_OscConfig+0x3e6>
 800123a:	e01b      	b.n	8001274 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800123c:	4b59      	ldr	r3, [pc, #356]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 800123e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001242:	4a58      	ldr	r2, [pc, #352]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff fa98 	bl	8000780 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fa94 	bl	8000780 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e18d      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001266:	4b4f      	ldr	r3, [pc, #316]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1ef      	bne.n	8001254 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80a5 	beq.w	80013cc <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001286:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10d      	bne.n	80012ae <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	4a43      	ldr	r2, [pc, #268]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6593      	str	r3, [r2, #88]	; 0x58
 800129e:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012aa:	2301      	movs	r3, #1
 80012ac:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ae:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <HAL_RCC_OscConfig+0x574>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d118      	bne.n	80012ec <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <HAL_RCC_OscConfig+0x574>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a3a      	ldr	r2, [pc, #232]	; (80013a8 <HAL_RCC_OscConfig+0x574>)
 80012c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fa5b 	bl	8000780 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ce:	f7ff fa57 	bl	8000780 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e150      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <HAL_RCC_OscConfig+0x574>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d108      	bne.n	8001306 <HAL_RCC_OscConfig+0x4d2>
 80012f4:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 80012f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012fa:	4a2a      	ldr	r2, [pc, #168]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001304:	e024      	b.n	8001350 <HAL_RCC_OscConfig+0x51c>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2b05      	cmp	r3, #5
 800130c:	d110      	bne.n	8001330 <HAL_RCC_OscConfig+0x4fc>
 800130e:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001314:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001324:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800132e:	e00f      	b.n	8001350 <HAL_RCC_OscConfig+0x51c>
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001336:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001348:	f023 0304 	bic.w	r3, r3, #4
 800134c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d016      	beq.n	8001386 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001358:	f7ff fa12 	bl	8000780 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800135e:	e00a      	b.n	8001376 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001360:	f7ff fa0e 	bl	8000780 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f241 3288 	movw	r2, #5000	; 0x1388
 800136e:	4293      	cmp	r3, r2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e105      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_RCC_OscConfig+0x570>)
 8001378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0ed      	beq.n	8001360 <HAL_RCC_OscConfig+0x52c>
 8001384:	e019      	b.n	80013ba <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001386:	f7ff f9fb 	bl	8000780 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800138c:	e00e      	b.n	80013ac <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f7ff f9f7 	bl	8000780 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f241 3288 	movw	r2, #5000	; 0x1388
 800139c:	4293      	cmp	r3, r2
 800139e:	d905      	bls.n	80013ac <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e0ee      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ac:	4b77      	ldr	r3, [pc, #476]	; (800158c <HAL_RCC_OscConfig+0x758>)
 80013ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1e9      	bne.n	800138e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ba:	7ffb      	ldrb	r3, [r7, #31]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d105      	bne.n	80013cc <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c0:	4b72      	ldr	r3, [pc, #456]	; (800158c <HAL_RCC_OscConfig+0x758>)
 80013c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c4:	4a71      	ldr	r2, [pc, #452]	; (800158c <HAL_RCC_OscConfig+0x758>)
 80013c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80d5 	beq.w	8001580 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	2b0c      	cmp	r3, #12
 80013da:	f000 808e 	beq.w	80014fa <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d15b      	bne.n	800149e <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e6:	4b69      	ldr	r3, [pc, #420]	; (800158c <HAL_RCC_OscConfig+0x758>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a68      	ldr	r2, [pc, #416]	; (800158c <HAL_RCC_OscConfig+0x758>)
 80013ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f2:	f7ff f9c5 	bl	8000780 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff f9c1 	bl	8000780 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e0ba      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800140c:	4b5f      	ldr	r3, [pc, #380]	; (800158c <HAL_RCC_OscConfig+0x758>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f0      	bne.n	80013fa <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001418:	4b5c      	ldr	r3, [pc, #368]	; (800158c <HAL_RCC_OscConfig+0x758>)
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	4b5c      	ldr	r3, [pc, #368]	; (8001590 <HAL_RCC_OscConfig+0x75c>)
 800141e:	4013      	ands	r3, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001428:	3a01      	subs	r2, #1
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	4311      	orrs	r1, r2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001432:	0212      	lsls	r2, r2, #8
 8001434:	4311      	orrs	r1, r2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800143a:	0852      	lsrs	r2, r2, #1
 800143c:	3a01      	subs	r2, #1
 800143e:	0552      	lsls	r2, r2, #21
 8001440:	4311      	orrs	r1, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001446:	0852      	lsrs	r2, r2, #1
 8001448:	3a01      	subs	r2, #1
 800144a:	0652      	lsls	r2, r2, #25
 800144c:	4311      	orrs	r1, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001452:	0912      	lsrs	r2, r2, #4
 8001454:	0452      	lsls	r2, r2, #17
 8001456:	430a      	orrs	r2, r1
 8001458:	494c      	ldr	r1, [pc, #304]	; (800158c <HAL_RCC_OscConfig+0x758>)
 800145a:	4313      	orrs	r3, r2
 800145c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800145e:	4b4b      	ldr	r3, [pc, #300]	; (800158c <HAL_RCC_OscConfig+0x758>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a4a      	ldr	r2, [pc, #296]	; (800158c <HAL_RCC_OscConfig+0x758>)
 8001464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001468:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800146a:	4b48      	ldr	r3, [pc, #288]	; (800158c <HAL_RCC_OscConfig+0x758>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	4a47      	ldr	r2, [pc, #284]	; (800158c <HAL_RCC_OscConfig+0x758>)
 8001470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001474:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001476:	f7ff f983 	bl	8000780 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff f97f 	bl	8000780 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e078      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001490:	4b3e      	ldr	r3, [pc, #248]	; (800158c <HAL_RCC_OscConfig+0x758>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x64a>
 800149c:	e070      	b.n	8001580 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_RCC_OscConfig+0x758>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a3a      	ldr	r2, [pc, #232]	; (800158c <HAL_RCC_OscConfig+0x758>)
 80014a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014a8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80014aa:	4b38      	ldr	r3, [pc, #224]	; (800158c <HAL_RCC_OscConfig+0x758>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d105      	bne.n	80014c2 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014b6:	4b35      	ldr	r3, [pc, #212]	; (800158c <HAL_RCC_OscConfig+0x758>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	4a34      	ldr	r2, [pc, #208]	; (800158c <HAL_RCC_OscConfig+0x758>)
 80014bc:	f023 0303 	bic.w	r3, r3, #3
 80014c0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014c2:	4b32      	ldr	r3, [pc, #200]	; (800158c <HAL_RCC_OscConfig+0x758>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	4a31      	ldr	r2, [pc, #196]	; (800158c <HAL_RCC_OscConfig+0x758>)
 80014c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d2:	f7ff f955 	bl	8000780 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014da:	f7ff f951 	bl	8000780 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e04a      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <HAL_RCC_OscConfig+0x758>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f0      	bne.n	80014da <HAL_RCC_OscConfig+0x6a6>
 80014f8:	e042      	b.n	8001580 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e03d      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_RCC_OscConfig+0x758>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f003 0203 	and.w	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	429a      	cmp	r2, r3
 8001518:	d130      	bne.n	800157c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	3b01      	subs	r3, #1
 8001526:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d127      	bne.n	800157c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001536:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d11f      	bne.n	800157c <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001546:	2a07      	cmp	r2, #7
 8001548:	bf14      	ite	ne
 800154a:	2201      	movne	r2, #1
 800154c:	2200      	moveq	r2, #0
 800154e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001550:	4293      	cmp	r3, r2
 8001552:	d113      	bne.n	800157c <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155e:	085b      	lsrs	r3, r3, #1
 8001560:	3b01      	subs	r3, #1
 8001562:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001564:	429a      	cmp	r2, r3
 8001566:	d109      	bne.n	800157c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	3b01      	subs	r3, #1
 8001576:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	f99d808c 	.word	0xf99d808c

08001594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0c8      	b.n	800173a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a8:	4b66      	ldr	r3, [pc, #408]	; (8001744 <HAL_RCC_ClockConfig+0x1b0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d910      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b63      	ldr	r3, [pc, #396]	; (8001744 <HAL_RCC_ClockConfig+0x1b0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 0207 	bic.w	r2, r3, #7
 80015be:	4961      	ldr	r1, [pc, #388]	; (8001744 <HAL_RCC_ClockConfig+0x1b0>)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <HAL_RCC_ClockConfig+0x1b0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0b0      	b.n	800173a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d04c      	beq.n	800167e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d107      	bne.n	80015fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ec:	4b56      	ldr	r3, [pc, #344]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d121      	bne.n	800163c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e09e      	b.n	800173a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d107      	bne.n	8001614 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d115      	bne.n	800163c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e092      	b.n	800173a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d107      	bne.n	800162c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800161c:	4b4a      	ldr	r3, [pc, #296]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d109      	bne.n	800163c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e086      	b.n	800173a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800162c:	4b46      	ldr	r3, [pc, #280]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e07e      	b.n	800173a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800163c:	4b42      	ldr	r3, [pc, #264]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f023 0203 	bic.w	r2, r3, #3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	493f      	ldr	r1, [pc, #252]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800164e:	f7ff f897 	bl	8000780 <HAL_GetTick>
 8001652:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001654:	e00a      	b.n	800166c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001656:	f7ff f893 	bl	8000780 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f241 3288 	movw	r2, #5000	; 0x1388
 8001664:	4293      	cmp	r3, r2
 8001666:	d901      	bls.n	800166c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e066      	b.n	800173a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166c:	4b36      	ldr	r3, [pc, #216]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 020c 	and.w	r2, r3, #12
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	429a      	cmp	r2, r3
 800167c:	d1eb      	bne.n	8001656 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168a:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	492c      	ldr	r1, [pc, #176]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 8001698:	4313      	orrs	r3, r2
 800169a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800169c:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_RCC_ClockConfig+0x1b0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d210      	bcs.n	80016cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_RCC_ClockConfig+0x1b0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 0207 	bic.w	r2, r3, #7
 80016b2:	4924      	ldr	r1, [pc, #144]	; (8001744 <HAL_RCC_ClockConfig+0x1b0>)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_RCC_ClockConfig+0x1b0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e036      	b.n	800173a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4918      	ldr	r1, [pc, #96]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d009      	beq.n	800170a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4910      	ldr	r1, [pc, #64]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800170a:	f000 f825 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 800170e:	4601      	mov	r1, r0
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_RCC_ClockConfig+0x1b4>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	4a0c      	ldr	r2, [pc, #48]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	5cd3      	ldrb	r3, [r2, r3]
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	fa21 f303 	lsr.w	r3, r1, r3
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ffec 	bl	800070c <HAL_InitTick>
 8001734:	4603      	mov	r3, r0
 8001736:	72fb      	strb	r3, [r7, #11]

  return status;
 8001738:	7afb      	ldrb	r3, [r7, #11]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40022000 	.word	0x40022000
 8001748:	40021000 	.word	0x40021000
 800174c:	080030c8 	.word	0x080030c8
 8001750:	20000008 	.word	0x20000008
 8001754:	20000000 	.word	0x20000000

08001758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <HAL_RCC_GetSysClockFreq+0x104>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001770:	4b3a      	ldr	r3, [pc, #232]	; (800185c <HAL_RCC_GetSysClockFreq+0x104>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_GetSysClockFreq+0x34>
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	2b0c      	cmp	r3, #12
 8001784:	d121      	bne.n	80017ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d11e      	bne.n	80017ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800178c:	4b33      	ldr	r3, [pc, #204]	; (800185c <HAL_RCC_GetSysClockFreq+0x104>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001798:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_RCC_GetSysClockFreq+0x104>)
 800179a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	e005      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017a8:	4b2c      	ldr	r3, [pc, #176]	; (800185c <HAL_RCC_GetSysClockFreq+0x104>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017b4:	4a2a      	ldr	r2, [pc, #168]	; (8001860 <HAL_RCC_GetSysClockFreq+0x108>)
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10d      	bne.n	80017e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d102      	bne.n	80017d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	e004      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_RCC_GetSysClockFreq+0x110>)
 80017de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	d133      	bne.n	800184e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_RCC_GetSysClockFreq+0x104>)
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d002      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0xa4>
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_GetSysClockFreq+0xaa>
 80017fa:	e005      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017fe:	617b      	str	r3, [r7, #20]
      break;
 8001800:	e005      	b.n	800180e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001802:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_RCC_GetSysClockFreq+0x110>)
 8001804:	617b      	str	r3, [r7, #20]
      break;
 8001806:	e002      	b.n	800180e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	617b      	str	r3, [r7, #20]
      break;
 800180c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_RCC_GetSysClockFreq+0x104>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	3301      	adds	r3, #1
 800181a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_RCC_GetSysClockFreq+0x104>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	fb02 f203 	mul.w	r2, r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_RCC_GetSysClockFreq+0x104>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0e5b      	lsrs	r3, r3, #25
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	3301      	adds	r3, #1
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	fbb2 f3f3 	udiv	r3, r2, r3
 800184c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800184e:	69bb      	ldr	r3, [r7, #24]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3724      	adds	r7, #36	; 0x24
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40021000 	.word	0x40021000
 8001860:	080030d8 	.word	0x080030d8
 8001864:	00f42400 	.word	0x00f42400
 8001868:	007a1200 	.word	0x007a1200

0800186c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001884:	f7ff fa72 	bl	8000d6c <HAL_PWREx_GetVoltageRange>
 8001888:	6178      	str	r0, [r7, #20]
 800188a:	e014      	b.n	80018b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	4a24      	ldr	r2, [pc, #144]	; (8001924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001896:	6593      	str	r3, [r2, #88]	; 0x58
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018a4:	f7ff fa62 	bl	8000d6c <HAL_PWREx_GetVoltageRange>
 80018a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018aa:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018bc:	d10b      	bne.n	80018d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b80      	cmp	r3, #128	; 0x80
 80018c2:	d919      	bls.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2ba0      	cmp	r3, #160	; 0xa0
 80018c8:	d902      	bls.n	80018d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018ca:	2302      	movs	r3, #2
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	e013      	b.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018d0:	2301      	movs	r3, #1
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	e010      	b.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b80      	cmp	r3, #128	; 0x80
 80018da:	d902      	bls.n	80018e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018dc:	2303      	movs	r3, #3
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	e00a      	b.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b80      	cmp	r3, #128	; 0x80
 80018e6:	d102      	bne.n	80018ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018e8:	2302      	movs	r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	e004      	b.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b70      	cmp	r3, #112	; 0x70
 80018f2:	d101      	bne.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018f4:	2301      	movs	r3, #1
 80018f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 0207 	bic.w	r2, r3, #7
 8001900:	4909      	ldr	r1, [pc, #36]	; (8001928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	429a      	cmp	r2, r3
 8001914:	d001      	beq.n	800191a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	40022000 	.word	0x40022000

0800192c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e01d      	b.n	800197a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7fe fe74 	bl	8000640 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3304      	adds	r3, #4
 8001968:	4619      	mov	r1, r3
 800196a:	4610      	mov	r0, r2
 800196c:	f000 fb06 	bl	8001f7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2201      	movs	r2, #1
 8001994:	6839      	ldr	r1, [r7, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fe60 	bl	800265c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <HAL_TIM_PWM_Start+0x98>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_TIM_PWM_Start+0x4a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_TIM_PWM_Start+0x9c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00e      	beq.n	80019ce <HAL_TIM_PWM_Start+0x4a>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <HAL_TIM_PWM_Start+0xa0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d009      	beq.n	80019ce <HAL_TIM_PWM_Start+0x4a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <HAL_TIM_PWM_Start+0xa4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d004      	beq.n	80019ce <HAL_TIM_PWM_Start+0x4a>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a18      	ldr	r2, [pc, #96]	; (8001a2c <HAL_TIM_PWM_Start+0xa8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_TIM_PWM_Start+0x4e>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_TIM_PWM_Start+0x50>
 80019d2:	2300      	movs	r3, #0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d007      	beq.n	80019e8 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_TIM_PWM_Start+0xac>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d00b      	beq.n	8001a12 <HAL_TIM_PWM_Start+0x8e>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a00:	d007      	beq.n	8001a12 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 0201 	orr.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40012c00 	.word	0x40012c00
 8001a20:	40013400 	.word	0x40013400
 8001a24:	40014000 	.word	0x40014000
 8001a28:	40014400 	.word	0x40014400
 8001a2c:	40014800 	.word	0x40014800
 8001a30:	00010007 	.word	0x00010007

08001a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d122      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d11b      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f06f 0202 	mvn.w	r2, #2
 8001a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7fe fba6 	bl	80001c8 <HAL_TIM_IC_CaptureCallback>
 8001a7c:	e005      	b.n	8001a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fa5e 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fa65 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d122      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d11b      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f06f 0204 	mvn.w	r2, #4
 8001ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7fe fb7c 	bl	80001c8 <HAL_TIM_IC_CaptureCallback>
 8001ad0:	e005      	b.n	8001ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 fa34 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fa3b 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d122      	bne.n	8001b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d11b      	bne.n	8001b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f06f 0208 	mvn.w	r2, #8
 8001b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fb52 	bl	80001c8 <HAL_TIM_IC_CaptureCallback>
 8001b24:	e005      	b.n	8001b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fa0a 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fa11 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d122      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d11b      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0210 	mvn.w	r2, #16
 8001b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2208      	movs	r2, #8
 8001b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe fb28 	bl	80001c8 <HAL_TIM_IC_CaptureCallback>
 8001b78:	e005      	b.n	8001b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f9e0 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f9e7 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d10e      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d107      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0201 	mvn.w	r2, #1
 8001bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f9ba 	bl	8001f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc2:	2b80      	cmp	r3, #128	; 0x80
 8001bc4:	d10e      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd0:	2b80      	cmp	r3, #128	; 0x80
 8001bd2:	d107      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fdc8 	bl	8002774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf2:	d10e      	bne.n	8001c12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfe:	2b80      	cmp	r3, #128	; 0x80
 8001c00:	d107      	bne.n	8001c12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fdbb 	bl	8002788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1c:	2b40      	cmp	r3, #64	; 0x40
 8001c1e:	d10e      	bne.n	8001c3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2a:	2b40      	cmp	r3, #64	; 0x40
 8001c2c:	d107      	bne.n	8001c3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f995 	bl	8001f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d10e      	bne.n	8001c6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	d107      	bne.n	8001c6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f06f 0220 	mvn.w	r2, #32
 8001c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fd7b 	bl	8002760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e105      	b.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0x226>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b14      	cmp	r3, #20
 8001ca2:	f200 80f0 	bhi.w	8001e86 <HAL_TIM_PWM_ConfigChannel+0x212>
 8001ca6:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001d01 	.word	0x08001d01
 8001cb0:	08001e87 	.word	0x08001e87
 8001cb4:	08001e87 	.word	0x08001e87
 8001cb8:	08001e87 	.word	0x08001e87
 8001cbc:	08001d41 	.word	0x08001d41
 8001cc0:	08001e87 	.word	0x08001e87
 8001cc4:	08001e87 	.word	0x08001e87
 8001cc8:	08001e87 	.word	0x08001e87
 8001ccc:	08001d83 	.word	0x08001d83
 8001cd0:	08001e87 	.word	0x08001e87
 8001cd4:	08001e87 	.word	0x08001e87
 8001cd8:	08001e87 	.word	0x08001e87
 8001cdc:	08001dc3 	.word	0x08001dc3
 8001ce0:	08001e87 	.word	0x08001e87
 8001ce4:	08001e87 	.word	0x08001e87
 8001ce8:	08001e87 	.word	0x08001e87
 8001cec:	08001e05 	.word	0x08001e05
 8001cf0:	08001e87 	.word	0x08001e87
 8001cf4:	08001e87 	.word	0x08001e87
 8001cf8:	08001e87 	.word	0x08001e87
 8001cfc:	08001e45 	.word	0x08001e45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f9d2 	bl	80020b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0208 	orr.w	r2, r2, #8
 8001d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0204 	bic.w	r2, r2, #4
 8001d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6999      	ldr	r1, [r3, #24]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	619a      	str	r2, [r3, #24]
      break;
 8001d3e:	e0a3      	b.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 fa42 	bl	80021d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6999      	ldr	r1, [r3, #24]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	021a      	lsls	r2, r3, #8
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	619a      	str	r2, [r3, #24]
      break;
 8001d80:	e082      	b.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68b9      	ldr	r1, [r7, #8]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 faab 	bl	80022e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	69da      	ldr	r2, [r3, #28]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0208 	orr.w	r2, r2, #8
 8001d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0204 	bic.w	r2, r2, #4
 8001dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	69d9      	ldr	r1, [r3, #28]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	61da      	str	r2, [r3, #28]
      break;
 8001dc0:	e062      	b.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68b9      	ldr	r1, [r7, #8]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fb13 	bl	80023f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	69da      	ldr	r2, [r3, #28]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69d9      	ldr	r1, [r3, #28]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	021a      	lsls	r2, r3, #8
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	61da      	str	r2, [r3, #28]
      break;
 8001e02:	e041      	b.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fb5c 	bl	80024c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0208 	orr.w	r2, r2, #8
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0204 	bic.w	r2, r2, #4
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001e42:	e021      	b.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fba0 	bl	8002590 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	021a      	lsls	r2, r3, #8
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001e84:	e000      	b.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8001e86:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop

08001ea4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b0c      	cmp	r3, #12
 8001eb6:	d831      	bhi.n	8001f1c <HAL_TIM_ReadCapturedValue+0x78>
 8001eb8:	a201      	add	r2, pc, #4	; (adr r2, 8001ec0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8001eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebe:	bf00      	nop
 8001ec0:	08001ef5 	.word	0x08001ef5
 8001ec4:	08001f1d 	.word	0x08001f1d
 8001ec8:	08001f1d 	.word	0x08001f1d
 8001ecc:	08001f1d 	.word	0x08001f1d
 8001ed0:	08001eff 	.word	0x08001eff
 8001ed4:	08001f1d 	.word	0x08001f1d
 8001ed8:	08001f1d 	.word	0x08001f1d
 8001edc:	08001f1d 	.word	0x08001f1d
 8001ee0:	08001f09 	.word	0x08001f09
 8001ee4:	08001f1d 	.word	0x08001f1d
 8001ee8:	08001f1d 	.word	0x08001f1d
 8001eec:	08001f1d 	.word	0x08001f1d
 8001ef0:	08001f13 	.word	0x08001f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efa:	60fb      	str	r3, [r7, #12]

      break;
 8001efc:	e00f      	b.n	8001f1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	60fb      	str	r3, [r7, #12]

      break;
 8001f06:	e00a      	b.n	8001f1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	60fb      	str	r3, [r7, #12]

      break;
 8001f10:	e005      	b.n	8001f1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	60fb      	str	r3, [r7, #12]

      break;
 8001f1a:	e000      	b.n	8001f1e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001f1c:	bf00      	nop
  }

  return tmpreg;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a40      	ldr	r2, [pc, #256]	; (8002090 <TIM_Base_SetConfig+0x114>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9a:	d00f      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3d      	ldr	r2, [pc, #244]	; (8002094 <TIM_Base_SetConfig+0x118>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00b      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3c      	ldr	r2, [pc, #240]	; (8002098 <TIM_Base_SetConfig+0x11c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3b      	ldr	r2, [pc, #236]	; (800209c <TIM_Base_SetConfig+0x120>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3a      	ldr	r2, [pc, #232]	; (80020a0 <TIM_Base_SetConfig+0x124>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d108      	bne.n	8001fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a2f      	ldr	r2, [pc, #188]	; (8002090 <TIM_Base_SetConfig+0x114>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01f      	beq.n	8002016 <TIM_Base_SetConfig+0x9a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fdc:	d01b      	beq.n	8002016 <TIM_Base_SetConfig+0x9a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a2c      	ldr	r2, [pc, #176]	; (8002094 <TIM_Base_SetConfig+0x118>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d017      	beq.n	8002016 <TIM_Base_SetConfig+0x9a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <TIM_Base_SetConfig+0x11c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <TIM_Base_SetConfig+0x9a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a2a      	ldr	r2, [pc, #168]	; (800209c <TIM_Base_SetConfig+0x120>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00f      	beq.n	8002016 <TIM_Base_SetConfig+0x9a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <TIM_Base_SetConfig+0x124>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00b      	beq.n	8002016 <TIM_Base_SetConfig+0x9a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <TIM_Base_SetConfig+0x128>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d007      	beq.n	8002016 <TIM_Base_SetConfig+0x9a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <TIM_Base_SetConfig+0x12c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d003      	beq.n	8002016 <TIM_Base_SetConfig+0x9a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a26      	ldr	r2, [pc, #152]	; (80020ac <TIM_Base_SetConfig+0x130>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d108      	bne.n	8002028 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800201c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <TIM_Base_SetConfig+0x114>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00f      	beq.n	8002074 <TIM_Base_SetConfig+0xf8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <TIM_Base_SetConfig+0x124>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d00b      	beq.n	8002074 <TIM_Base_SetConfig+0xf8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <TIM_Base_SetConfig+0x128>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d007      	beq.n	8002074 <TIM_Base_SetConfig+0xf8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <TIM_Base_SetConfig+0x12c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d003      	beq.n	8002074 <TIM_Base_SetConfig+0xf8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a0f      	ldr	r2, [pc, #60]	; (80020ac <TIM_Base_SetConfig+0x130>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d103      	bne.n	800207c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	615a      	str	r2, [r3, #20]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40012c00 	.word	0x40012c00
 8002094:	40000400 	.word	0x40000400
 8002098:	40000800 	.word	0x40000800
 800209c:	40000c00 	.word	0x40000c00
 80020a0:	40013400 	.word	0x40013400
 80020a4:	40014000 	.word	0x40014000
 80020a8:	40014400 	.word	0x40014400
 80020ac:	40014800 	.word	0x40014800

080020b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f023 0201 	bic.w	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0303 	bic.w	r3, r3, #3
 80020ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f023 0302 	bic.w	r3, r3, #2
 80020fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a2c      	ldr	r2, [pc, #176]	; (80021bc <TIM_OC1_SetConfig+0x10c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00f      	beq.n	8002130 <TIM_OC1_SetConfig+0x80>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <TIM_OC1_SetConfig+0x110>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00b      	beq.n	8002130 <TIM_OC1_SetConfig+0x80>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a2a      	ldr	r2, [pc, #168]	; (80021c4 <TIM_OC1_SetConfig+0x114>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d007      	beq.n	8002130 <TIM_OC1_SetConfig+0x80>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a29      	ldr	r2, [pc, #164]	; (80021c8 <TIM_OC1_SetConfig+0x118>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d003      	beq.n	8002130 <TIM_OC1_SetConfig+0x80>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a28      	ldr	r2, [pc, #160]	; (80021cc <TIM_OC1_SetConfig+0x11c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d10c      	bne.n	800214a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f023 0308 	bic.w	r3, r3, #8
 8002136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <TIM_OC1_SetConfig+0x10c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00f      	beq.n	8002172 <TIM_OC1_SetConfig+0xc2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a1a      	ldr	r2, [pc, #104]	; (80021c0 <TIM_OC1_SetConfig+0x110>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00b      	beq.n	8002172 <TIM_OC1_SetConfig+0xc2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <TIM_OC1_SetConfig+0x114>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <TIM_OC1_SetConfig+0xc2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <TIM_OC1_SetConfig+0x118>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d003      	beq.n	8002172 <TIM_OC1_SetConfig+0xc2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <TIM_OC1_SetConfig+0x11c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d111      	bne.n	8002196 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	621a      	str	r2, [r3, #32]
}
 80021b0:	bf00      	nop
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40013400 	.word	0x40013400
 80021c4:	40014000 	.word	0x40014000
 80021c8:	40014400 	.word	0x40014400
 80021cc:	40014800 	.word	0x40014800

080021d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	f023 0210 	bic.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f023 0320 	bic.w	r3, r3, #32
 800221e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <TIM_OC2_SetConfig+0x100>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d003      	beq.n	800223c <TIM_OC2_SetConfig+0x6c>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <TIM_OC2_SetConfig+0x104>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d10d      	bne.n	8002258 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002256:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <TIM_OC2_SetConfig+0x100>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00f      	beq.n	8002280 <TIM_OC2_SetConfig+0xb0>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <TIM_OC2_SetConfig+0x104>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d00b      	beq.n	8002280 <TIM_OC2_SetConfig+0xb0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <TIM_OC2_SetConfig+0x108>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d007      	beq.n	8002280 <TIM_OC2_SetConfig+0xb0>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <TIM_OC2_SetConfig+0x10c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d003      	beq.n	8002280 <TIM_OC2_SetConfig+0xb0>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <TIM_OC2_SetConfig+0x110>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d113      	bne.n	80022a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002286:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800228e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	621a      	str	r2, [r3, #32]
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40012c00 	.word	0x40012c00
 80022d4:	40013400 	.word	0x40013400
 80022d8:	40014000 	.word	0x40014000
 80022dc:	40014400 	.word	0x40014400
 80022e0:	40014800 	.word	0x40014800

080022e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	4313      	orrs	r3, r2
 800233c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a27      	ldr	r2, [pc, #156]	; (80023e0 <TIM_OC3_SetConfig+0xfc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d003      	beq.n	800234e <TIM_OC3_SetConfig+0x6a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a26      	ldr	r2, [pc, #152]	; (80023e4 <TIM_OC3_SetConfig+0x100>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10d      	bne.n	800236a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <TIM_OC3_SetConfig+0xfc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00f      	beq.n	8002392 <TIM_OC3_SetConfig+0xae>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <TIM_OC3_SetConfig+0x100>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00b      	beq.n	8002392 <TIM_OC3_SetConfig+0xae>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a1a      	ldr	r2, [pc, #104]	; (80023e8 <TIM_OC3_SetConfig+0x104>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <TIM_OC3_SetConfig+0xae>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a19      	ldr	r2, [pc, #100]	; (80023ec <TIM_OC3_SetConfig+0x108>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d003      	beq.n	8002392 <TIM_OC3_SetConfig+0xae>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a18      	ldr	r2, [pc, #96]	; (80023f0 <TIM_OC3_SetConfig+0x10c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d113      	bne.n	80023ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	621a      	str	r2, [r3, #32]
}
 80023d4:	bf00      	nop
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40012c00 	.word	0x40012c00
 80023e4:	40013400 	.word	0x40013400
 80023e8:	40014000 	.word	0x40014000
 80023ec:	40014400 	.word	0x40014400
 80023f0:	40014800 	.word	0x40014800

080023f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800242e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4313      	orrs	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	031b      	lsls	r3, r3, #12
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <TIM_OC4_SetConfig+0xc0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00f      	beq.n	8002478 <TIM_OC4_SetConfig+0x84>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <TIM_OC4_SetConfig+0xc4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00b      	beq.n	8002478 <TIM_OC4_SetConfig+0x84>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a16      	ldr	r2, [pc, #88]	; (80024bc <TIM_OC4_SetConfig+0xc8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <TIM_OC4_SetConfig+0x84>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <TIM_OC4_SetConfig+0xcc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d003      	beq.n	8002478 <TIM_OC4_SetConfig+0x84>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <TIM_OC4_SetConfig+0xd0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d109      	bne.n	800248c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800247e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	019b      	lsls	r3, r3, #6
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	621a      	str	r2, [r3, #32]
}
 80024a6:	bf00      	nop
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40012c00 	.word	0x40012c00
 80024b8:	40013400 	.word	0x40013400
 80024bc:	40014000 	.word	0x40014000
 80024c0:	40014400 	.word	0x40014400
 80024c4:	40014800 	.word	0x40014800

080024c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800250c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	041b      	lsls	r3, r3, #16
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a17      	ldr	r2, [pc, #92]	; (800257c <TIM_OC5_SetConfig+0xb4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00f      	beq.n	8002542 <TIM_OC5_SetConfig+0x7a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a16      	ldr	r2, [pc, #88]	; (8002580 <TIM_OC5_SetConfig+0xb8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00b      	beq.n	8002542 <TIM_OC5_SetConfig+0x7a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a15      	ldr	r2, [pc, #84]	; (8002584 <TIM_OC5_SetConfig+0xbc>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d007      	beq.n	8002542 <TIM_OC5_SetConfig+0x7a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a14      	ldr	r2, [pc, #80]	; (8002588 <TIM_OC5_SetConfig+0xc0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d003      	beq.n	8002542 <TIM_OC5_SetConfig+0x7a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a13      	ldr	r2, [pc, #76]	; (800258c <TIM_OC5_SetConfig+0xc4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d109      	bne.n	8002556 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002548:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	621a      	str	r2, [r3, #32]
}
 8002570:	bf00      	nop
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40012c00 	.word	0x40012c00
 8002580:	40013400 	.word	0x40013400
 8002584:	40014000 	.word	0x40014000
 8002588:	40014400 	.word	0x40014400
 800258c:	40014800 	.word	0x40014800

08002590 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	051b      	lsls	r3, r3, #20
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a18      	ldr	r2, [pc, #96]	; (8002648 <TIM_OC6_SetConfig+0xb8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00f      	beq.n	800260c <TIM_OC6_SetConfig+0x7c>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <TIM_OC6_SetConfig+0xbc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00b      	beq.n	800260c <TIM_OC6_SetConfig+0x7c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a16      	ldr	r2, [pc, #88]	; (8002650 <TIM_OC6_SetConfig+0xc0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d007      	beq.n	800260c <TIM_OC6_SetConfig+0x7c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a15      	ldr	r2, [pc, #84]	; (8002654 <TIM_OC6_SetConfig+0xc4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d003      	beq.n	800260c <TIM_OC6_SetConfig+0x7c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a14      	ldr	r2, [pc, #80]	; (8002658 <TIM_OC6_SetConfig+0xc8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d109      	bne.n	8002620 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002612:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	029b      	lsls	r3, r3, #10
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	621a      	str	r2, [r3, #32]
}
 800263a:	bf00      	nop
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40013400 	.word	0x40013400
 8002650:	40014000 	.word	0x40014000
 8002654:	40014400 	.word	0x40014400
 8002658:	40014800 	.word	0x40014800

0800265c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2201      	movs	r2, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a1a      	ldr	r2, [r3, #32]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	43db      	mvns	r3, r3
 800267e:	401a      	ands	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a1a      	ldr	r2, [r3, #32]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	431a      	orrs	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	621a      	str	r2, [r3, #32]
}
 800269a:	bf00      	nop
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026bc:	2302      	movs	r3, #2
 80026be:	e045      	b.n	800274c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1b      	ldr	r2, [pc, #108]	; (800275c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d108      	bne.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80026fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800271e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	4313      	orrs	r3, r2
 8002728:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40012c00 	.word	0x40012c00
 800275c:	40013400 	.word	0x40013400

08002760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <Motor_Init>:
#include "Common_Data.h"



void Motor_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
	TIM_PWM_Typedef TIM_handler = {0};
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]

#ifdef MOTOR1
	TIM_handler.TIMx = Motor1_A_TIM;
 80027b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027b4:	607b      	str	r3, [r7, #4]
	TIM_handler.TIM_channelx = Motor1_A_TIM_CHANNEL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	81bb      	strh	r3, [r7, #12]
	TIM_handler.GPIOx = Motor1_A_GPIO;
 80027ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027be:	613b      	str	r3, [r7, #16]
	TIM_handler.GPIO_Pinx = Motor1_A_GPIO_PIN;
 80027c0:	2301      	movs	r3, #1
 80027c2:	82bb      	strh	r3, [r7, #20]
	TIM_handler.GPIO_AlternateFunctionx = Motor1_A_GPIO_AF;
 80027c4:	2301      	movs	r3, #1
 80027c6:	75bb      	strb	r3, [r7, #22]
	TIM_handler.Frequency = PWM_FREQUENCY;
 80027c8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80027cc:	60bb      	str	r3, [r7, #8]

	TIMx_PWM_Init(TIM_handler);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027d6:	f7fd fddd 	bl	8000394 <TIMx_PWM_Init>

	TIM_handler.TIMx = Motor1_B_TIM;
 80027da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027de:	607b      	str	r3, [r7, #4]
	TIM_handler.TIM_channelx = Motor1_B_TIM_CHANNEL;
 80027e0:	2304      	movs	r3, #4
 80027e2:	81bb      	strh	r3, [r7, #12]
	TIM_handler.GPIOx = Motor1_B_GPIO;
 80027e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027e8:	613b      	str	r3, [r7, #16]
	TIM_handler.GPIO_Pinx = Motor1_B_GPIO_PIN;
 80027ea:	2302      	movs	r3, #2
 80027ec:	82bb      	strh	r3, [r7, #20]
	TIM_handler.GPIO_AlternateFunctionx = Motor1_B_GPIO_AF;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75bb      	strb	r3, [r7, #22]
	TIM_handler.Frequency = PWM_FREQUENCY;
 80027f2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80027f6:	60bb      	str	r3, [r7, #8]

	TIMx_PWM_Init(TIM_handler);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002800:	f7fd fdc8 	bl	8000394 <TIMx_PWM_Init>
	TIM_handler.Frequency = PWM_FREQUENCY;

	TIMx_PWM_Init(TIM_handler);
#endif
#ifdef MOTOR3
	TIM_handler.TIMx = Motor3_A_TIM;
 8002804:	4b14      	ldr	r3, [pc, #80]	; (8002858 <Motor_Init+0xbc>)
 8002806:	607b      	str	r3, [r7, #4]
	TIM_handler.TIM_channelx = Motor3_A_TIM_CHANNEL;
 8002808:	2300      	movs	r3, #0
 800280a:	81bb      	strh	r3, [r7, #12]
	TIM_handler.GPIOx = Motor3_A_GPIO;
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <Motor_Init+0xc0>)
 800280e:	613b      	str	r3, [r7, #16]
	TIM_handler.GPIO_Pinx = Motor3_A_GPIO_PIN;
 8002810:	2310      	movs	r3, #16
 8002812:	82bb      	strh	r3, [r7, #20]
	TIM_handler.GPIO_AlternateFunctionx = Motor3_A_GPIO_AF;
 8002814:	2302      	movs	r3, #2
 8002816:	75bb      	strb	r3, [r7, #22]
	TIM_handler.Frequency = PWM_FREQUENCY;
 8002818:	f644 6320 	movw	r3, #20000	; 0x4e20
 800281c:	60bb      	str	r3, [r7, #8]

	TIMx_PWM_Init(TIM_handler);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002826:	f7fd fdb5 	bl	8000394 <TIMx_PWM_Init>

	TIM_handler.TIMx = Motor3_B_TIM;
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <Motor_Init+0xbc>)
 800282c:	607b      	str	r3, [r7, #4]
	TIM_handler.TIM_channelx = Motor3_B_TIM_CHANNEL;
 800282e:	2304      	movs	r3, #4
 8002830:	81bb      	strh	r3, [r7, #12]
	TIM_handler.GPIOx = Motor3_B_GPIO;
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <Motor_Init+0xc0>)
 8002834:	613b      	str	r3, [r7, #16]
	TIM_handler.GPIO_Pinx = Motor3_B_GPIO_PIN;
 8002836:	2320      	movs	r3, #32
 8002838:	82bb      	strh	r3, [r7, #20]
	TIM_handler.GPIO_AlternateFunctionx = Motor3_B_GPIO_AF;
 800283a:	2302      	movs	r3, #2
 800283c:	75bb      	strb	r3, [r7, #22]
	TIM_handler.Frequency = PWM_FREQUENCY;
 800283e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002842:	60bb      	str	r3, [r7, #8]

	TIMx_PWM_Init(TIM_handler);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800284c:	f7fd fda2 	bl	8000394 <TIMx_PWM_Init>
	TIM_handler.GPIO_AlternateFunctionx = Motor4_B_GPIO_AF;
	TIM_handler.Frequency = PWM_FREQUENCY;

	TIMx_PWM_Init(TIM_handler);
#endif
}
 8002850:	bf00      	nop
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40000400 	.word	0x40000400
 800285c:	48000400 	.word	0x48000400

08002860 <Motor_Start>:

void Motor_Start(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af02      	add	r7, sp, #8
	TIM_PWM_Typedef TIM_handler = {0};
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]

#ifdef MOTOR1
	TIM_handler.TIMx = Motor1_A_TIM;
 8002874:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002878:	607b      	str	r3, [r7, #4]
	TIM_handler.TIM_channelx = Motor1_A_TIM_CHANNEL;
 800287a:	2300      	movs	r3, #0
 800287c:	81bb      	strh	r3, [r7, #12]

	TIMx_PWM_Start(TIM_handler);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002886:	f7fd fe5b 	bl	8000540 <TIMx_PWM_Start>

	TIM_handler.TIMx = Motor1_B_TIM;
 800288a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800288e:	607b      	str	r3, [r7, #4]
	TIM_handler.TIM_channelx = Motor1_B_TIM_CHANNEL;
 8002890:	2304      	movs	r3, #4
 8002892:	81bb      	strh	r3, [r7, #12]

	TIMx_PWM_Start(TIM_handler);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800289c:	f7fd fe50 	bl	8000540 <TIMx_PWM_Start>
	TIM_handler.TIM_channelx = Motor2_B_TIM_CHANNEL;

	TIMx_PWM_Start(TIM_handler);
#endif
#ifdef MOTOR3
	TIM_handler.TIMx = Motor3_A_TIM;
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <Motor_Start+0x70>)
 80028a2:	607b      	str	r3, [r7, #4]
	TIM_handler.TIM_channelx = Motor3_A_TIM_CHANNEL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	81bb      	strh	r3, [r7, #12]

	TIMx_PWM_Start(TIM_handler);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028b0:	f7fd fe46 	bl	8000540 <TIMx_PWM_Start>

	TIM_handler.TIMx = Motor3_B_TIM;
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <Motor_Start+0x70>)
 80028b6:	607b      	str	r3, [r7, #4]
	TIM_handler.TIM_channelx = Motor3_B_TIM_CHANNEL;
 80028b8:	2304      	movs	r3, #4
 80028ba:	81bb      	strh	r3, [r7, #12]

	TIMx_PWM_Start(TIM_handler);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028c4:	f7fd fe3c 	bl	8000540 <TIMx_PWM_Start>
	TIM_handler.TIMx = Motor4_B_TIM;
	TIM_handler.TIM_channelx = Motor4_B_TIM_CHANNEL;

	TIMx_PWM_Start(TIM_handler);
#endif
}
 80028c8:	bf00      	nop
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40000400 	.word	0x40000400

080028d4 <Motorx_Set_Speed>:
	TIMx_PWM_Stop(TIM_handler);
#endif
}

void Motorx_Set_Speed(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08e      	sub	sp, #56	; 0x38
 80028d8:	af02      	add	r7, sp, #8
	TIM_PWM_Typedef TIM_handler = {0};
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	60da      	str	r2, [r3, #12]
 80028e8:	611a      	str	r2, [r3, #16]
	WheelSpeed_Typedef Calculated_wheel_speeds;

	Read_Calculated_Wheel_Speeds(&Calculated_wheel_speeds);
 80028ea:	f107 030c 	add.w	r3, r7, #12
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f966 	bl	8002bc0 <Read_Calculated_Wheel_Speeds>

	if(Calculated_wheel_speeds.WheelSpeed_1 > 100)
 80028f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028f8:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002b2c <Motorx_Set_Speed+0x258>
 80028fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	dd02      	ble.n	800290c <Motorx_Set_Speed+0x38>
	{
		Calculated_wheel_speeds.WheelSpeed_1 = 100;
 8002906:	4b8a      	ldr	r3, [pc, #552]	; (8002b30 <Motorx_Set_Speed+0x25c>)
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	e00a      	b.n	8002922 <Motorx_Set_Speed+0x4e>
	}
	else if(Calculated_wheel_speeds.WheelSpeed_1 < (-100))
 800290c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002910:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8002b34 <Motorx_Set_Speed+0x260>
 8002914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291c:	d501      	bpl.n	8002922 <Motorx_Set_Speed+0x4e>
	{
		Calculated_wheel_speeds.WheelSpeed_1 = -100;
 800291e:	4b86      	ldr	r3, [pc, #536]	; (8002b38 <Motorx_Set_Speed+0x264>)
 8002920:	60fb      	str	r3, [r7, #12]
	}
	if(Calculated_wheel_speeds.WheelSpeed_2 > 100)
 8002922:	edd7 7a04 	vldr	s15, [r7, #16]
 8002926:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002b2c <Motorx_Set_Speed+0x258>
 800292a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002932:	dd02      	ble.n	800293a <Motorx_Set_Speed+0x66>
	{
		Calculated_wheel_speeds.WheelSpeed_2 = 100;
 8002934:	4b7e      	ldr	r3, [pc, #504]	; (8002b30 <Motorx_Set_Speed+0x25c>)
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	e00a      	b.n	8002950 <Motorx_Set_Speed+0x7c>
	}
	else if(Calculated_wheel_speeds.WheelSpeed_2 < (-100))
 800293a:	edd7 7a04 	vldr	s15, [r7, #16]
 800293e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002b34 <Motorx_Set_Speed+0x260>
 8002942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294a:	d501      	bpl.n	8002950 <Motorx_Set_Speed+0x7c>
	{
		Calculated_wheel_speeds.WheelSpeed_2 = -100;
 800294c:	4b7a      	ldr	r3, [pc, #488]	; (8002b38 <Motorx_Set_Speed+0x264>)
 800294e:	613b      	str	r3, [r7, #16]
	}
	if(Calculated_wheel_speeds.WheelSpeed_3 > 100)
 8002950:	edd7 7a05 	vldr	s15, [r7, #20]
 8002954:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002b2c <Motorx_Set_Speed+0x258>
 8002958:	eef4 7ac7 	vcmpe.f32	s15, s14
 800295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002960:	dd02      	ble.n	8002968 <Motorx_Set_Speed+0x94>
	{
		Calculated_wheel_speeds.WheelSpeed_3 = 100;
 8002962:	4b73      	ldr	r3, [pc, #460]	; (8002b30 <Motorx_Set_Speed+0x25c>)
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	e00a      	b.n	800297e <Motorx_Set_Speed+0xaa>
	}
	else if(Calculated_wheel_speeds.WheelSpeed_3 < (-100))
 8002968:	edd7 7a05 	vldr	s15, [r7, #20]
 800296c:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002b34 <Motorx_Set_Speed+0x260>
 8002970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002978:	d501      	bpl.n	800297e <Motorx_Set_Speed+0xaa>
	{
		Calculated_wheel_speeds.WheelSpeed_3 = -100;
 800297a:	4b6f      	ldr	r3, [pc, #444]	; (8002b38 <Motorx_Set_Speed+0x264>)
 800297c:	617b      	str	r3, [r7, #20]
	}
	if(Calculated_wheel_speeds.WheelSpeed_4 > 100)
 800297e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002982:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002b2c <Motorx_Set_Speed+0x258>
 8002986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298e:	dd02      	ble.n	8002996 <Motorx_Set_Speed+0xc2>
	{
		Calculated_wheel_speeds.WheelSpeed_4 = 100;
 8002990:	4b67      	ldr	r3, [pc, #412]	; (8002b30 <Motorx_Set_Speed+0x25c>)
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	e00a      	b.n	80029ac <Motorx_Set_Speed+0xd8>
	}
	else if(Calculated_wheel_speeds.WheelSpeed_4 < (-100))
 8002996:	edd7 7a06 	vldr	s15, [r7, #24]
 800299a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002b34 <Motorx_Set_Speed+0x260>
 800299e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a6:	d501      	bpl.n	80029ac <Motorx_Set_Speed+0xd8>
	{
		Calculated_wheel_speeds.WheelSpeed_4 = -100;
 80029a8:	4b63      	ldr	r3, [pc, #396]	; (8002b38 <Motorx_Set_Speed+0x264>)
 80029aa:	61bb      	str	r3, [r7, #24]
	}

	if(ZERO_SPEED <= Calculated_wheel_speeds.WheelSpeed_1)
 80029ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80029b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b8:	db2b      	blt.n	8002a12 <Motorx_Set_Speed+0x13e>
	{
		TIM_handler.TIMx = Motor1_A_TIM;
 80029ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029be:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor1_A_TIM_CHANNEL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 80029c4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80029c8:	623b      	str	r3, [r7, #32]

		TIM_handler.Duty_Cicle = (uint8_t)Calculated_wheel_speeds.WheelSpeed_1;
 80029ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80029ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80029d6:	793b      	ldrb	r3, [r7, #4]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	f107 031c 	add.w	r3, r7, #28
 80029e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029e8:	f7fd fdca 	bl	8000580 <Change_PWM_Pulse>

		TIM_handler.TIMx = Motor1_B_TIM;
 80029ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029f0:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor1_B_TIM_CHANNEL;
 80029f2:	2304      	movs	r3, #4
 80029f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 80029f6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80029fa:	623b      	str	r3, [r7, #32]
		TIM_handler.Duty_Cicle = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	f107 031c 	add.w	r3, r7, #28
 8002a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a0c:	f7fd fdb8 	bl	8000580 <Change_PWM_Pulse>
 8002a10:	e02c      	b.n	8002a6c <Motorx_Set_Speed+0x198>
	}
	else
	{
		TIM_handler.TIMx = Motor1_A_TIM;
 8002a12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a16:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor1_A_TIM_CHANNEL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 8002a1c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002a20:	623b      	str	r3, [r7, #32]

		TIM_handler.Duty_Cicle = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 8002a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	f107 031c 	add.w	r3, r7, #28
 8002a30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a32:	f7fd fda5 	bl	8000580 <Change_PWM_Pulse>

		TIM_handler.TIMx = Motor1_B_TIM;
 8002a36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a3a:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor1_B_TIM_CHANNEL;
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 8002a40:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002a44:	623b      	str	r3, [r7, #32]
		TIM_handler.Duty_Cicle = (uint8_t)(Calculated_wheel_speeds.WheelSpeed_1 * -1);
 8002a46:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a4a:	eef1 7a67 	vneg.f32	s15, s15
 8002a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a52:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a56:	793b      	ldrb	r3, [r7, #4]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 8002a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	f107 031c 	add.w	r3, r7, #28
 8002a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a68:	f7fd fd8a 	bl	8000580 <Change_PWM_Pulse>
		TIM_handler.Duty_Cicle = (Calculated_wheel_speeds.WheelSpeed_2 * -1);
		Change_PWM_Pulse(TIM_handler);
	}
#endif
#ifdef MOTOR3
	if(ZERO_SPEED <= Calculated_wheel_speeds.WheelSpeed_3)
 8002a6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a78:	db29      	blt.n	8002ace <Motorx_Set_Speed+0x1fa>
	{
		TIM_handler.TIMx = Motor3_A_TIM;
 8002a7a:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <Motorx_Set_Speed+0x268>)
 8002a7c:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor3_A_TIM_CHANNEL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 8002a82:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002a86:	623b      	str	r3, [r7, #32]
		TIM_handler.Duty_Cicle = (uint8_t)Calculated_wheel_speeds.WheelSpeed_3;
 8002a88:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a90:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a94:	793b      	ldrb	r3, [r7, #4]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa6:	f7fd fd6b 	bl	8000580 <Change_PWM_Pulse>

		TIM_handler.TIMx = Motor3_B_TIM;
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <Motorx_Set_Speed+0x268>)
 8002aac:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor3_B_TIM_CHANNEL;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 8002ab2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002ab6:	623b      	str	r3, [r7, #32]
		TIM_handler.Duty_Cicle = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ac8:	f7fd fd5a 	bl	8000580 <Change_PWM_Pulse>
		Change_PWM_Pulse(TIM_handler);
	}
#endif


}
 8002acc:	e02a      	b.n	8002b24 <Motorx_Set_Speed+0x250>
		TIM_handler.TIMx = Motor3_A_TIM;
 8002ace:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <Motorx_Set_Speed+0x268>)
 8002ad0:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor3_A_TIM_CHANNEL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 8002ad6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002ada:	623b      	str	r3, [r7, #32]
		TIM_handler.Duty_Cicle = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	f107 031c 	add.w	r3, r7, #28
 8002aea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aec:	f7fd fd48 	bl	8000580 <Change_PWM_Pulse>
		TIM_handler.TIMx = Motor3_B_TIM;
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <Motorx_Set_Speed+0x268>)
 8002af2:	61fb      	str	r3, [r7, #28]
		TIM_handler.TIM_channelx = Motor3_B_TIM_CHANNEL;
 8002af4:	2304      	movs	r3, #4
 8002af6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TIM_handler.Frequency = PWM_FREQUENCY;
 8002af8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002afc:	623b      	str	r3, [r7, #32]
		TIM_handler.Duty_Cicle = (Calculated_wheel_speeds.WheelSpeed_3 * -1);
 8002afe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b02:	eef1 7a67 	vneg.f32	s15, s15
 8002b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b0a:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b0e:	793b      	ldrb	r3, [r7, #4]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Change_PWM_Pulse(TIM_handler);
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	f107 031c 	add.w	r3, r7, #28
 8002b1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b20:	f7fd fd2e 	bl	8000580 <Change_PWM_Pulse>
}
 8002b24:	bf00      	nop
 8002b26:	3730      	adds	r7, #48	; 0x30
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	42c80000 	.word	0x42c80000
 8002b30:	42c80000 	.word	0x42c80000
 8002b34:	c2c80000 	.word	0xc2c80000
 8002b38:	c2c80000 	.word	0xc2c80000
 8002b3c:	40000400 	.word	0x40000400

08002b40 <Write_IC_Channel1_Raw_data>:
{
	(* data) = Timer_IC_Channel1_Raw_data;
}

void Write_IC_Channel1_Raw_data(uint32_t * data)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel1_Raw_data = (* data);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a03      	ldr	r2, [pc, #12]	; (8002b5c <Write_IC_Channel1_Raw_data+0x1c>)
 8002b4e:	6013      	str	r3, [r2, #0]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	200000b8 	.word	0x200000b8

08002b60 <Write_IC_Channel2_Raw_data>:
{
	(* data) = Timer_IC_Channel2_Raw_data;
}

void Write_IC_Channel2_Raw_data(uint32_t * data)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel2_Raw_data = (* data);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a03      	ldr	r2, [pc, #12]	; (8002b7c <Write_IC_Channel2_Raw_data+0x1c>)
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	200000c4 	.word	0x200000c4

08002b80 <Write_IC_Channel3_Raw_data>:
{
	(* data) = Timer_IC_Channel3_Raw_data;
}

void Write_IC_Channel3_Raw_data(uint32_t * data)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	Timer_IC_Channel3_Raw_data = (* data);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a03      	ldr	r2, [pc, #12]	; (8002b9c <Write_IC_Channel3_Raw_data+0x1c>)
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	200000bc 	.word	0x200000bc

08002ba0 <Write_Button_Pressed>:
{
	(* data) = Button_Pressed;
}

void Write_Button_Pressed(uint8_t * data)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	Button_Pressed = (* data);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	781a      	ldrb	r2, [r3, #0]
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <Write_Button_Pressed+0x1c>)
 8002bae:	701a      	strb	r2, [r3, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	200000f4 	.word	0x200000f4

08002bc0 <Read_Calculated_Wheel_Speeds>:
	RemoteControl_Provided_Robot_Speed = (* data);
}


void Read_Calculated_Wheel_Speeds(WheelSpeed_Typedef * data)
{
 8002bc0:	b490      	push	{r4, r7}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	(* data) = WheelSpeedCalculation_Calculated_WheelSpeeds;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <Read_Calculated_Wheel_Speeds+0x20>)
 8002bcc:	461c      	mov	r4, r3
 8002bce:	4613      	mov	r3, r2
 8002bd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc90      	pop	{r4, r7}
 8002bde:	4770      	bx	lr
 8002be0:	200000d4 	.word	0x200000d4

08002be4 <Write_Calculated_Wheel_Speeds>:

void Write_Calculated_Wheel_Speeds(WheelSpeed_Typedef * data)
{
 8002be4:	b490      	push	{r4, r7}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	WheelSpeedCalculation_Calculated_WheelSpeeds = (* data);
 8002bec:	4a05      	ldr	r2, [pc, #20]	; (8002c04 <Write_Calculated_Wheel_Speeds+0x20>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc90      	pop	{r4, r7}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	200000d4 	.word	0x200000d4

08002c08 <Init_System_Startup>:
#include "Initialize_System.h"

TIM_HandleTypeDef htim1;

void Init_System_Startup(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
	htim1.Instance = TIM1;
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <Init_System_Startup+0x18>)
 8002c0e:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <Init_System_Startup+0x1c>)
 8002c10:	601a      	str	r2, [r3, #0]
	//Remote_Control_init();
	Motor_Init();
 8002c12:	f7ff fdc3 	bl	800279c <Motor_Init>
	Motor_Start();
 8002c16:	f7ff fe23 	bl	8002860 <Motor_Start>
	//Calibrate_Remote_Control();
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200000f8 	.word	0x200000f8
 8002c24:	40012c00 	.word	0x40012c00

08002c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c2e:	f7fd fd4d 	bl	80006cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c32:	f000 f863 	bl	8002cfc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Calculated_wheel_speeds.WheelSpeed_1 = 75;
 8002c36:	4b2b      	ldr	r3, [pc, #172]	; (8002ce4 <main+0xbc>)
 8002c38:	60bb      	str	r3, [r7, #8]
  Calculated_wheel_speeds.WheelSpeed_3 = -15;
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <main+0xc0>)
 8002c3c:	613b      	str	r3, [r7, #16]
  Write_Calculated_Wheel_Speeds(&Calculated_wheel_speeds);
 8002c3e:	f107 0308 	add.w	r3, r7, #8
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff ffce 	bl	8002be4 <Write_Calculated_Wheel_Speeds>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c48:	4b28      	ldr	r3, [pc, #160]	; (8002cec <main+0xc4>)
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	4a27      	ldr	r2, [pc, #156]	; (8002cec <main+0xc4>)
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <main+0xc4>)
 8002c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c60:	4b22      	ldr	r3, [pc, #136]	; (8002cec <main+0xc4>)
 8002c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c64:	4a21      	ldr	r2, [pc, #132]	; (8002cec <main+0xc4>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <main+0xc4>)
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
  MX_GPIO_Init();
 8002c78:	f000 f892 	bl	8002da0 <MX_GPIO_Init>
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <main+0xc8>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <main+0xc8>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <main+0xc8>)
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <main+0xc8>)
 8002c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c94:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c96:	4916      	ldr	r1, [pc, #88]	; (8002cf0 <main+0xc8>)
 8002c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9c:	f7fd fe8e 	bl	80009bc <HAL_GPIO_Init>

  GPIO_InitStruct2.Mode  = GPIO_MODE_OUTPUT_PP;
 8002ca0:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <main+0xcc>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct2.Pull  = GPIO_PULLUP;
 8002ca6:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <main+0xcc>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct2.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <main+0xcc>)
 8002cae:	2203      	movs	r2, #3
 8002cb0:	60da      	str	r2, [r3, #12]

    GPIO_InitStruct2.Pin = GPIO_PIN_1;
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <main+0xcc>)
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct2);
 8002cb8:	490e      	ldr	r1, [pc, #56]	; (8002cf4 <main+0xcc>)
 8002cba:	480f      	ldr	r0, [pc, #60]	; (8002cf8 <main+0xd0>)
 8002cbc:	f7fd fe7e 	bl	80009bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cca:	f7fe f81f 	bl	8000d0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8002cce:	2201      	movs	r2, #1
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	4809      	ldr	r0, [pc, #36]	; (8002cf8 <main+0xd0>)
 8002cd4:	f7fe f81a 	bl	8000d0c <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */
  Init_System_Startup();
 8002cd8:	f7ff ff96 	bl	8002c08 <Init_System_Startup>
  while (1)
  {
	  //Provide_Robot_Speed();
	  //Calculate_Wheel_Speeds();

	  Motorx_Set_Speed();
 8002cdc:	f7ff fdfa 	bl	80028d4 <Motorx_Set_Speed>
 8002ce0:	e7fc      	b.n	8002cdc <main+0xb4>
 8002ce2:	bf00      	nop
 8002ce4:	42960000 	.word	0x42960000
 8002ce8:	c1700000 	.word	0xc1700000
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	20000030 	.word	0x20000030
 8002cf4:	20000044 	.word	0x20000044
 8002cf8:	48000800 	.word	0x48000800

08002cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b096      	sub	sp, #88	; 0x58
 8002d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	2244      	movs	r2, #68	; 0x44
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f9c8 	bl	80030a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d10:	463b      	mov	r3, r7
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	609a      	str	r2, [r3, #8]
 8002d1a:	60da      	str	r2, [r3, #12]
 8002d1c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d28:	2310      	movs	r3, #16
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d30:	2302      	movs	r3, #2
 8002d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002d34:	2301      	movs	r3, #1
 8002d36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002d38:	2308      	movs	r3, #8
 8002d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002d3c:	2307      	movs	r3, #7
 8002d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d40:	2302      	movs	r3, #2
 8002d42:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d44:	2302      	movs	r3, #2
 8002d46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe f871 	bl	8000e34 <HAL_RCC_OscConfig>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8002d58:	f000 f8bc 	bl	8002ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d5c:	230f      	movs	r3, #15
 8002d5e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d60:	2303      	movs	r3, #3
 8002d62:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002d70:	463b      	mov	r3, r7
 8002d72:	2103      	movs	r1, #3
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe fc0d 	bl	8001594 <HAL_RCC_ClockConfig>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002d80:	f000 f8a8 	bl	8002ed4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002d84:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d88:	f7fd fffe 	bl	8000d88 <HAL_PWREx_ControlVoltageScaling>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002d92:	f000 f89f 	bl	8002ed4 <Error_Handler>
  }
}
 8002d96:	bf00      	nop
 8002d98:	3758      	adds	r7, #88	; 0x58
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da6:	f107 030c 	add.w	r3, r7, #12
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	609a      	str	r2, [r3, #8]
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db6:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dba:	4a2c      	ldr	r2, [pc, #176]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002dbc:	f043 0304 	orr.w	r3, r3, #4
 8002dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	4b27      	ldr	r3, [pc, #156]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd2:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dda:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <MX_GPIO_Init+0xcc>)
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_B_GPIO_Port, EN_B_Pin, GPIO_PIN_RESET);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2102      	movs	r1, #2
 8002dea:	4821      	ldr	r0, [pc, #132]	; (8002e70 <MX_GPIO_Init+0xd0>)
 8002dec:	f7fd ff8e 	bl	8000d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_A_GPIO_Port, EN_A_Pin, GPIO_PIN_RESET);
 8002df0:	2200      	movs	r2, #0
 8002df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dfa:	f7fd ff87 	bl	8000d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <MX_GPIO_Init+0xd4>)
 8002e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e0c:	f107 030c 	add.w	r3, r7, #12
 8002e10:	4619      	mov	r1, r3
 8002e12:	4817      	ldr	r0, [pc, #92]	; (8002e70 <MX_GPIO_Init+0xd0>)
 8002e14:	f7fd fdd2 	bl	80009bc <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_B_Pin */
  GPIO_InitStruct.Pin = EN_B_Pin;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_B_GPIO_Port, &GPIO_InitStruct);
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4810      	ldr	r0, [pc, #64]	; (8002e70 <MX_GPIO_Init+0xd0>)
 8002e30:	f7fd fdc4 	bl	80009bc <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_A_Pin */
  GPIO_InitStruct.Pin = EN_A_Pin;
 8002e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_A_GPIO_Port, &GPIO_InitStruct);
 8002e46:	f107 030c 	add.w	r3, r7, #12
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e50:	f7fd fdb4 	bl	80009bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2100      	movs	r1, #0
 8002e58:	2028      	movs	r0, #40	; 0x28
 8002e5a:	f7fd fd78 	bl	800094e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e5e:	2028      	movs	r0, #40	; 0x28
 8002e60:	f7fd fd91 	bl	8000986 <HAL_NVIC_EnableIRQ>

}
 8002e64:	bf00      	nop
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	48000800 	.word	0x48000800
 8002e74:	10210000 	.word	0x10210000

08002e78 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	80fb      	strh	r3, [r7, #6]
	uint8_t btn_pressed;

	if(sys_count > (get_sys_count+800))
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_GPIO_EXTI_Callback+0x38>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f503 7248 	add.w	r2, r3, #800	; 0x320
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d20a      	bcs.n	8002ea8 <HAL_GPIO_EXTI_Callback+0x30>
	{
		btn_pressed = TRUE;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
		Write_Button_Pressed(&btn_pressed);
 8002e96:	f107 030f 	add.w	r3, r7, #15
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fe80 	bl	8002ba0 <Write_Button_Pressed>
		get_sys_count= sys_count;
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a02      	ldr	r2, [pc, #8]	; (8002eb0 <HAL_GPIO_EXTI_Callback+0x38>)
 8002ea6:	6013      	str	r3, [r2, #0]
	}

}
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	2000002c 	.word	0x2000002c
 8002eb4:	20000028 	.word	0x20000028

08002eb8 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
    ++sys_count;
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <SysTick_Handler+0x18>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	4a03      	ldr	r2, [pc, #12]	; (8002ed0 <SysTick_Handler+0x18>)
 8002ec4:	6013      	str	r3, [r2, #0]
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	20000028 	.word	0x20000028

08002ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1);
 8002ed8:	e7fe      	b.n	8002ed8 <Error_Handler+0x4>
	...

08002edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_MspInit+0x44>)
 8002ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee6:	4a0e      	ldr	r2, [pc, #56]	; (8002f20 <HAL_MspInit+0x44>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	6613      	str	r3, [r2, #96]	; 0x60
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <HAL_MspInit+0x44>)
 8002ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_MspInit+0x44>)
 8002efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efe:	4a08      	ldr	r2, [pc, #32]	; (8002f20 <HAL_MspInit+0x44>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6593      	str	r3, [r2, #88]	; 0x58
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_MspInit+0x44>)
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000

08002f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f36:	e7fe      	b.n	8002f36 <HardFault_Handler+0x4>

08002f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f3c:	e7fe      	b.n	8002f3c <MemManage_Handler+0x4>

08002f3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f42:	e7fe      	b.n	8002f42 <BusFault_Handler+0x4>

08002f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f48:	e7fe      	b.n	8002f48 <UsageFault_Handler+0x4>

08002f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f66:	b480      	push	{r7}
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <TIM1_CC_IRQHandler>:

/**
	 * @brief This function handles TIM1 capture compare interrupt.
	 */
void TIM1_CC_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f78:	4802      	ldr	r0, [pc, #8]	; (8002f84 <TIM1_CC_IRQHandler+0x10>)
 8002f7a:	f7fe fd5b 	bl	8001a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	200000f8 	.word	0x200000f8

08002f88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002f8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f90:	f7fd fed4 	bl	8000d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f9c:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <SystemInit+0x64>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <SystemInit+0x64>)
 8002fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <SystemInit+0x68>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a13      	ldr	r2, [pc, #76]	; (8003000 <SystemInit+0x68>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <SystemInit+0x68>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <SystemInit+0x68>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a0f      	ldr	r2, [pc, #60]	; (8003000 <SystemInit+0x68>)
 8002fc4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002fc8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002fcc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <SystemInit+0x68>)
 8002fd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <SystemInit+0x68>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <SystemInit+0x68>)
 8002fdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002fe2:	4b07      	ldr	r3, [pc, #28]	; (8003000 <SystemInit+0x68>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <SystemInit+0x64>)
 8002fea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fee:	609a      	str	r2, [r3, #8]
#endif
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000ed00 	.word	0xe000ed00
 8003000:	40021000 	.word	0x40021000

08003004 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800303c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003008:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800300a:	e003      	b.n	8003014 <LoopCopyDataInit>

0800300c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800300e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003010:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003012:	3104      	adds	r1, #4

08003014 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003014:	480b      	ldr	r0, [pc, #44]	; (8003044 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003018:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800301a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800301c:	d3f6      	bcc.n	800300c <CopyDataInit>
	ldr	r2, =_sbss
 800301e:	4a0b      	ldr	r2, [pc, #44]	; (800304c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003020:	e002      	b.n	8003028 <LoopFillZerobss>

08003022 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003022:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003024:	f842 3b04 	str.w	r3, [r2], #4

08003028 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <LoopForever+0x16>)
	cmp	r2, r3
 800302a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800302c:	d3f9      	bcc.n	8003022 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800302e:	f7ff ffb3 	bl	8002f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003032:	f000 f811 	bl	8003058 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003036:	f7ff fdf7 	bl	8002c28 <main>

0800303a <LoopForever>:

LoopForever:
    b LoopForever
 800303a:	e7fe      	b.n	800303a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800303c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003040:	08003110 	.word	0x08003110
	ldr	r0, =_sdata
 8003044:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003048:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800304c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003050:	20000138 	.word	0x20000138

08003054 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003054:	e7fe      	b.n	8003054 <ADC1_2_IRQHandler>
	...

08003058 <__libc_init_array>:
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	4e0d      	ldr	r6, [pc, #52]	; (8003090 <__libc_init_array+0x38>)
 800305c:	4c0d      	ldr	r4, [pc, #52]	; (8003094 <__libc_init_array+0x3c>)
 800305e:	1ba4      	subs	r4, r4, r6
 8003060:	10a4      	asrs	r4, r4, #2
 8003062:	2500      	movs	r5, #0
 8003064:	42a5      	cmp	r5, r4
 8003066:	d109      	bne.n	800307c <__libc_init_array+0x24>
 8003068:	4e0b      	ldr	r6, [pc, #44]	; (8003098 <__libc_init_array+0x40>)
 800306a:	4c0c      	ldr	r4, [pc, #48]	; (800309c <__libc_init_array+0x44>)
 800306c:	f000 f820 	bl	80030b0 <_init>
 8003070:	1ba4      	subs	r4, r4, r6
 8003072:	10a4      	asrs	r4, r4, #2
 8003074:	2500      	movs	r5, #0
 8003076:	42a5      	cmp	r5, r4
 8003078:	d105      	bne.n	8003086 <__libc_init_array+0x2e>
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003080:	4798      	blx	r3
 8003082:	3501      	adds	r5, #1
 8003084:	e7ee      	b.n	8003064 <__libc_init_array+0xc>
 8003086:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800308a:	4798      	blx	r3
 800308c:	3501      	adds	r5, #1
 800308e:	e7f2      	b.n	8003076 <__libc_init_array+0x1e>
 8003090:	08003108 	.word	0x08003108
 8003094:	08003108 	.word	0x08003108
 8003098:	08003108 	.word	0x08003108
 800309c:	0800310c 	.word	0x0800310c

080030a0 <memset>:
 80030a0:	4402      	add	r2, r0
 80030a2:	4603      	mov	r3, r0
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d100      	bne.n	80030aa <memset+0xa>
 80030a8:	4770      	bx	lr
 80030aa:	f803 1b01 	strb.w	r1, [r3], #1
 80030ae:	e7f9      	b.n	80030a4 <memset+0x4>

080030b0 <_init>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	bf00      	nop
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr

080030bc <_fini>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	bf00      	nop
 80030c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c2:	bc08      	pop	{r3}
 80030c4:	469e      	mov	lr, r3
 80030c6:	4770      	bx	lr
